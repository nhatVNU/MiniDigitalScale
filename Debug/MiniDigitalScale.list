
MiniDigitalScale.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e2c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  08006f40  08006f40  00016f40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007238  08007238  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007238  08007238  00017238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007240  08007240  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007240  08007240  00017240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007244  08007244  00017244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007248  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  200001dc  08007424  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08007424  00020288  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007e03  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015f7  00000000  00000000  00028008  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000778  00000000  00000000  00029600  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006c8  00000000  00000000  00029d78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016ffb  00000000  00000000  0002a440  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006fa9  00000000  00000000  0004143b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00082b06  00000000  00000000  000483e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000caeea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b9c  00000000  00000000  000caf68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08006f24 	.word	0x08006f24

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08006f24 	.word	0x08006f24

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_ldivmod>:
 8001024:	b97b      	cbnz	r3, 8001046 <__aeabi_ldivmod+0x22>
 8001026:	b972      	cbnz	r2, 8001046 <__aeabi_ldivmod+0x22>
 8001028:	2900      	cmp	r1, #0
 800102a:	bfbe      	ittt	lt
 800102c:	2000      	movlt	r0, #0
 800102e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8001032:	e006      	blt.n	8001042 <__aeabi_ldivmod+0x1e>
 8001034:	bf08      	it	eq
 8001036:	2800      	cmpeq	r0, #0
 8001038:	bf1c      	itt	ne
 800103a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800103e:	f04f 30ff 	movne.w	r0, #4294967295
 8001042:	f000 b9a7 	b.w	8001394 <__aeabi_idiv0>
 8001046:	f1ad 0c08 	sub.w	ip, sp, #8
 800104a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800104e:	2900      	cmp	r1, #0
 8001050:	db09      	blt.n	8001066 <__aeabi_ldivmod+0x42>
 8001052:	2b00      	cmp	r3, #0
 8001054:	db1a      	blt.n	800108c <__aeabi_ldivmod+0x68>
 8001056:	f000 f835 	bl	80010c4 <__udivmoddi4>
 800105a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800105e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001062:	b004      	add	sp, #16
 8001064:	4770      	bx	lr
 8001066:	4240      	negs	r0, r0
 8001068:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800106c:	2b00      	cmp	r3, #0
 800106e:	db1b      	blt.n	80010a8 <__aeabi_ldivmod+0x84>
 8001070:	f000 f828 	bl	80010c4 <__udivmoddi4>
 8001074:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001078:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800107c:	b004      	add	sp, #16
 800107e:	4240      	negs	r0, r0
 8001080:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001084:	4252      	negs	r2, r2
 8001086:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800108a:	4770      	bx	lr
 800108c:	4252      	negs	r2, r2
 800108e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001092:	f000 f817 	bl	80010c4 <__udivmoddi4>
 8001096:	f8dd e004 	ldr.w	lr, [sp, #4]
 800109a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800109e:	b004      	add	sp, #16
 80010a0:	4240      	negs	r0, r0
 80010a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010a6:	4770      	bx	lr
 80010a8:	4252      	negs	r2, r2
 80010aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010ae:	f000 f809 	bl	80010c4 <__udivmoddi4>
 80010b2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010ba:	b004      	add	sp, #16
 80010bc:	4252      	negs	r2, r2
 80010be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80010c2:	4770      	bx	lr

080010c4 <__udivmoddi4>:
 80010c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010c8:	468c      	mov	ip, r1
 80010ca:	4604      	mov	r4, r0
 80010cc:	9e08      	ldr	r6, [sp, #32]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d14b      	bne.n	800116a <__udivmoddi4+0xa6>
 80010d2:	428a      	cmp	r2, r1
 80010d4:	4615      	mov	r5, r2
 80010d6:	d967      	bls.n	80011a8 <__udivmoddi4+0xe4>
 80010d8:	fab2 f282 	clz	r2, r2
 80010dc:	b14a      	cbz	r2, 80010f2 <__udivmoddi4+0x2e>
 80010de:	f1c2 0720 	rsb	r7, r2, #32
 80010e2:	fa01 f302 	lsl.w	r3, r1, r2
 80010e6:	fa20 f707 	lsr.w	r7, r0, r7
 80010ea:	4095      	lsls	r5, r2
 80010ec:	ea47 0c03 	orr.w	ip, r7, r3
 80010f0:	4094      	lsls	r4, r2
 80010f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80010f6:	fbbc f7fe 	udiv	r7, ip, lr
 80010fa:	fa1f f885 	uxth.w	r8, r5
 80010fe:	fb0e c317 	mls	r3, lr, r7, ip
 8001102:	fb07 f908 	mul.w	r9, r7, r8
 8001106:	0c21      	lsrs	r1, r4, #16
 8001108:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800110c:	4599      	cmp	r9, r3
 800110e:	d909      	bls.n	8001124 <__udivmoddi4+0x60>
 8001110:	18eb      	adds	r3, r5, r3
 8001112:	f107 31ff 	add.w	r1, r7, #4294967295
 8001116:	f080 811c 	bcs.w	8001352 <__udivmoddi4+0x28e>
 800111a:	4599      	cmp	r9, r3
 800111c:	f240 8119 	bls.w	8001352 <__udivmoddi4+0x28e>
 8001120:	3f02      	subs	r7, #2
 8001122:	442b      	add	r3, r5
 8001124:	eba3 0309 	sub.w	r3, r3, r9
 8001128:	fbb3 f0fe 	udiv	r0, r3, lr
 800112c:	fb0e 3310 	mls	r3, lr, r0, r3
 8001130:	fb00 f108 	mul.w	r1, r0, r8
 8001134:	b2a4      	uxth	r4, r4
 8001136:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800113a:	42a1      	cmp	r1, r4
 800113c:	d909      	bls.n	8001152 <__udivmoddi4+0x8e>
 800113e:	192c      	adds	r4, r5, r4
 8001140:	f100 33ff 	add.w	r3, r0, #4294967295
 8001144:	f080 8107 	bcs.w	8001356 <__udivmoddi4+0x292>
 8001148:	42a1      	cmp	r1, r4
 800114a:	f240 8104 	bls.w	8001356 <__udivmoddi4+0x292>
 800114e:	3802      	subs	r0, #2
 8001150:	442c      	add	r4, r5
 8001152:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001156:	2700      	movs	r7, #0
 8001158:	1a64      	subs	r4, r4, r1
 800115a:	b11e      	cbz	r6, 8001164 <__udivmoddi4+0xa0>
 800115c:	2300      	movs	r3, #0
 800115e:	40d4      	lsrs	r4, r2
 8001160:	e9c6 4300 	strd	r4, r3, [r6]
 8001164:	4639      	mov	r1, r7
 8001166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800116a:	428b      	cmp	r3, r1
 800116c:	d909      	bls.n	8001182 <__udivmoddi4+0xbe>
 800116e:	2e00      	cmp	r6, #0
 8001170:	f000 80ec 	beq.w	800134c <__udivmoddi4+0x288>
 8001174:	2700      	movs	r7, #0
 8001176:	e9c6 0100 	strd	r0, r1, [r6]
 800117a:	4638      	mov	r0, r7
 800117c:	4639      	mov	r1, r7
 800117e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001182:	fab3 f783 	clz	r7, r3
 8001186:	2f00      	cmp	r7, #0
 8001188:	d148      	bne.n	800121c <__udivmoddi4+0x158>
 800118a:	428b      	cmp	r3, r1
 800118c:	d302      	bcc.n	8001194 <__udivmoddi4+0xd0>
 800118e:	4282      	cmp	r2, r0
 8001190:	f200 80fb 	bhi.w	800138a <__udivmoddi4+0x2c6>
 8001194:	1a84      	subs	r4, r0, r2
 8001196:	eb61 0303 	sbc.w	r3, r1, r3
 800119a:	2001      	movs	r0, #1
 800119c:	469c      	mov	ip, r3
 800119e:	2e00      	cmp	r6, #0
 80011a0:	d0e0      	beq.n	8001164 <__udivmoddi4+0xa0>
 80011a2:	e9c6 4c00 	strd	r4, ip, [r6]
 80011a6:	e7dd      	b.n	8001164 <__udivmoddi4+0xa0>
 80011a8:	b902      	cbnz	r2, 80011ac <__udivmoddi4+0xe8>
 80011aa:	deff      	udf	#255	; 0xff
 80011ac:	fab2 f282 	clz	r2, r2
 80011b0:	2a00      	cmp	r2, #0
 80011b2:	f040 808f 	bne.w	80012d4 <__udivmoddi4+0x210>
 80011b6:	2701      	movs	r7, #1
 80011b8:	1b49      	subs	r1, r1, r5
 80011ba:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80011be:	fa1f f985 	uxth.w	r9, r5
 80011c2:	fbb1 fef8 	udiv	lr, r1, r8
 80011c6:	fb08 111e 	mls	r1, r8, lr, r1
 80011ca:	fb09 f00e 	mul.w	r0, r9, lr
 80011ce:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80011d2:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80011d6:	4298      	cmp	r0, r3
 80011d8:	d907      	bls.n	80011ea <__udivmoddi4+0x126>
 80011da:	18eb      	adds	r3, r5, r3
 80011dc:	f10e 31ff 	add.w	r1, lr, #4294967295
 80011e0:	d202      	bcs.n	80011e8 <__udivmoddi4+0x124>
 80011e2:	4298      	cmp	r0, r3
 80011e4:	f200 80cd 	bhi.w	8001382 <__udivmoddi4+0x2be>
 80011e8:	468e      	mov	lr, r1
 80011ea:	1a1b      	subs	r3, r3, r0
 80011ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80011f0:	fb08 3310 	mls	r3, r8, r0, r3
 80011f4:	fb09 f900 	mul.w	r9, r9, r0
 80011f8:	b2a4      	uxth	r4, r4
 80011fa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80011fe:	45a1      	cmp	r9, r4
 8001200:	d907      	bls.n	8001212 <__udivmoddi4+0x14e>
 8001202:	192c      	adds	r4, r5, r4
 8001204:	f100 33ff 	add.w	r3, r0, #4294967295
 8001208:	d202      	bcs.n	8001210 <__udivmoddi4+0x14c>
 800120a:	45a1      	cmp	r9, r4
 800120c:	f200 80b6 	bhi.w	800137c <__udivmoddi4+0x2b8>
 8001210:	4618      	mov	r0, r3
 8001212:	eba4 0409 	sub.w	r4, r4, r9
 8001216:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800121a:	e79e      	b.n	800115a <__udivmoddi4+0x96>
 800121c:	f1c7 0520 	rsb	r5, r7, #32
 8001220:	40bb      	lsls	r3, r7
 8001222:	fa22 fc05 	lsr.w	ip, r2, r5
 8001226:	ea4c 0c03 	orr.w	ip, ip, r3
 800122a:	fa21 f405 	lsr.w	r4, r1, r5
 800122e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001232:	fbb4 f9fe 	udiv	r9, r4, lr
 8001236:	fa1f f88c 	uxth.w	r8, ip
 800123a:	fb0e 4419 	mls	r4, lr, r9, r4
 800123e:	fa20 f305 	lsr.w	r3, r0, r5
 8001242:	40b9      	lsls	r1, r7
 8001244:	fb09 fa08 	mul.w	sl, r9, r8
 8001248:	4319      	orrs	r1, r3
 800124a:	0c0b      	lsrs	r3, r1, #16
 800124c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001250:	45a2      	cmp	sl, r4
 8001252:	fa02 f207 	lsl.w	r2, r2, r7
 8001256:	fa00 f307 	lsl.w	r3, r0, r7
 800125a:	d90b      	bls.n	8001274 <__udivmoddi4+0x1b0>
 800125c:	eb1c 0404 	adds.w	r4, ip, r4
 8001260:	f109 30ff 	add.w	r0, r9, #4294967295
 8001264:	f080 8088 	bcs.w	8001378 <__udivmoddi4+0x2b4>
 8001268:	45a2      	cmp	sl, r4
 800126a:	f240 8085 	bls.w	8001378 <__udivmoddi4+0x2b4>
 800126e:	f1a9 0902 	sub.w	r9, r9, #2
 8001272:	4464      	add	r4, ip
 8001274:	eba4 040a 	sub.w	r4, r4, sl
 8001278:	fbb4 f0fe 	udiv	r0, r4, lr
 800127c:	fb0e 4410 	mls	r4, lr, r0, r4
 8001280:	fb00 fa08 	mul.w	sl, r0, r8
 8001284:	b289      	uxth	r1, r1
 8001286:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800128a:	45a2      	cmp	sl, r4
 800128c:	d908      	bls.n	80012a0 <__udivmoddi4+0x1dc>
 800128e:	eb1c 0404 	adds.w	r4, ip, r4
 8001292:	f100 31ff 	add.w	r1, r0, #4294967295
 8001296:	d26b      	bcs.n	8001370 <__udivmoddi4+0x2ac>
 8001298:	45a2      	cmp	sl, r4
 800129a:	d969      	bls.n	8001370 <__udivmoddi4+0x2ac>
 800129c:	3802      	subs	r0, #2
 800129e:	4464      	add	r4, ip
 80012a0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80012a4:	fba0 8902 	umull	r8, r9, r0, r2
 80012a8:	eba4 040a 	sub.w	r4, r4, sl
 80012ac:	454c      	cmp	r4, r9
 80012ae:	4641      	mov	r1, r8
 80012b0:	46ce      	mov	lr, r9
 80012b2:	d354      	bcc.n	800135e <__udivmoddi4+0x29a>
 80012b4:	d051      	beq.n	800135a <__udivmoddi4+0x296>
 80012b6:	2e00      	cmp	r6, #0
 80012b8:	d069      	beq.n	800138e <__udivmoddi4+0x2ca>
 80012ba:	1a5a      	subs	r2, r3, r1
 80012bc:	eb64 040e 	sbc.w	r4, r4, lr
 80012c0:	fa04 f505 	lsl.w	r5, r4, r5
 80012c4:	fa22 f307 	lsr.w	r3, r2, r7
 80012c8:	40fc      	lsrs	r4, r7
 80012ca:	431d      	orrs	r5, r3
 80012cc:	e9c6 5400 	strd	r5, r4, [r6]
 80012d0:	2700      	movs	r7, #0
 80012d2:	e747      	b.n	8001164 <__udivmoddi4+0xa0>
 80012d4:	4095      	lsls	r5, r2
 80012d6:	f1c2 0320 	rsb	r3, r2, #32
 80012da:	fa21 f003 	lsr.w	r0, r1, r3
 80012de:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80012e2:	fbb0 f7f8 	udiv	r7, r0, r8
 80012e6:	fa1f f985 	uxth.w	r9, r5
 80012ea:	fb08 0017 	mls	r0, r8, r7, r0
 80012ee:	fa24 f303 	lsr.w	r3, r4, r3
 80012f2:	4091      	lsls	r1, r2
 80012f4:	fb07 fc09 	mul.w	ip, r7, r9
 80012f8:	430b      	orrs	r3, r1
 80012fa:	0c19      	lsrs	r1, r3, #16
 80012fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001300:	458c      	cmp	ip, r1
 8001302:	fa04 f402 	lsl.w	r4, r4, r2
 8001306:	d907      	bls.n	8001318 <__udivmoddi4+0x254>
 8001308:	1869      	adds	r1, r5, r1
 800130a:	f107 30ff 	add.w	r0, r7, #4294967295
 800130e:	d231      	bcs.n	8001374 <__udivmoddi4+0x2b0>
 8001310:	458c      	cmp	ip, r1
 8001312:	d92f      	bls.n	8001374 <__udivmoddi4+0x2b0>
 8001314:	3f02      	subs	r7, #2
 8001316:	4429      	add	r1, r5
 8001318:	eba1 010c 	sub.w	r1, r1, ip
 800131c:	fbb1 f0f8 	udiv	r0, r1, r8
 8001320:	fb08 1c10 	mls	ip, r8, r0, r1
 8001324:	fb00 fe09 	mul.w	lr, r0, r9
 8001328:	b299      	uxth	r1, r3
 800132a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800132e:	458e      	cmp	lr, r1
 8001330:	d907      	bls.n	8001342 <__udivmoddi4+0x27e>
 8001332:	1869      	adds	r1, r5, r1
 8001334:	f100 33ff 	add.w	r3, r0, #4294967295
 8001338:	d218      	bcs.n	800136c <__udivmoddi4+0x2a8>
 800133a:	458e      	cmp	lr, r1
 800133c:	d916      	bls.n	800136c <__udivmoddi4+0x2a8>
 800133e:	3802      	subs	r0, #2
 8001340:	4429      	add	r1, r5
 8001342:	eba1 010e 	sub.w	r1, r1, lr
 8001346:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800134a:	e73a      	b.n	80011c2 <__udivmoddi4+0xfe>
 800134c:	4637      	mov	r7, r6
 800134e:	4630      	mov	r0, r6
 8001350:	e708      	b.n	8001164 <__udivmoddi4+0xa0>
 8001352:	460f      	mov	r7, r1
 8001354:	e6e6      	b.n	8001124 <__udivmoddi4+0x60>
 8001356:	4618      	mov	r0, r3
 8001358:	e6fb      	b.n	8001152 <__udivmoddi4+0x8e>
 800135a:	4543      	cmp	r3, r8
 800135c:	d2ab      	bcs.n	80012b6 <__udivmoddi4+0x1f2>
 800135e:	ebb8 0102 	subs.w	r1, r8, r2
 8001362:	eb69 020c 	sbc.w	r2, r9, ip
 8001366:	3801      	subs	r0, #1
 8001368:	4696      	mov	lr, r2
 800136a:	e7a4      	b.n	80012b6 <__udivmoddi4+0x1f2>
 800136c:	4618      	mov	r0, r3
 800136e:	e7e8      	b.n	8001342 <__udivmoddi4+0x27e>
 8001370:	4608      	mov	r0, r1
 8001372:	e795      	b.n	80012a0 <__udivmoddi4+0x1dc>
 8001374:	4607      	mov	r7, r0
 8001376:	e7cf      	b.n	8001318 <__udivmoddi4+0x254>
 8001378:	4681      	mov	r9, r0
 800137a:	e77b      	b.n	8001274 <__udivmoddi4+0x1b0>
 800137c:	3802      	subs	r0, #2
 800137e:	442c      	add	r4, r5
 8001380:	e747      	b.n	8001212 <__udivmoddi4+0x14e>
 8001382:	f1ae 0e02 	sub.w	lr, lr, #2
 8001386:	442b      	add	r3, r5
 8001388:	e72f      	b.n	80011ea <__udivmoddi4+0x126>
 800138a:	4638      	mov	r0, r7
 800138c:	e707      	b.n	800119e <__udivmoddi4+0xda>
 800138e:	4637      	mov	r7, r6
 8001390:	e6e8      	b.n	8001164 <__udivmoddi4+0xa0>
 8001392:	bf00      	nop

08001394 <__aeabi_idiv0>:
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop

08001398 <hx711_delay_us>:
#else
#define hx711_delay(x)    HAL_Delay(x)
#endif

void hx711_delay_us(void)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
  uint32_t delay = _HX711_DELAY_US_LOOP;
 800139e:	2304      	movs	r3, #4
 80013a0:	607b      	str	r3, [r7, #4]
  while (delay > 0)
 80013a2:	e006      	b.n	80013b2 <hx711_delay_us+0x1a>
  {
    delay--;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	607b      	str	r3, [r7, #4]
    __nop(); __nop(); __nop(); __nop();
 80013aa:	bf00      	nop
 80013ac:	bf00      	nop
 80013ae:	bf00      	nop
 80013b0:	bf00      	nop
  while (delay > 0)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1f5      	bne.n	80013a4 <hx711_delay_us+0xc>
  }
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr

080013c2 <hx711_lock>:

void hx711_lock(hx711_t *hx711)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
  while (hx711->lock)
 80013ca:	e002      	b.n	80013d2 <hx711_lock+0x10>
    hx711_delay(1);
 80013cc:	2001      	movs	r0, #1
 80013ce:	f000 fd21 	bl	8001e14 <HAL_Delay>
  while (hx711->lock)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	7d1b      	ldrb	r3, [r3, #20]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1f8      	bne.n	80013cc <hx711_lock+0xa>
  hx711->lock = 1;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2201      	movs	r2, #1
 80013de:	751a      	strb	r2, [r3, #20]
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <hx711_unlock>:

void hx711_unlock(hx711_t *hx711)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  hx711->lock = 0;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	751a      	strb	r2, [r3, #20]
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr

08001400 <hx711_init>:

void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	4613      	mov	r3, r2
 800140e:	80fb      	strh	r3, [r7, #6]
  hx711_lock(hx711);
 8001410:	68f8      	ldr	r0, [r7, #12]
 8001412:	f7ff ffd6 	bl	80013c2 <hx711_lock>
  hx711->clk_gpio = clk_gpio;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	68ba      	ldr	r2, [r7, #8]
 800141a:	601a      	str	r2, [r3, #0]
  hx711->clk_pin = clk_pin;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	88fa      	ldrh	r2, [r7, #6]
 8001420:	811a      	strh	r2, [r3, #8]
  hx711->dat_gpio = dat_gpio;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	683a      	ldr	r2, [r7, #0]
 8001426:	605a      	str	r2, [r3, #4]
  hx711->dat_pin = dat_pin;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800142c:	815a      	strh	r2, [r3, #10]

  GPIO_InitTypeDef  gpio = {0};
 800142e:	f107 0310 	add.w	r3, r7, #16
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 800143c:	2301      	movs	r3, #1
 800143e:	617b      	str	r3, [r7, #20]
  gpio.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	61bb      	str	r3, [r7, #24]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8001444:	2303      	movs	r3, #3
 8001446:	61fb      	str	r3, [r7, #28]
  gpio.Pin = clk_pin;
 8001448:	88fb      	ldrh	r3, [r7, #6]
 800144a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(clk_gpio, &gpio);
 800144c:	f107 0310 	add.w	r3, r7, #16
 8001450:	4619      	mov	r1, r3
 8001452:	68b8      	ldr	r0, [r7, #8]
 8001454:	f000 fde4 	bl	8002020 <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
  gpio.Pull = GPIO_PULLUP;
 800145c:	2301      	movs	r3, #1
 800145e:	61bb      	str	r3, [r7, #24]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8001460:	2303      	movs	r3, #3
 8001462:	61fb      	str	r3, [r7, #28]
  gpio.Pin = dat_pin;
 8001464:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001466:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(dat_gpio, &gpio);
 8001468:	f107 0310 	add.w	r3, r7, #16
 800146c:	4619      	mov	r1, r3
 800146e:	6838      	ldr	r0, [r7, #0]
 8001470:	f000 fdd6 	bl	8002020 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	6818      	ldr	r0, [r3, #0]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	891b      	ldrh	r3, [r3, #8]
 800147c:	2201      	movs	r2, #1
 800147e:	4619      	mov	r1, r3
 8001480:	f000 ff3f 	bl	8002302 <HAL_GPIO_WritePin>
  hx711_delay(10);
 8001484:	200a      	movs	r0, #10
 8001486:	f000 fcc5 	bl	8001e14 <HAL_Delay>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	6818      	ldr	r0, [r3, #0]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	891b      	ldrh	r3, [r3, #8]
 8001492:	2200      	movs	r2, #0
 8001494:	4619      	mov	r1, r3
 8001496:	f000 ff34 	bl	8002302 <HAL_GPIO_WritePin>
  hx711_delay(10);
 800149a:	200a      	movs	r0, #10
 800149c:	f000 fcba 	bl	8001e14 <HAL_Delay>
  hx711_value(hx711);
 80014a0:	68f8      	ldr	r0, [r7, #12]
 80014a2:	f000 f80a 	bl	80014ba <hx711_value>
  hx711_value(hx711);
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	f000 f807 	bl	80014ba <hx711_value>
  hx711_unlock(hx711);
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	f7ff ff9b 	bl	80013e8 <hx711_unlock>
}
 80014b2:	bf00      	nop
 80014b4:	3720      	adds	r7, #32
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <hx711_value>:

int32_t hx711_value(hx711_t *hx711)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b086      	sub	sp, #24
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
  uint32_t data = 0;
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
  uint32_t  startTime = HAL_GetTick();
 80014c6:	f000 fc9b 	bl	8001e00 <HAL_GetTick>
 80014ca:	60f8      	str	r0, [r7, #12]
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 80014cc:	e00b      	b.n	80014e6 <hx711_value+0x2c>
  {
    hx711_delay(1);
 80014ce:	2001      	movs	r0, #1
 80014d0:	f000 fca0 	bl	8001e14 <HAL_Delay>
    if(HAL_GetTick() - startTime > 150)
 80014d4:	f000 fc94 	bl	8001e00 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b96      	cmp	r3, #150	; 0x96
 80014e0:	d901      	bls.n	80014e6 <hx711_value+0x2c>
      return 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	e055      	b.n	8001592 <hx711_value+0xd8>
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	895b      	ldrh	r3, [r3, #10]
 80014ee:	4619      	mov	r1, r3
 80014f0:	4610      	mov	r0, r2
 80014f2:	f000 feef 	bl	80022d4 <HAL_GPIO_ReadPin>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d0e8      	beq.n	80014ce <hx711_value+0x14>
  }
  for(int8_t i=0; i <24 ; i++)
 80014fc:	2300      	movs	r3, #0
 80014fe:	74fb      	strb	r3, [r7, #19]
 8001500:	e02a      	b.n	8001558 <hx711_value+0x9e>
  {
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6818      	ldr	r0, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	891b      	ldrh	r3, [r3, #8]
 800150a:	2201      	movs	r2, #1
 800150c:	4619      	mov	r1, r3
 800150e:	f000 fef8 	bl	8002302 <HAL_GPIO_WritePin>
    hx711_delay_us();
 8001512:	f7ff ff41 	bl	8001398 <hx711_delay_us>
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6818      	ldr	r0, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	891b      	ldrh	r3, [r3, #8]
 800151e:	2200      	movs	r2, #0
 8001520:	4619      	mov	r1, r3
 8001522:	f000 feee 	bl	8002302 <HAL_GPIO_WritePin>
    hx711_delay_us();
 8001526:	f7ff ff37 	bl	8001398 <hx711_delay_us>
    data = data << 1;
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	617b      	str	r3, [r7, #20]
    if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	895b      	ldrh	r3, [r3, #10]
 8001538:	4619      	mov	r1, r3
 800153a:	4610      	mov	r0, r2
 800153c:	f000 feca 	bl	80022d4 <HAL_GPIO_ReadPin>
 8001540:	4603      	mov	r3, r0
 8001542:	2b01      	cmp	r3, #1
 8001544:	d102      	bne.n	800154c <hx711_value+0x92>
      data ++;
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	3301      	adds	r3, #1
 800154a:	617b      	str	r3, [r7, #20]
  for(int8_t i=0; i <24 ; i++)
 800154c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001550:	b2db      	uxtb	r3, r3
 8001552:	3301      	adds	r3, #1
 8001554:	b2db      	uxtb	r3, r3
 8001556:	74fb      	strb	r3, [r7, #19]
 8001558:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800155c:	2b17      	cmp	r3, #23
 800155e:	ddd0      	ble.n	8001502 <hx711_value+0x48>
  }
  data = data ^ 0x800000;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8001566:	617b      	str	r3, [r7, #20]
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6818      	ldr	r0, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	891b      	ldrh	r3, [r3, #8]
 8001570:	2201      	movs	r2, #1
 8001572:	4619      	mov	r1, r3
 8001574:	f000 fec5 	bl	8002302 <HAL_GPIO_WritePin>
  hx711_delay_us();
 8001578:	f7ff ff0e 	bl	8001398 <hx711_delay_us>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6818      	ldr	r0, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	891b      	ldrh	r3, [r3, #8]
 8001584:	2200      	movs	r2, #0
 8001586:	4619      	mov	r1, r3
 8001588:	f000 febb 	bl	8002302 <HAL_GPIO_WritePin>
  hx711_delay_us();
 800158c:	f7ff ff04 	bl	8001398 <hx711_delay_us>
  return data;
 8001590:	697b      	ldr	r3, [r7, #20]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <hx711_value_ave>:

int32_t hx711_value_ave(hx711_t *hx711, uint16_t sample)
{
 800159a:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	460b      	mov	r3, r1
 80015a6:	807b      	strh	r3, [r7, #2]
  hx711_lock(hx711);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7ff ff0a 	bl	80013c2 <hx711_lock>
  int64_t  ave = 0;
 80015ae:	f04f 0300 	mov.w	r3, #0
 80015b2:	f04f 0400 	mov.w	r4, #0
 80015b6:	e9c7 3404 	strd	r3, r4, [r7, #16]
  for(uint16_t i=0 ; i<sample ; i++)
 80015ba:	2300      	movs	r3, #0
 80015bc:	81fb      	strh	r3, [r7, #14]
 80015be:	e014      	b.n	80015ea <hx711_value_ave+0x50>
  {
    ave += hx711_value(hx711);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff ff7a 	bl	80014ba <hx711_value>
 80015c6:	4603      	mov	r3, r0
 80015c8:	469b      	mov	fp, r3
 80015ca:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 80015ce:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80015d2:	eb1b 0301 	adds.w	r3, fp, r1
 80015d6:	eb4c 0402 	adc.w	r4, ip, r2
 80015da:	e9c7 3404 	strd	r3, r4, [r7, #16]
    hx711_delay(5);
 80015de:	2005      	movs	r0, #5
 80015e0:	f000 fc18 	bl	8001e14 <HAL_Delay>
  for(uint16_t i=0 ; i<sample ; i++)
 80015e4:	89fb      	ldrh	r3, [r7, #14]
 80015e6:	3301      	adds	r3, #1
 80015e8:	81fb      	strh	r3, [r7, #14]
 80015ea:	89fa      	ldrh	r2, [r7, #14]
 80015ec:	887b      	ldrh	r3, [r7, #2]
 80015ee:	429a      	cmp	r2, r3
 80015f0:	d3e6      	bcc.n	80015c0 <hx711_value_ave+0x26>
  }
  int32_t answer = (int32_t)(ave / sample);
 80015f2:	887b      	ldrh	r3, [r7, #2]
 80015f4:	f04f 0400 	mov.w	r4, #0
 80015f8:	461a      	mov	r2, r3
 80015fa:	4623      	mov	r3, r4
 80015fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001600:	f7ff fd10 	bl	8001024 <__aeabi_ldivmod>
 8001604:	4603      	mov	r3, r0
 8001606:	460c      	mov	r4, r1
 8001608:	60bb      	str	r3, [r7, #8]
  hx711_unlock(hx711);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff feec 	bl	80013e8 <hx711_unlock>
  return answer;
 8001610:	68bb      	ldr	r3, [r7, #8]
}
 8001612:	4618      	mov	r0, r3
 8001614:	3718      	adds	r7, #24
 8001616:	46bd      	mov	sp, r7
 8001618:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800161c <hx711_calibration>:
  hx711->offset = (int32_t)(ave / sample);
  hx711_unlock(hx711);
}

void hx711_calibration(hx711_t *hx711, int32_t noload_raw, int32_t load_raw, float scale)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
 8001628:	603b      	str	r3, [r7, #0]
  hx711_lock(hx711);
 800162a:	68f8      	ldr	r0, [r7, #12]
 800162c:	f7ff fec9 	bl	80013c2 <hx711_lock>
  hx711->offset = noload_raw;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	60da      	str	r2, [r3, #12]
  hx711->coef = (load_raw - noload_raw) / scale;
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff fb4d 	bl	8000cdc <__aeabi_i2f>
 8001642:	4603      	mov	r3, r0
 8001644:	6839      	ldr	r1, [r7, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fc50 	bl	8000eec <__aeabi_fdiv>
 800164c:	4603      	mov	r3, r0
 800164e:	461a      	mov	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	611a      	str	r2, [r3, #16]
  hx711_unlock(hx711);
 8001654:	68f8      	ldr	r0, [r7, #12]
 8001656:	f7ff fec7 	bl	80013e8 <hx711_unlock>
}
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <hx711_weight>:

float hx711_weight(hx711_t *hx711, uint16_t sample)
{
 8001662:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8001666:	b088      	sub	sp, #32
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	807b      	strh	r3, [r7, #2]
  hx711_lock(hx711);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff fea6 	bl	80013c2 <hx711_lock>
  int64_t  ave = 0;
 8001676:	f04f 0300 	mov.w	r3, #0
 800167a:	f04f 0400 	mov.w	r4, #0
 800167e:	e9c7 3406 	strd	r3, r4, [r7, #24]
  for(uint16_t i=0 ; i<sample ; i++)
 8001682:	2300      	movs	r3, #0
 8001684:	82fb      	strh	r3, [r7, #22]
 8001686:	e014      	b.n	80016b2 <hx711_weight+0x50>
  {
    ave += hx711_value(hx711);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff ff16 	bl	80014ba <hx711_value>
 800168e:	4603      	mov	r3, r0
 8001690:	469b      	mov	fp, r3
 8001692:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8001696:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800169a:	eb1b 0301 	adds.w	r3, fp, r1
 800169e:	eb4c 0402 	adc.w	r4, ip, r2
 80016a2:	e9c7 3406 	strd	r3, r4, [r7, #24]
    hx711_delay(2);
 80016a6:	2002      	movs	r0, #2
 80016a8:	f000 fbb4 	bl	8001e14 <HAL_Delay>
  for(uint16_t i=0 ; i<sample ; i++)
 80016ac:	8afb      	ldrh	r3, [r7, #22]
 80016ae:	3301      	adds	r3, #1
 80016b0:	82fb      	strh	r3, [r7, #22]
 80016b2:	8afa      	ldrh	r2, [r7, #22]
 80016b4:	887b      	ldrh	r3, [r7, #2]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d3e6      	bcc.n	8001688 <hx711_weight+0x26>
  }
  int32_t data = (int32_t)(ave / sample);
 80016ba:	887b      	ldrh	r3, [r7, #2]
 80016bc:	f04f 0400 	mov.w	r4, #0
 80016c0:	461a      	mov	r2, r3
 80016c2:	4623      	mov	r3, r4
 80016c4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016c8:	f7ff fcac 	bl	8001024 <__aeabi_ldivmod>
 80016cc:	4603      	mov	r3, r0
 80016ce:	460c      	mov	r4, r1
 80016d0:	613b      	str	r3, [r7, #16]
  float answer =  (data - hx711->offset) / hx711->coef;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff fafe 	bl	8000cdc <__aeabi_i2f>
 80016e0:	4602      	mov	r2, r0
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	4619      	mov	r1, r3
 80016e8:	4610      	mov	r0, r2
 80016ea:	f7ff fbff 	bl	8000eec <__aeabi_fdiv>
 80016ee:	4603      	mov	r3, r0
 80016f0:	60fb      	str	r3, [r7, #12]
  hx711_unlock(hx711);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7ff fe78 	bl	80013e8 <hx711_unlock>
  return answer;
 80016f8:	68fb      	ldr	r3, [r7, #12]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3720      	adds	r7, #32
 80016fe:	46bd      	mov	sp, r7
 8001700:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08001704 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af02      	add	r7, sp, #8
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	f023 030f 	bic.w	r3, r3, #15
 8001714:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	011b      	lsls	r3, r3, #4
 800171a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800171c:	7bfb      	ldrb	r3, [r7, #15]
 800171e:	f043 030c 	orr.w	r3, r3, #12
 8001722:	b2db      	uxtb	r3, r3
 8001724:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	f043 0308 	orr.w	r3, r3, #8
 800172c:	b2db      	uxtb	r3, r3
 800172e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001730:	7bbb      	ldrb	r3, [r7, #14]
 8001732:	f043 030c 	orr.w	r3, r3, #12
 8001736:	b2db      	uxtb	r3, r3
 8001738:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800173a:	7bbb      	ldrb	r3, [r7, #14]
 800173c:	f043 0308 	orr.w	r3, r3, #8
 8001740:	b2db      	uxtb	r3, r3
 8001742:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001744:	f107 0208 	add.w	r2, r7, #8
 8001748:	2364      	movs	r3, #100	; 0x64
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	2304      	movs	r3, #4
 800174e:	214e      	movs	r1, #78	; 0x4e
 8001750:	4803      	ldr	r0, [pc, #12]	; (8001760 <lcd_send_cmd+0x5c>)
 8001752:	f000 ff27 	bl	80025a4 <HAL_I2C_Master_Transmit>
}
 8001756:	bf00      	nop
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	2000020c 	.word	0x2000020c

08001764 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af02      	add	r7, sp, #8
 800176a:	4603      	mov	r3, r0
 800176c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	f023 030f 	bic.w	r3, r3, #15
 8001774:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	011b      	lsls	r3, r3, #4
 800177a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800177c:	7bfb      	ldrb	r3, [r7, #15]
 800177e:	f043 030d 	orr.w	r3, r3, #13
 8001782:	b2db      	uxtb	r3, r3
 8001784:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001786:	7bfb      	ldrb	r3, [r7, #15]
 8001788:	f043 0309 	orr.w	r3, r3, #9
 800178c:	b2db      	uxtb	r3, r3
 800178e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001790:	7bbb      	ldrb	r3, [r7, #14]
 8001792:	f043 030d 	orr.w	r3, r3, #13
 8001796:	b2db      	uxtb	r3, r3
 8001798:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800179a:	7bbb      	ldrb	r3, [r7, #14]
 800179c:	f043 0309 	orr.w	r3, r3, #9
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80017a4:	f107 0208 	add.w	r2, r7, #8
 80017a8:	2364      	movs	r3, #100	; 0x64
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	2304      	movs	r3, #4
 80017ae:	214e      	movs	r1, #78	; 0x4e
 80017b0:	4803      	ldr	r0, [pc, #12]	; (80017c0 <lcd_send_data+0x5c>)
 80017b2:	f000 fef7 	bl	80025a4 <HAL_I2C_Master_Transmit>
}
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	2000020c 	.word	0x2000020c

080017c4 <lcd_clear>:

void lcd_clear (void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80017ca:	2080      	movs	r0, #128	; 0x80
 80017cc:	f7ff ff9a 	bl	8001704 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80017d0:	2300      	movs	r3, #0
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	e005      	b.n	80017e2 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80017d6:	2020      	movs	r0, #32
 80017d8:	f7ff ffc4 	bl	8001764 <lcd_send_data>
	for (int i=0; i<70; i++)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3301      	adds	r3, #1
 80017e0:	607b      	str	r3, [r7, #4]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b45      	cmp	r3, #69	; 0x45
 80017e6:	ddf6      	ble.n	80017d6 <lcd_clear+0x12>
	}
}
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
    switch (row)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d002      	beq.n	8001806 <lcd_put_cur+0x16>
 8001800:	2b01      	cmp	r3, #1
 8001802:	d005      	beq.n	8001810 <lcd_put_cur+0x20>
 8001804:	e009      	b.n	800181a <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800180c:	603b      	str	r3, [r7, #0]
            break;
 800180e:	e004      	b.n	800181a <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001816:	603b      	str	r3, [r7, #0]
            break;
 8001818:	bf00      	nop
    }

    lcd_send_cmd (col);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	b2db      	uxtb	r3, r3
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff ff70 	bl	8001704 <lcd_send_cmd>
}
 8001824:	bf00      	nop
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <lcd_init>:


void lcd_init (void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001830:	2032      	movs	r0, #50	; 0x32
 8001832:	f000 faef 	bl	8001e14 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001836:	2030      	movs	r0, #48	; 0x30
 8001838:	f7ff ff64 	bl	8001704 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800183c:	2005      	movs	r0, #5
 800183e:	f000 fae9 	bl	8001e14 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001842:	2030      	movs	r0, #48	; 0x30
 8001844:	f7ff ff5e 	bl	8001704 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001848:	2001      	movs	r0, #1
 800184a:	f000 fae3 	bl	8001e14 <HAL_Delay>
	lcd_send_cmd (0x30);
 800184e:	2030      	movs	r0, #48	; 0x30
 8001850:	f7ff ff58 	bl	8001704 <lcd_send_cmd>
	HAL_Delay(10);
 8001854:	200a      	movs	r0, #10
 8001856:	f000 fadd 	bl	8001e14 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800185a:	2020      	movs	r0, #32
 800185c:	f7ff ff52 	bl	8001704 <lcd_send_cmd>
	HAL_Delay(10);
 8001860:	200a      	movs	r0, #10
 8001862:	f000 fad7 	bl	8001e14 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001866:	2028      	movs	r0, #40	; 0x28
 8001868:	f7ff ff4c 	bl	8001704 <lcd_send_cmd>
	HAL_Delay(1);
 800186c:	2001      	movs	r0, #1
 800186e:	f000 fad1 	bl	8001e14 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001872:	2008      	movs	r0, #8
 8001874:	f7ff ff46 	bl	8001704 <lcd_send_cmd>
	HAL_Delay(1);
 8001878:	2001      	movs	r0, #1
 800187a:	f000 facb 	bl	8001e14 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800187e:	2001      	movs	r0, #1
 8001880:	f7ff ff40 	bl	8001704 <lcd_send_cmd>
	HAL_Delay(1);
 8001884:	2001      	movs	r0, #1
 8001886:	f000 fac5 	bl	8001e14 <HAL_Delay>
	HAL_Delay(1);
 800188a:	2001      	movs	r0, #1
 800188c:	f000 fac2 	bl	8001e14 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001890:	2006      	movs	r0, #6
 8001892:	f7ff ff37 	bl	8001704 <lcd_send_cmd>
	HAL_Delay(1);
 8001896:	2001      	movs	r0, #1
 8001898:	f000 fabc 	bl	8001e14 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800189c:	200c      	movs	r0, #12
 800189e:	f7ff ff31 	bl	8001704 <lcd_send_cmd>
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80018ae:	e006      	b.n	80018be <lcd_send_string+0x18>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	1c5a      	adds	r2, r3, #1
 80018b4:	607a      	str	r2, [r7, #4]
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff ff53 	bl	8001764 <lcd_send_data>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f4      	bne.n	80018b0 <lcd_send_string+0xa>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018d0:	b590      	push	{r4, r7, lr}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018d6:	f000 fa3b 	bl	8001d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018da:	f000 f865 	bl	80019a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018de:	f000 f8d7 	bl	8001a90 <MX_GPIO_Init>
  MX_I2C1_Init();
 80018e2:	f000 f8a7 	bl	8001a34 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80018e6:	f7ff ffa1 	bl	800182c <lcd_init>
  lcd_clear();
 80018ea:	f7ff ff6b 	bl	80017c4 <lcd_clear>
  lcd_put_cur(0, 3);
 80018ee:	2103      	movs	r1, #3
 80018f0:	2000      	movs	r0, #0
 80018f2:	f7ff ff7d 	bl	80017f0 <lcd_put_cur>
  lcd_send_string("MINI SCALE");
 80018f6:	4821      	ldr	r0, [pc, #132]	; (800197c <main+0xac>)
 80018f8:	f7ff ffd5 	bl	80018a6 <lcd_send_string>
  hx711_init(&loadcell, HX711_CK_GPIO_Port, HX711_CK_Pin, HX711_DATA_GPIO_Port, HX711_DATA_Pin);
 80018fc:	2302      	movs	r3, #2
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	4b1f      	ldr	r3, [pc, #124]	; (8001980 <main+0xb0>)
 8001902:	2201      	movs	r2, #1
 8001904:	491e      	ldr	r1, [pc, #120]	; (8001980 <main+0xb0>)
 8001906:	481f      	ldr	r0, [pc, #124]	; (8001984 <main+0xb4>)
 8001908:	f7ff fd7a 	bl	8001400 <hx711_init>
  hx711_calibration(&loadcell, 7997114, 7994042, 24);
 800190c:	4b1e      	ldr	r3, [pc, #120]	; (8001988 <main+0xb8>)
 800190e:	4a1f      	ldr	r2, [pc, #124]	; (800198c <main+0xbc>)
 8001910:	491f      	ldr	r1, [pc, #124]	; (8001990 <main+0xc0>)
 8001912:	481c      	ldr	r0, [pc, #112]	; (8001984 <main+0xb4>)
 8001914:	f7ff fe82 	bl	800161c <hx711_calibration>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(100);
 8001918:	2064      	movs	r0, #100	; 0x64
 800191a:	f000 fa7b 	bl	8001e14 <HAL_Delay>
	  weight = hx711_weight(&loadcell, 5);
 800191e:	2105      	movs	r1, #5
 8001920:	4818      	ldr	r0, [pc, #96]	; (8001984 <main+0xb4>)
 8001922:	f7ff fe9e 	bl	8001662 <hx711_weight>
 8001926:	4602      	mov	r2, r0
 8001928:	4b1a      	ldr	r3, [pc, #104]	; (8001994 <main+0xc4>)
 800192a:	601a      	str	r2, [r3, #0]
	  sprintf(str, "%.2f", weight);
 800192c:	4b19      	ldr	r3, [pc, #100]	; (8001994 <main+0xc4>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f7fe fd79 	bl	8000428 <__aeabi_f2d>
 8001936:	4603      	mov	r3, r0
 8001938:	460c      	mov	r4, r1
 800193a:	461a      	mov	r2, r3
 800193c:	4623      	mov	r3, r4
 800193e:	4916      	ldr	r1, [pc, #88]	; (8001998 <main+0xc8>)
 8001940:	4816      	ldr	r0, [pc, #88]	; (800199c <main+0xcc>)
 8001942:	f002 fbe7 	bl	8004114 <siprintf>
	  lcd_put_cur(1, 1);
 8001946:	2101      	movs	r1, #1
 8001948:	2001      	movs	r0, #1
 800194a:	f7ff ff51 	bl	80017f0 <lcd_put_cur>
	  lcd_send_string(str);
 800194e:	4813      	ldr	r0, [pc, #76]	; (800199c <main+0xcc>)
 8001950:	f7ff ffa9 	bl	80018a6 <lcd_send_string>
	  lcd_put_cur(1, 10);
 8001954:	210a      	movs	r1, #10
 8001956:	2001      	movs	r0, #1
 8001958:	f7ff ff4a 	bl	80017f0 <lcd_put_cur>
	  lcd_send_string("GRAM");
 800195c:	4810      	ldr	r0, [pc, #64]	; (80019a0 <main+0xd0>)
 800195e:	f7ff ffa2 	bl	80018a6 <lcd_send_string>
	  raw = hx711_value_ave(&loadcell, 5);
 8001962:	2105      	movs	r1, #5
 8001964:	4807      	ldr	r0, [pc, #28]	; (8001984 <main+0xb4>)
 8001966:	f7ff fe18 	bl	800159a <hx711_value_ave>
 800196a:	4603      	mov	r3, r0
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff f9b5 	bl	8000cdc <__aeabi_i2f>
 8001972:	4602      	mov	r2, r0
 8001974:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <main+0xd4>)
 8001976:	601a      	str	r2, [r3, #0]
	  HAL_Delay(100);
 8001978:	e7ce      	b.n	8001918 <main+0x48>
 800197a:	bf00      	nop
 800197c:	08006f40 	.word	0x08006f40
 8001980:	40010800 	.word	0x40010800
 8001984:	20000260 	.word	0x20000260
 8001988:	41c00000 	.word	0x41c00000
 800198c:	0079faba 	.word	0x0079faba
 8001990:	007a06ba 	.word	0x007a06ba
 8001994:	200001f8 	.word	0x200001f8
 8001998:	08006f4c 	.word	0x08006f4c
 800199c:	20000278 	.word	0x20000278
 80019a0:	08006f54 	.word	0x08006f54
 80019a4:	200001fc 	.word	0x200001fc

080019a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b090      	sub	sp, #64	; 0x40
 80019ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ae:	f107 0318 	add.w	r3, r7, #24
 80019b2:	2228      	movs	r2, #40	; 0x28
 80019b4:	2100      	movs	r1, #0
 80019b6:	4618      	mov	r0, r3
 80019b8:	f001 fd70 	bl	800349c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019bc:	1d3b      	adds	r3, r7, #4
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	60da      	str	r2, [r3, #12]
 80019c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019ca:	2301      	movs	r3, #1
 80019cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80019d4:	2300      	movs	r3, #0
 80019d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019d8:	2301      	movs	r3, #1
 80019da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019dc:	2302      	movs	r3, #2
 80019de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019e6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80019ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ec:	f107 0318 	add.w	r3, r7, #24
 80019f0:	4618      	mov	r0, r3
 80019f2:	f001 f92f 	bl	8002c54 <HAL_RCC_OscConfig>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80019fc:	f000 f8aa 	bl	8001b54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a00:	230f      	movs	r3, #15
 8001a02:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a04:	2302      	movs	r3, #2
 8001a06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	2102      	movs	r1, #2
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f001 fb9a 	bl	8003154 <HAL_RCC_ClockConfig>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001a26:	f000 f895 	bl	8001b54 <Error_Handler>
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	3740      	adds	r7, #64	; 0x40
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a3a:	4a13      	ldr	r2, [pc, #76]	; (8001a88 <MX_I2C1_Init+0x54>)
 8001a3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a3e:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a40:	4a12      	ldr	r2, [pc, #72]	; (8001a8c <MX_I2C1_Init+0x58>)
 8001a42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a44:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a50:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a58:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a5e:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a64:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a6a:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a70:	4804      	ldr	r0, [pc, #16]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a72:	f000 fc5f 	bl	8002334 <HAL_I2C_Init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a7c:	f000 f86a 	bl	8001b54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	2000020c 	.word	0x2000020c
 8001a88:	40005400 	.word	0x40005400
 8001a8c:	000186a0 	.word	0x000186a0

08001a90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b088      	sub	sp, #32
 8001a94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a96:	f107 0310 	add.w	r3, r7, #16
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aa4:	4b29      	ldr	r3, [pc, #164]	; (8001b4c <MX_GPIO_Init+0xbc>)
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	4a28      	ldr	r2, [pc, #160]	; (8001b4c <MX_GPIO_Init+0xbc>)
 8001aaa:	f043 0320 	orr.w	r3, r3, #32
 8001aae:	6193      	str	r3, [r2, #24]
 8001ab0:	4b26      	ldr	r3, [pc, #152]	; (8001b4c <MX_GPIO_Init+0xbc>)
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	f003 0320 	and.w	r3, r3, #32
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001abc:	4b23      	ldr	r3, [pc, #140]	; (8001b4c <MX_GPIO_Init+0xbc>)
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	4a22      	ldr	r2, [pc, #136]	; (8001b4c <MX_GPIO_Init+0xbc>)
 8001ac2:	f043 0304 	orr.w	r3, r3, #4
 8001ac6:	6193      	str	r3, [r2, #24]
 8001ac8:	4b20      	ldr	r3, [pc, #128]	; (8001b4c <MX_GPIO_Init+0xbc>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad4:	4b1d      	ldr	r3, [pc, #116]	; (8001b4c <MX_GPIO_Init+0xbc>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	4a1c      	ldr	r2, [pc, #112]	; (8001b4c <MX_GPIO_Init+0xbc>)
 8001ada:	f043 0308 	orr.w	r3, r3, #8
 8001ade:	6193      	str	r3, [r2, #24]
 8001ae0:	4b1a      	ldr	r3, [pc, #104]	; (8001b4c <MX_GPIO_Init+0xbc>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	f003 0308 	and.w	r3, r3, #8
 8001ae8:	607b      	str	r3, [r7, #4]
 8001aea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HX711_CK_GPIO_Port, HX711_CK_Pin, GPIO_PIN_RESET);
 8001aec:	2200      	movs	r2, #0
 8001aee:	2101      	movs	r1, #1
 8001af0:	4817      	ldr	r0, [pc, #92]	; (8001b50 <MX_GPIO_Init+0xc0>)
 8001af2:	f000 fc06 	bl	8002302 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : HX711_CK_Pin */
  GPIO_InitStruct.Pin = HX711_CK_Pin;
 8001af6:	2301      	movs	r3, #1
 8001af8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afa:	2301      	movs	r3, #1
 8001afc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b02:	2302      	movs	r3, #2
 8001b04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(HX711_CK_GPIO_Port, &GPIO_InitStruct);
 8001b06:	f107 0310 	add.w	r3, r7, #16
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4810      	ldr	r0, [pc, #64]	; (8001b50 <MX_GPIO_Init+0xc0>)
 8001b0e:	f000 fa87 	bl	8002020 <HAL_GPIO_Init>

  /*Configure GPIO pin : HX711_DATA_Pin */
  GPIO_InitStruct.Pin = HX711_DATA_Pin;
 8001b12:	2302      	movs	r3, #2
 8001b14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HX711_DATA_GPIO_Port, &GPIO_InitStruct);
 8001b1e:	f107 0310 	add.w	r3, r7, #16
 8001b22:	4619      	mov	r1, r3
 8001b24:	480a      	ldr	r0, [pc, #40]	; (8001b50 <MX_GPIO_Init+0xc0>)
 8001b26:	f000 fa7b 	bl	8002020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b2a:	230c      	movs	r3, #12
 8001b2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b32:	2301      	movs	r3, #1
 8001b34:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b36:	f107 0310 	add.w	r3, r7, #16
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4804      	ldr	r0, [pc, #16]	; (8001b50 <MX_GPIO_Init+0xc0>)
 8001b3e:	f000 fa6f 	bl	8002020 <HAL_GPIO_Init>

}
 8001b42:	bf00      	nop
 8001b44:	3720      	adds	r7, #32
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40010800 	.word	0x40010800

08001b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b58:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b5a:	e7fe      	b.n	8001b5a <Error_Handler+0x6>

08001b5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b62:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <HAL_MspInit+0x5c>)
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	4a14      	ldr	r2, [pc, #80]	; (8001bb8 <HAL_MspInit+0x5c>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	6193      	str	r3, [r2, #24]
 8001b6e:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <HAL_MspInit+0x5c>)
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b7a:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <HAL_MspInit+0x5c>)
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	4a0e      	ldr	r2, [pc, #56]	; (8001bb8 <HAL_MspInit+0x5c>)
 8001b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b84:	61d3      	str	r3, [r2, #28]
 8001b86:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <HAL_MspInit+0x5c>)
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8e:	607b      	str	r3, [r7, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b92:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <HAL_MspInit+0x60>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	4a04      	ldr	r2, [pc, #16]	; (8001bbc <HAL_MspInit+0x60>)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	3714      	adds	r7, #20
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40010000 	.word	0x40010000

08001bc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b088      	sub	sp, #32
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 0310 	add.w	r3, r7, #16
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a15      	ldr	r2, [pc, #84]	; (8001c30 <HAL_I2C_MspInit+0x70>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d123      	bne.n	8001c28 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be0:	4b14      	ldr	r3, [pc, #80]	; (8001c34 <HAL_I2C_MspInit+0x74>)
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	4a13      	ldr	r2, [pc, #76]	; (8001c34 <HAL_I2C_MspInit+0x74>)
 8001be6:	f043 0308 	orr.w	r3, r3, #8
 8001bea:	6193      	str	r3, [r2, #24]
 8001bec:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <HAL_I2C_MspInit+0x74>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	f003 0308 	and.w	r3, r3, #8
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bf8:	23c0      	movs	r3, #192	; 0xc0
 8001bfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bfc:	2312      	movs	r3, #18
 8001bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c00:	2303      	movs	r3, #3
 8001c02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c04:	f107 0310 	add.w	r3, r7, #16
 8001c08:	4619      	mov	r1, r3
 8001c0a:	480b      	ldr	r0, [pc, #44]	; (8001c38 <HAL_I2C_MspInit+0x78>)
 8001c0c:	f000 fa08 	bl	8002020 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c10:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <HAL_I2C_MspInit+0x74>)
 8001c12:	69db      	ldr	r3, [r3, #28]
 8001c14:	4a07      	ldr	r2, [pc, #28]	; (8001c34 <HAL_I2C_MspInit+0x74>)
 8001c16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c1a:	61d3      	str	r3, [r2, #28]
 8001c1c:	4b05      	ldr	r3, [pc, #20]	; (8001c34 <HAL_I2C_MspInit+0x74>)
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c24:	60bb      	str	r3, [r7, #8]
 8001c26:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c28:	bf00      	nop
 8001c2a:	3720      	adds	r7, #32
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40005400 	.word	0x40005400
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40010c00 	.word	0x40010c00

08001c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c40:	e7fe      	b.n	8001c40 <NMI_Handler+0x4>

08001c42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c46:	e7fe      	b.n	8001c46 <HardFault_Handler+0x4>

08001c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c4c:	e7fe      	b.n	8001c4c <MemManage_Handler+0x4>

08001c4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c52:	e7fe      	b.n	8001c52 <BusFault_Handler+0x4>

08001c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c58:	e7fe      	b.n	8001c58 <UsageFault_Handler+0x4>

08001c5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr

08001c66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr

08001c72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr

08001c7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c82:	f000 f8ab 	bl	8001ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c94:	4a14      	ldr	r2, [pc, #80]	; (8001ce8 <_sbrk+0x5c>)
 8001c96:	4b15      	ldr	r3, [pc, #84]	; (8001cec <_sbrk+0x60>)
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ca0:	4b13      	ldr	r3, [pc, #76]	; (8001cf0 <_sbrk+0x64>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d102      	bne.n	8001cae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ca8:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <_sbrk+0x64>)
 8001caa:	4a12      	ldr	r2, [pc, #72]	; (8001cf4 <_sbrk+0x68>)
 8001cac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cae:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <_sbrk+0x64>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d207      	bcs.n	8001ccc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cbc:	f001 fbc4 	bl	8003448 <__errno>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	230c      	movs	r3, #12
 8001cc4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cca:	e009      	b.n	8001ce0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ccc:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <_sbrk+0x64>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cd2:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <_sbrk+0x64>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4413      	add	r3, r2
 8001cda:	4a05      	ldr	r2, [pc, #20]	; (8001cf0 <_sbrk+0x64>)
 8001cdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cde:	68fb      	ldr	r3, [r7, #12]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3718      	adds	r7, #24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	20005000 	.word	0x20005000
 8001cec:	00000400 	.word	0x00000400
 8001cf0:	20000200 	.word	0x20000200
 8001cf4:	20000288 	.word	0x20000288

08001cf8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr

08001d04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d04:	f7ff fff8 	bl	8001cf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d08:	480b      	ldr	r0, [pc, #44]	; (8001d38 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d0a:	490c      	ldr	r1, [pc, #48]	; (8001d3c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d0c:	4a0c      	ldr	r2, [pc, #48]	; (8001d40 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d10:	e002      	b.n	8001d18 <LoopCopyDataInit>

08001d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d16:	3304      	adds	r3, #4

08001d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d1c:	d3f9      	bcc.n	8001d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d1e:	4a09      	ldr	r2, [pc, #36]	; (8001d44 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d20:	4c09      	ldr	r4, [pc, #36]	; (8001d48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d24:	e001      	b.n	8001d2a <LoopFillZerobss>

08001d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d28:	3204      	adds	r2, #4

08001d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d2c:	d3fb      	bcc.n	8001d26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d2e:	f001 fb91 	bl	8003454 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d32:	f7ff fdcd 	bl	80018d0 <main>
  bx lr
 8001d36:	4770      	bx	lr
  ldr r0, =_sdata
 8001d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d3c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001d40:	08007248 	.word	0x08007248
  ldr r2, =_sbss
 8001d44:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001d48:	20000288 	.word	0x20000288

08001d4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d4c:	e7fe      	b.n	8001d4c <ADC1_2_IRQHandler>
	...

08001d50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d54:	4b08      	ldr	r3, [pc, #32]	; (8001d78 <HAL_Init+0x28>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a07      	ldr	r2, [pc, #28]	; (8001d78 <HAL_Init+0x28>)
 8001d5a:	f043 0310 	orr.w	r3, r3, #16
 8001d5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d60:	2003      	movs	r0, #3
 8001d62:	f000 f929 	bl	8001fb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d66:	200f      	movs	r0, #15
 8001d68:	f000 f808 	bl	8001d7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d6c:	f7ff fef6 	bl	8001b5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40022000 	.word	0x40022000

08001d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d84:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <HAL_InitTick+0x54>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4b12      	ldr	r3, [pc, #72]	; (8001dd4 <HAL_InitTick+0x58>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f000 f933 	bl	8002006 <HAL_SYSTICK_Config>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e00e      	b.n	8001dc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b0f      	cmp	r3, #15
 8001dae:	d80a      	bhi.n	8001dc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db0:	2200      	movs	r2, #0
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	f04f 30ff 	mov.w	r0, #4294967295
 8001db8:	f000 f909 	bl	8001fce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dbc:	4a06      	ldr	r2, [pc, #24]	; (8001dd8 <HAL_InitTick+0x5c>)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	e000      	b.n	8001dc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20000000 	.word	0x20000000
 8001dd4:	20000008 	.word	0x20000008
 8001dd8:	20000004 	.word	0x20000004

08001ddc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001de0:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <HAL_IncTick+0x1c>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	461a      	mov	r2, r3
 8001de6:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <HAL_IncTick+0x20>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4413      	add	r3, r2
 8001dec:	4a03      	ldr	r2, [pc, #12]	; (8001dfc <HAL_IncTick+0x20>)
 8001dee:	6013      	str	r3, [r2, #0]
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr
 8001df8:	20000008 	.word	0x20000008
 8001dfc:	20000280 	.word	0x20000280

08001e00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  return uwTick;
 8001e04:	4b02      	ldr	r3, [pc, #8]	; (8001e10 <HAL_GetTick+0x10>)
 8001e06:	681b      	ldr	r3, [r3, #0]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr
 8001e10:	20000280 	.word	0x20000280

08001e14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e1c:	f7ff fff0 	bl	8001e00 <HAL_GetTick>
 8001e20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e2c:	d005      	beq.n	8001e3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e2e:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <HAL_Delay+0x40>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	461a      	mov	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4413      	add	r3, r2
 8001e38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e3a:	bf00      	nop
 8001e3c:	f7ff ffe0 	bl	8001e00 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d8f7      	bhi.n	8001e3c <HAL_Delay+0x28>
  {
  }
}
 8001e4c:	bf00      	nop
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20000008 	.word	0x20000008

08001e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <__NVIC_SetPriorityGrouping+0x44>)
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e6e:	68ba      	ldr	r2, [r7, #8]
 8001e70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e74:	4013      	ands	r3, r2
 8001e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e8a:	4a04      	ldr	r2, [pc, #16]	; (8001e9c <__NVIC_SetPriorityGrouping+0x44>)
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	60d3      	str	r3, [r2, #12]
}
 8001e90:	bf00      	nop
 8001e92:	3714      	adds	r7, #20
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc80      	pop	{r7}
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ea4:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	0a1b      	lsrs	r3, r3, #8
 8001eaa:	f003 0307 	and.w	r3, r3, #7
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc80      	pop	{r7}
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	6039      	str	r1, [r7, #0]
 8001ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	db0a      	blt.n	8001ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	490c      	ldr	r1, [pc, #48]	; (8001f08 <__NVIC_SetPriority+0x4c>)
 8001ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eda:	0112      	lsls	r2, r2, #4
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	440b      	add	r3, r1
 8001ee0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ee4:	e00a      	b.n	8001efc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	4908      	ldr	r1, [pc, #32]	; (8001f0c <__NVIC_SetPriority+0x50>)
 8001eec:	79fb      	ldrb	r3, [r7, #7]
 8001eee:	f003 030f 	and.w	r3, r3, #15
 8001ef2:	3b04      	subs	r3, #4
 8001ef4:	0112      	lsls	r2, r2, #4
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	440b      	add	r3, r1
 8001efa:	761a      	strb	r2, [r3, #24]
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	e000e100 	.word	0xe000e100
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b089      	sub	sp, #36	; 0x24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f1c3 0307 	rsb	r3, r3, #7
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	bf28      	it	cs
 8001f2e:	2304      	movcs	r3, #4
 8001f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	3304      	adds	r3, #4
 8001f36:	2b06      	cmp	r3, #6
 8001f38:	d902      	bls.n	8001f40 <NVIC_EncodePriority+0x30>
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	3b03      	subs	r3, #3
 8001f3e:	e000      	b.n	8001f42 <NVIC_EncodePriority+0x32>
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f44:	f04f 32ff 	mov.w	r2, #4294967295
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43da      	mvns	r2, r3
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	401a      	ands	r2, r3
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f58:	f04f 31ff 	mov.w	r1, #4294967295
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f62:	43d9      	mvns	r1, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f68:	4313      	orrs	r3, r2
         );
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3724      	adds	r7, #36	; 0x24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr

08001f74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f84:	d301      	bcc.n	8001f8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f86:	2301      	movs	r3, #1
 8001f88:	e00f      	b.n	8001faa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f8a:	4a0a      	ldr	r2, [pc, #40]	; (8001fb4 <SysTick_Config+0x40>)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f92:	210f      	movs	r1, #15
 8001f94:	f04f 30ff 	mov.w	r0, #4294967295
 8001f98:	f7ff ff90 	bl	8001ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f9c:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <SysTick_Config+0x40>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fa2:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <SysTick_Config+0x40>)
 8001fa4:	2207      	movs	r2, #7
 8001fa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	e000e010 	.word	0xe000e010

08001fb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7ff ff49 	bl	8001e58 <__NVIC_SetPriorityGrouping>
}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b086      	sub	sp, #24
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	60b9      	str	r1, [r7, #8]
 8001fd8:	607a      	str	r2, [r7, #4]
 8001fda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fe0:	f7ff ff5e 	bl	8001ea0 <__NVIC_GetPriorityGrouping>
 8001fe4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	68b9      	ldr	r1, [r7, #8]
 8001fea:	6978      	ldr	r0, [r7, #20]
 8001fec:	f7ff ff90 	bl	8001f10 <NVIC_EncodePriority>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff ff5f 	bl	8001ebc <__NVIC_SetPriority>
}
 8001ffe:	bf00      	nop
 8002000:	3718      	adds	r7, #24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b082      	sub	sp, #8
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff ffb0 	bl	8001f74 <SysTick_Config>
 8002014:	4603      	mov	r3, r0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
	...

08002020 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002020:	b480      	push	{r7}
 8002022:	b08b      	sub	sp, #44	; 0x2c
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800202a:	2300      	movs	r3, #0
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800202e:	2300      	movs	r3, #0
 8002030:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002032:	e127      	b.n	8002284 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002034:	2201      	movs	r2, #1
 8002036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	69fa      	ldr	r2, [r7, #28]
 8002044:	4013      	ands	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	429a      	cmp	r2, r3
 800204e:	f040 8116 	bne.w	800227e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b12      	cmp	r3, #18
 8002058:	d034      	beq.n	80020c4 <HAL_GPIO_Init+0xa4>
 800205a:	2b12      	cmp	r3, #18
 800205c:	d80d      	bhi.n	800207a <HAL_GPIO_Init+0x5a>
 800205e:	2b02      	cmp	r3, #2
 8002060:	d02b      	beq.n	80020ba <HAL_GPIO_Init+0x9a>
 8002062:	2b02      	cmp	r3, #2
 8002064:	d804      	bhi.n	8002070 <HAL_GPIO_Init+0x50>
 8002066:	2b00      	cmp	r3, #0
 8002068:	d031      	beq.n	80020ce <HAL_GPIO_Init+0xae>
 800206a:	2b01      	cmp	r3, #1
 800206c:	d01c      	beq.n	80020a8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800206e:	e048      	b.n	8002102 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002070:	2b03      	cmp	r3, #3
 8002072:	d043      	beq.n	80020fc <HAL_GPIO_Init+0xdc>
 8002074:	2b11      	cmp	r3, #17
 8002076:	d01b      	beq.n	80020b0 <HAL_GPIO_Init+0x90>
          break;
 8002078:	e043      	b.n	8002102 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800207a:	4a89      	ldr	r2, [pc, #548]	; (80022a0 <HAL_GPIO_Init+0x280>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d026      	beq.n	80020ce <HAL_GPIO_Init+0xae>
 8002080:	4a87      	ldr	r2, [pc, #540]	; (80022a0 <HAL_GPIO_Init+0x280>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d806      	bhi.n	8002094 <HAL_GPIO_Init+0x74>
 8002086:	4a87      	ldr	r2, [pc, #540]	; (80022a4 <HAL_GPIO_Init+0x284>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d020      	beq.n	80020ce <HAL_GPIO_Init+0xae>
 800208c:	4a86      	ldr	r2, [pc, #536]	; (80022a8 <HAL_GPIO_Init+0x288>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d01d      	beq.n	80020ce <HAL_GPIO_Init+0xae>
          break;
 8002092:	e036      	b.n	8002102 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002094:	4a85      	ldr	r2, [pc, #532]	; (80022ac <HAL_GPIO_Init+0x28c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d019      	beq.n	80020ce <HAL_GPIO_Init+0xae>
 800209a:	4a85      	ldr	r2, [pc, #532]	; (80022b0 <HAL_GPIO_Init+0x290>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d016      	beq.n	80020ce <HAL_GPIO_Init+0xae>
 80020a0:	4a84      	ldr	r2, [pc, #528]	; (80022b4 <HAL_GPIO_Init+0x294>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d013      	beq.n	80020ce <HAL_GPIO_Init+0xae>
          break;
 80020a6:	e02c      	b.n	8002102 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	623b      	str	r3, [r7, #32]
          break;
 80020ae:	e028      	b.n	8002102 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	3304      	adds	r3, #4
 80020b6:	623b      	str	r3, [r7, #32]
          break;
 80020b8:	e023      	b.n	8002102 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	3308      	adds	r3, #8
 80020c0:	623b      	str	r3, [r7, #32]
          break;
 80020c2:	e01e      	b.n	8002102 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	330c      	adds	r3, #12
 80020ca:	623b      	str	r3, [r7, #32]
          break;
 80020cc:	e019      	b.n	8002102 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d102      	bne.n	80020dc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020d6:	2304      	movs	r3, #4
 80020d8:	623b      	str	r3, [r7, #32]
          break;
 80020da:	e012      	b.n	8002102 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d105      	bne.n	80020f0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020e4:	2308      	movs	r3, #8
 80020e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	69fa      	ldr	r2, [r7, #28]
 80020ec:	611a      	str	r2, [r3, #16]
          break;
 80020ee:	e008      	b.n	8002102 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020f0:	2308      	movs	r3, #8
 80020f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	69fa      	ldr	r2, [r7, #28]
 80020f8:	615a      	str	r2, [r3, #20]
          break;
 80020fa:	e002      	b.n	8002102 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020fc:	2300      	movs	r3, #0
 80020fe:	623b      	str	r3, [r7, #32]
          break;
 8002100:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	2bff      	cmp	r3, #255	; 0xff
 8002106:	d801      	bhi.n	800210c <HAL_GPIO_Init+0xec>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	e001      	b.n	8002110 <HAL_GPIO_Init+0xf0>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3304      	adds	r3, #4
 8002110:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	2bff      	cmp	r3, #255	; 0xff
 8002116:	d802      	bhi.n	800211e <HAL_GPIO_Init+0xfe>
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	e002      	b.n	8002124 <HAL_GPIO_Init+0x104>
 800211e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002120:	3b08      	subs	r3, #8
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	210f      	movs	r1, #15
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	fa01 f303 	lsl.w	r3, r1, r3
 8002132:	43db      	mvns	r3, r3
 8002134:	401a      	ands	r2, r3
 8002136:	6a39      	ldr	r1, [r7, #32]
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	fa01 f303 	lsl.w	r3, r1, r3
 800213e:	431a      	orrs	r2, r3
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 8096 	beq.w	800227e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002152:	4b59      	ldr	r3, [pc, #356]	; (80022b8 <HAL_GPIO_Init+0x298>)
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	4a58      	ldr	r2, [pc, #352]	; (80022b8 <HAL_GPIO_Init+0x298>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	6193      	str	r3, [r2, #24]
 800215e:	4b56      	ldr	r3, [pc, #344]	; (80022b8 <HAL_GPIO_Init+0x298>)
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	60bb      	str	r3, [r7, #8]
 8002168:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800216a:	4a54      	ldr	r2, [pc, #336]	; (80022bc <HAL_GPIO_Init+0x29c>)
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	089b      	lsrs	r3, r3, #2
 8002170:	3302      	adds	r3, #2
 8002172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002176:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	f003 0303 	and.w	r3, r3, #3
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	220f      	movs	r2, #15
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	43db      	mvns	r3, r3
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	4013      	ands	r3, r2
 800218c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a4b      	ldr	r2, [pc, #300]	; (80022c0 <HAL_GPIO_Init+0x2a0>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d013      	beq.n	80021be <HAL_GPIO_Init+0x19e>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a4a      	ldr	r2, [pc, #296]	; (80022c4 <HAL_GPIO_Init+0x2a4>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d00d      	beq.n	80021ba <HAL_GPIO_Init+0x19a>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a49      	ldr	r2, [pc, #292]	; (80022c8 <HAL_GPIO_Init+0x2a8>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d007      	beq.n	80021b6 <HAL_GPIO_Init+0x196>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a48      	ldr	r2, [pc, #288]	; (80022cc <HAL_GPIO_Init+0x2ac>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d101      	bne.n	80021b2 <HAL_GPIO_Init+0x192>
 80021ae:	2303      	movs	r3, #3
 80021b0:	e006      	b.n	80021c0 <HAL_GPIO_Init+0x1a0>
 80021b2:	2304      	movs	r3, #4
 80021b4:	e004      	b.n	80021c0 <HAL_GPIO_Init+0x1a0>
 80021b6:	2302      	movs	r3, #2
 80021b8:	e002      	b.n	80021c0 <HAL_GPIO_Init+0x1a0>
 80021ba:	2301      	movs	r3, #1
 80021bc:	e000      	b.n	80021c0 <HAL_GPIO_Init+0x1a0>
 80021be:	2300      	movs	r3, #0
 80021c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c2:	f002 0203 	and.w	r2, r2, #3
 80021c6:	0092      	lsls	r2, r2, #2
 80021c8:	4093      	lsls	r3, r2
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021d0:	493a      	ldr	r1, [pc, #232]	; (80022bc <HAL_GPIO_Init+0x29c>)
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	089b      	lsrs	r3, r3, #2
 80021d6:	3302      	adds	r3, #2
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d006      	beq.n	80021f8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021ea:	4b39      	ldr	r3, [pc, #228]	; (80022d0 <HAL_GPIO_Init+0x2b0>)
 80021ec:	689a      	ldr	r2, [r3, #8]
 80021ee:	4938      	ldr	r1, [pc, #224]	; (80022d0 <HAL_GPIO_Init+0x2b0>)
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	608b      	str	r3, [r1, #8]
 80021f6:	e006      	b.n	8002206 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021f8:	4b35      	ldr	r3, [pc, #212]	; (80022d0 <HAL_GPIO_Init+0x2b0>)
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	43db      	mvns	r3, r3
 8002200:	4933      	ldr	r1, [pc, #204]	; (80022d0 <HAL_GPIO_Init+0x2b0>)
 8002202:	4013      	ands	r3, r2
 8002204:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d006      	beq.n	8002220 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002212:	4b2f      	ldr	r3, [pc, #188]	; (80022d0 <HAL_GPIO_Init+0x2b0>)
 8002214:	68da      	ldr	r2, [r3, #12]
 8002216:	492e      	ldr	r1, [pc, #184]	; (80022d0 <HAL_GPIO_Init+0x2b0>)
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	4313      	orrs	r3, r2
 800221c:	60cb      	str	r3, [r1, #12]
 800221e:	e006      	b.n	800222e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002220:	4b2b      	ldr	r3, [pc, #172]	; (80022d0 <HAL_GPIO_Init+0x2b0>)
 8002222:	68da      	ldr	r2, [r3, #12]
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	43db      	mvns	r3, r3
 8002228:	4929      	ldr	r1, [pc, #164]	; (80022d0 <HAL_GPIO_Init+0x2b0>)
 800222a:	4013      	ands	r3, r2
 800222c:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d006      	beq.n	8002248 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800223a:	4b25      	ldr	r3, [pc, #148]	; (80022d0 <HAL_GPIO_Init+0x2b0>)
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	4924      	ldr	r1, [pc, #144]	; (80022d0 <HAL_GPIO_Init+0x2b0>)
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	4313      	orrs	r3, r2
 8002244:	604b      	str	r3, [r1, #4]
 8002246:	e006      	b.n	8002256 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002248:	4b21      	ldr	r3, [pc, #132]	; (80022d0 <HAL_GPIO_Init+0x2b0>)
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	43db      	mvns	r3, r3
 8002250:	491f      	ldr	r1, [pc, #124]	; (80022d0 <HAL_GPIO_Init+0x2b0>)
 8002252:	4013      	ands	r3, r2
 8002254:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d006      	beq.n	8002270 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002262:	4b1b      	ldr	r3, [pc, #108]	; (80022d0 <HAL_GPIO_Init+0x2b0>)
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	491a      	ldr	r1, [pc, #104]	; (80022d0 <HAL_GPIO_Init+0x2b0>)
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	4313      	orrs	r3, r2
 800226c:	600b      	str	r3, [r1, #0]
 800226e:	e006      	b.n	800227e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002270:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <HAL_GPIO_Init+0x2b0>)
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	43db      	mvns	r3, r3
 8002278:	4915      	ldr	r1, [pc, #84]	; (80022d0 <HAL_GPIO_Init+0x2b0>)
 800227a:	4013      	ands	r3, r2
 800227c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	3301      	adds	r3, #1
 8002282:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228a:	fa22 f303 	lsr.w	r3, r2, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	f47f aed0 	bne.w	8002034 <HAL_GPIO_Init+0x14>
  }
}
 8002294:	bf00      	nop
 8002296:	372c      	adds	r7, #44	; 0x2c
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	10210000 	.word	0x10210000
 80022a4:	10110000 	.word	0x10110000
 80022a8:	10120000 	.word	0x10120000
 80022ac:	10310000 	.word	0x10310000
 80022b0:	10320000 	.word	0x10320000
 80022b4:	10220000 	.word	0x10220000
 80022b8:	40021000 	.word	0x40021000
 80022bc:	40010000 	.word	0x40010000
 80022c0:	40010800 	.word	0x40010800
 80022c4:	40010c00 	.word	0x40010c00
 80022c8:	40011000 	.word	0x40011000
 80022cc:	40011400 	.word	0x40011400
 80022d0:	40010400 	.word	0x40010400

080022d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	887b      	ldrh	r3, [r7, #2]
 80022e6:	4013      	ands	r3, r2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022ec:	2301      	movs	r3, #1
 80022ee:	73fb      	strb	r3, [r7, #15]
 80022f0:	e001      	b.n	80022f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022f2:	2300      	movs	r3, #0
 80022f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bc80      	pop	{r7}
 8002300:	4770      	bx	lr

08002302 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
 800230a:	460b      	mov	r3, r1
 800230c:	807b      	strh	r3, [r7, #2]
 800230e:	4613      	mov	r3, r2
 8002310:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002312:	787b      	ldrb	r3, [r7, #1]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d003      	beq.n	8002320 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002318:	887a      	ldrh	r2, [r7, #2]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800231e:	e003      	b.n	8002328 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002320:	887b      	ldrh	r3, [r7, #2]
 8002322:	041a      	lsls	r2, r3, #16
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	611a      	str	r2, [r3, #16]
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	bc80      	pop	{r7}
 8002330:	4770      	bx	lr
	...

08002334 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e11f      	b.n	8002586 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d106      	bne.n	8002360 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7ff fc30 	bl	8001bc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2224      	movs	r2, #36	; 0x24
 8002364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0201 	bic.w	r2, r2, #1
 8002376:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002386:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002396:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002398:	f001 f824 	bl	80033e4 <HAL_RCC_GetPCLK1Freq>
 800239c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	4a7b      	ldr	r2, [pc, #492]	; (8002590 <HAL_I2C_Init+0x25c>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d807      	bhi.n	80023b8 <HAL_I2C_Init+0x84>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	4a7a      	ldr	r2, [pc, #488]	; (8002594 <HAL_I2C_Init+0x260>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	bf94      	ite	ls
 80023b0:	2301      	movls	r3, #1
 80023b2:	2300      	movhi	r3, #0
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	e006      	b.n	80023c6 <HAL_I2C_Init+0x92>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	4a77      	ldr	r2, [pc, #476]	; (8002598 <HAL_I2C_Init+0x264>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	bf94      	ite	ls
 80023c0:	2301      	movls	r3, #1
 80023c2:	2300      	movhi	r3, #0
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e0db      	b.n	8002586 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	4a72      	ldr	r2, [pc, #456]	; (800259c <HAL_I2C_Init+0x268>)
 80023d2:	fba2 2303 	umull	r2, r3, r2, r3
 80023d6:	0c9b      	lsrs	r3, r3, #18
 80023d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68ba      	ldr	r2, [r7, #8]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	4a64      	ldr	r2, [pc, #400]	; (8002590 <HAL_I2C_Init+0x25c>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d802      	bhi.n	8002408 <HAL_I2C_Init+0xd4>
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	3301      	adds	r3, #1
 8002406:	e009      	b.n	800241c <HAL_I2C_Init+0xe8>
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800240e:	fb02 f303 	mul.w	r3, r2, r3
 8002412:	4a63      	ldr	r2, [pc, #396]	; (80025a0 <HAL_I2C_Init+0x26c>)
 8002414:	fba2 2303 	umull	r2, r3, r2, r3
 8002418:	099b      	lsrs	r3, r3, #6
 800241a:	3301      	adds	r3, #1
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6812      	ldr	r2, [r2, #0]
 8002420:	430b      	orrs	r3, r1
 8002422:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800242e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	4956      	ldr	r1, [pc, #344]	; (8002590 <HAL_I2C_Init+0x25c>)
 8002438:	428b      	cmp	r3, r1
 800243a:	d80d      	bhi.n	8002458 <HAL_I2C_Init+0x124>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	1e59      	subs	r1, r3, #1
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	fbb1 f3f3 	udiv	r3, r1, r3
 800244a:	3301      	adds	r3, #1
 800244c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002450:	2b04      	cmp	r3, #4
 8002452:	bf38      	it	cc
 8002454:	2304      	movcc	r3, #4
 8002456:	e04f      	b.n	80024f8 <HAL_I2C_Init+0x1c4>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d111      	bne.n	8002484 <HAL_I2C_Init+0x150>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	1e58      	subs	r0, r3, #1
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6859      	ldr	r1, [r3, #4]
 8002468:	460b      	mov	r3, r1
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	440b      	add	r3, r1
 800246e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002472:	3301      	adds	r3, #1
 8002474:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002478:	2b00      	cmp	r3, #0
 800247a:	bf0c      	ite	eq
 800247c:	2301      	moveq	r3, #1
 800247e:	2300      	movne	r3, #0
 8002480:	b2db      	uxtb	r3, r3
 8002482:	e012      	b.n	80024aa <HAL_I2C_Init+0x176>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	1e58      	subs	r0, r3, #1
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6859      	ldr	r1, [r3, #4]
 800248c:	460b      	mov	r3, r1
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	0099      	lsls	r1, r3, #2
 8002494:	440b      	add	r3, r1
 8002496:	fbb0 f3f3 	udiv	r3, r0, r3
 800249a:	3301      	adds	r3, #1
 800249c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	bf0c      	ite	eq
 80024a4:	2301      	moveq	r3, #1
 80024a6:	2300      	movne	r3, #0
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_I2C_Init+0x17e>
 80024ae:	2301      	movs	r3, #1
 80024b0:	e022      	b.n	80024f8 <HAL_I2C_Init+0x1c4>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10e      	bne.n	80024d8 <HAL_I2C_Init+0x1a4>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	1e58      	subs	r0, r3, #1
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6859      	ldr	r1, [r3, #4]
 80024c2:	460b      	mov	r3, r1
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	440b      	add	r3, r1
 80024c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80024cc:	3301      	adds	r3, #1
 80024ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024d6:	e00f      	b.n	80024f8 <HAL_I2C_Init+0x1c4>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	1e58      	subs	r0, r3, #1
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6859      	ldr	r1, [r3, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	0099      	lsls	r1, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ee:	3301      	adds	r3, #1
 80024f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	6809      	ldr	r1, [r1, #0]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69da      	ldr	r2, [r3, #28]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	430a      	orrs	r2, r1
 800251a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002526:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	6911      	ldr	r1, [r2, #16]
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	68d2      	ldr	r2, [r2, #12]
 8002532:	4311      	orrs	r1, r2
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6812      	ldr	r2, [r2, #0]
 8002538:	430b      	orrs	r3, r1
 800253a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	695a      	ldr	r2, [r3, #20]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	431a      	orrs	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0201 	orr.w	r2, r2, #1
 8002566:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2220      	movs	r2, #32
 8002572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	000186a0 	.word	0x000186a0
 8002594:	001e847f 	.word	0x001e847f
 8002598:	003d08ff 	.word	0x003d08ff
 800259c:	431bde83 	.word	0x431bde83
 80025a0:	10624dd3 	.word	0x10624dd3

080025a4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b088      	sub	sp, #32
 80025a8:	af02      	add	r7, sp, #8
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	607a      	str	r2, [r7, #4]
 80025ae:	461a      	mov	r2, r3
 80025b0:	460b      	mov	r3, r1
 80025b2:	817b      	strh	r3, [r7, #10]
 80025b4:	4613      	mov	r3, r2
 80025b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025b8:	f7ff fc22 	bl	8001e00 <HAL_GetTick>
 80025bc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b20      	cmp	r3, #32
 80025c8:	f040 80e0 	bne.w	800278c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	2319      	movs	r3, #25
 80025d2:	2201      	movs	r2, #1
 80025d4:	4970      	ldr	r1, [pc, #448]	; (8002798 <HAL_I2C_Master_Transmit+0x1f4>)
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 f964 	bl	80028a4 <I2C_WaitOnFlagUntilTimeout>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80025e2:	2302      	movs	r3, #2
 80025e4:	e0d3      	b.n	800278e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d101      	bne.n	80025f4 <HAL_I2C_Master_Transmit+0x50>
 80025f0:	2302      	movs	r3, #2
 80025f2:	e0cc      	b.n	800278e <HAL_I2C_Master_Transmit+0x1ea>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b01      	cmp	r3, #1
 8002608:	d007      	beq.n	800261a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f042 0201 	orr.w	r2, r2, #1
 8002618:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002628:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2221      	movs	r2, #33	; 0x21
 800262e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2210      	movs	r2, #16
 8002636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	893a      	ldrh	r2, [r7, #8]
 800264a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002650:	b29a      	uxth	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	4a50      	ldr	r2, [pc, #320]	; (800279c <HAL_I2C_Master_Transmit+0x1f8>)
 800265a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800265c:	8979      	ldrh	r1, [r7, #10]
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	6a3a      	ldr	r2, [r7, #32]
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f000 f89c 	bl	80027a0 <I2C_MasterRequestWrite>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e08d      	b.n	800278e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	613b      	str	r3, [r7, #16]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002688:	e066      	b.n	8002758 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	6a39      	ldr	r1, [r7, #32]
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 fa22 	bl	8002ad8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00d      	beq.n	80026b6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d107      	bne.n	80026b2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e06b      	b.n	800278e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	781a      	ldrb	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	1c5a      	adds	r2, r3, #1
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	3b01      	subs	r3, #1
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026de:	3b01      	subs	r3, #1
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b04      	cmp	r3, #4
 80026f2:	d11b      	bne.n	800272c <HAL_I2C_Master_Transmit+0x188>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d017      	beq.n	800272c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	781a      	ldrb	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270c:	1c5a      	adds	r2, r3, #1
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002716:	b29b      	uxth	r3, r3
 8002718:	3b01      	subs	r3, #1
 800271a:	b29a      	uxth	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002724:	3b01      	subs	r3, #1
 8002726:	b29a      	uxth	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	6a39      	ldr	r1, [r7, #32]
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f000 fa19 	bl	8002b68 <I2C_WaitOnBTFFlagUntilTimeout>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00d      	beq.n	8002758 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	2b04      	cmp	r3, #4
 8002742:	d107      	bne.n	8002754 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002752:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e01a      	b.n	800278e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800275c:	2b00      	cmp	r3, #0
 800275e:	d194      	bne.n	800268a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800276e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2220      	movs	r2, #32
 8002774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002788:	2300      	movs	r3, #0
 800278a:	e000      	b.n	800278e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800278c:	2302      	movs	r3, #2
  }
}
 800278e:	4618      	mov	r0, r3
 8002790:	3718      	adds	r7, #24
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	00100002 	.word	0x00100002
 800279c:	ffff0000 	.word	0xffff0000

080027a0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b088      	sub	sp, #32
 80027a4:	af02      	add	r7, sp, #8
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	607a      	str	r2, [r7, #4]
 80027aa:	603b      	str	r3, [r7, #0]
 80027ac:	460b      	mov	r3, r1
 80027ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	d006      	beq.n	80027ca <I2C_MasterRequestWrite+0x2a>
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d003      	beq.n	80027ca <I2C_MasterRequestWrite+0x2a>
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027c8:	d108      	bne.n	80027dc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027d8:	601a      	str	r2, [r3, #0]
 80027da:	e00b      	b.n	80027f4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e0:	2b12      	cmp	r3, #18
 80027e2:	d107      	bne.n	80027f4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f000 f84f 	bl	80028a4 <I2C_WaitOnFlagUntilTimeout>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00d      	beq.n	8002828 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800281a:	d103      	bne.n	8002824 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002822:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e035      	b.n	8002894 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002830:	d108      	bne.n	8002844 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002832:	897b      	ldrh	r3, [r7, #10]
 8002834:	b2db      	uxtb	r3, r3
 8002836:	461a      	mov	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002840:	611a      	str	r2, [r3, #16]
 8002842:	e01b      	b.n	800287c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002844:	897b      	ldrh	r3, [r7, #10]
 8002846:	11db      	asrs	r3, r3, #7
 8002848:	b2db      	uxtb	r3, r3
 800284a:	f003 0306 	and.w	r3, r3, #6
 800284e:	b2db      	uxtb	r3, r3
 8002850:	f063 030f 	orn	r3, r3, #15
 8002854:	b2da      	uxtb	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	490e      	ldr	r1, [pc, #56]	; (800289c <I2C_MasterRequestWrite+0xfc>)
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f000 f898 	bl	8002998 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e010      	b.n	8002894 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002872:	897b      	ldrh	r3, [r7, #10]
 8002874:	b2da      	uxtb	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	4907      	ldr	r1, [pc, #28]	; (80028a0 <I2C_MasterRequestWrite+0x100>)
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 f888 	bl	8002998 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3718      	adds	r7, #24
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	00010008 	.word	0x00010008
 80028a0:	00010002 	.word	0x00010002

080028a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	603b      	str	r3, [r7, #0]
 80028b0:	4613      	mov	r3, r2
 80028b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028b4:	e048      	b.n	8002948 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028bc:	d044      	beq.n	8002948 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028be:	f7ff fa9f 	bl	8001e00 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d302      	bcc.n	80028d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d139      	bne.n	8002948 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	0c1b      	lsrs	r3, r3, #16
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d10d      	bne.n	80028fa <I2C_WaitOnFlagUntilTimeout+0x56>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	43da      	mvns	r2, r3
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	4013      	ands	r3, r2
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	bf0c      	ite	eq
 80028f0:	2301      	moveq	r3, #1
 80028f2:	2300      	movne	r3, #0
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	461a      	mov	r2, r3
 80028f8:	e00c      	b.n	8002914 <I2C_WaitOnFlagUntilTimeout+0x70>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	43da      	mvns	r2, r3
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	4013      	ands	r3, r2
 8002906:	b29b      	uxth	r3, r3
 8002908:	2b00      	cmp	r3, #0
 800290a:	bf0c      	ite	eq
 800290c:	2301      	moveq	r3, #1
 800290e:	2300      	movne	r3, #0
 8002910:	b2db      	uxtb	r3, r3
 8002912:	461a      	mov	r2, r3
 8002914:	79fb      	ldrb	r3, [r7, #7]
 8002916:	429a      	cmp	r2, r3
 8002918:	d116      	bne.n	8002948 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2200      	movs	r2, #0
 800291e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2220      	movs	r2, #32
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002934:	f043 0220 	orr.w	r2, r3, #32
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e023      	b.n	8002990 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	0c1b      	lsrs	r3, r3, #16
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b01      	cmp	r3, #1
 8002950:	d10d      	bne.n	800296e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	43da      	mvns	r2, r3
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	4013      	ands	r3, r2
 800295e:	b29b      	uxth	r3, r3
 8002960:	2b00      	cmp	r3, #0
 8002962:	bf0c      	ite	eq
 8002964:	2301      	moveq	r3, #1
 8002966:	2300      	movne	r3, #0
 8002968:	b2db      	uxtb	r3, r3
 800296a:	461a      	mov	r2, r3
 800296c:	e00c      	b.n	8002988 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	43da      	mvns	r2, r3
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	4013      	ands	r3, r2
 800297a:	b29b      	uxth	r3, r3
 800297c:	2b00      	cmp	r3, #0
 800297e:	bf0c      	ite	eq
 8002980:	2301      	moveq	r3, #1
 8002982:	2300      	movne	r3, #0
 8002984:	b2db      	uxtb	r3, r3
 8002986:	461a      	mov	r2, r3
 8002988:	79fb      	ldrb	r3, [r7, #7]
 800298a:	429a      	cmp	r2, r3
 800298c:	d093      	beq.n	80028b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3710      	adds	r7, #16
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
 80029a4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029a6:	e071      	b.n	8002a8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029b6:	d123      	bne.n	8002a00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029c6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2220      	movs	r2, #32
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	f043 0204 	orr.w	r2, r3, #4
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e067      	b.n	8002ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a06:	d041      	beq.n	8002a8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a08:	f7ff f9fa 	bl	8001e00 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d302      	bcc.n	8002a1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d136      	bne.n	8002a8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	0c1b      	lsrs	r3, r3, #16
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d10c      	bne.n	8002a42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	43da      	mvns	r2, r3
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	4013      	ands	r3, r2
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	bf14      	ite	ne
 8002a3a:	2301      	movne	r3, #1
 8002a3c:	2300      	moveq	r3, #0
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	e00b      	b.n	8002a5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	43da      	mvns	r2, r3
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	bf14      	ite	ne
 8002a54:	2301      	movne	r3, #1
 8002a56:	2300      	moveq	r3, #0
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d016      	beq.n	8002a8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2220      	movs	r2, #32
 8002a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a78:	f043 0220 	orr.w	r2, r3, #32
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e021      	b.n	8002ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	0c1b      	lsrs	r3, r3, #16
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d10c      	bne.n	8002ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	43da      	mvns	r2, r3
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	bf14      	ite	ne
 8002aa8:	2301      	movne	r3, #1
 8002aaa:	2300      	moveq	r3, #0
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	e00b      	b.n	8002ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	43da      	mvns	r2, r3
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	4013      	ands	r3, r2
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	bf14      	ite	ne
 8002ac2:	2301      	movne	r3, #1
 8002ac4:	2300      	moveq	r3, #0
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f47f af6d 	bne.w	80029a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ae4:	e034      	b.n	8002b50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f000 f886 	bl	8002bf8 <I2C_IsAcknowledgeFailed>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e034      	b.n	8002b60 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002afc:	d028      	beq.n	8002b50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002afe:	f7ff f97f 	bl	8001e00 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	68ba      	ldr	r2, [r7, #8]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d302      	bcc.n	8002b14 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d11d      	bne.n	8002b50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b1e:	2b80      	cmp	r3, #128	; 0x80
 8002b20:	d016      	beq.n	8002b50 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3c:	f043 0220 	orr.w	r2, r3, #32
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e007      	b.n	8002b60 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5a:	2b80      	cmp	r3, #128	; 0x80
 8002b5c:	d1c3      	bne.n	8002ae6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b74:	e034      	b.n	8002be0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f000 f83e 	bl	8002bf8 <I2C_IsAcknowledgeFailed>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e034      	b.n	8002bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8c:	d028      	beq.n	8002be0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b8e:	f7ff f937 	bl	8001e00 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d302      	bcc.n	8002ba4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d11d      	bne.n	8002be0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	f003 0304 	and.w	r3, r3, #4
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d016      	beq.n	8002be0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bcc:	f043 0220 	orr.w	r2, r3, #32
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e007      	b.n	8002bf0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	f003 0304 	and.w	r3, r3, #4
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	d1c3      	bne.n	8002b76 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c0e:	d11b      	bne.n	8002c48 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c18:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2220      	movs	r2, #32
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	f043 0204 	orr.w	r2, r3, #4
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e000      	b.n	8002c4a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr

08002c54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e26c      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f000 8087 	beq.w	8002d82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c74:	4b92      	ldr	r3, [pc, #584]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 030c 	and.w	r3, r3, #12
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d00c      	beq.n	8002c9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c80:	4b8f      	ldr	r3, [pc, #572]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f003 030c 	and.w	r3, r3, #12
 8002c88:	2b08      	cmp	r3, #8
 8002c8a:	d112      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x5e>
 8002c8c:	4b8c      	ldr	r3, [pc, #560]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c98:	d10b      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c9a:	4b89      	ldr	r3, [pc, #548]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d06c      	beq.n	8002d80 <HAL_RCC_OscConfig+0x12c>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d168      	bne.n	8002d80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e246      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cba:	d106      	bne.n	8002cca <HAL_RCC_OscConfig+0x76>
 8002cbc:	4b80      	ldr	r3, [pc, #512]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a7f      	ldr	r2, [pc, #508]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002cc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc6:	6013      	str	r3, [r2, #0]
 8002cc8:	e02e      	b.n	8002d28 <HAL_RCC_OscConfig+0xd4>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10c      	bne.n	8002cec <HAL_RCC_OscConfig+0x98>
 8002cd2:	4b7b      	ldr	r3, [pc, #492]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a7a      	ldr	r2, [pc, #488]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002cd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	4b78      	ldr	r3, [pc, #480]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a77      	ldr	r2, [pc, #476]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002ce4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ce8:	6013      	str	r3, [r2, #0]
 8002cea:	e01d      	b.n	8002d28 <HAL_RCC_OscConfig+0xd4>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002cf4:	d10c      	bne.n	8002d10 <HAL_RCC_OscConfig+0xbc>
 8002cf6:	4b72      	ldr	r3, [pc, #456]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a71      	ldr	r2, [pc, #452]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d00:	6013      	str	r3, [r2, #0]
 8002d02:	4b6f      	ldr	r3, [pc, #444]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a6e      	ldr	r2, [pc, #440]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d0c:	6013      	str	r3, [r2, #0]
 8002d0e:	e00b      	b.n	8002d28 <HAL_RCC_OscConfig+0xd4>
 8002d10:	4b6b      	ldr	r3, [pc, #428]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a6a      	ldr	r2, [pc, #424]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002d16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d1a:	6013      	str	r3, [r2, #0]
 8002d1c:	4b68      	ldr	r3, [pc, #416]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a67      	ldr	r2, [pc, #412]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002d22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d013      	beq.n	8002d58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d30:	f7ff f866 	bl	8001e00 <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d38:	f7ff f862 	bl	8001e00 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b64      	cmp	r3, #100	; 0x64
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e1fa      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d4a:	4b5d      	ldr	r3, [pc, #372]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0f0      	beq.n	8002d38 <HAL_RCC_OscConfig+0xe4>
 8002d56:	e014      	b.n	8002d82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d58:	f7ff f852 	bl	8001e00 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d60:	f7ff f84e 	bl	8001e00 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b64      	cmp	r3, #100	; 0x64
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e1e6      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d72:	4b53      	ldr	r3, [pc, #332]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d1f0      	bne.n	8002d60 <HAL_RCC_OscConfig+0x10c>
 8002d7e:	e000      	b.n	8002d82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d063      	beq.n	8002e56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d8e:	4b4c      	ldr	r3, [pc, #304]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f003 030c 	and.w	r3, r3, #12
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00b      	beq.n	8002db2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d9a:	4b49      	ldr	r3, [pc, #292]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f003 030c 	and.w	r3, r3, #12
 8002da2:	2b08      	cmp	r3, #8
 8002da4:	d11c      	bne.n	8002de0 <HAL_RCC_OscConfig+0x18c>
 8002da6:	4b46      	ldr	r3, [pc, #280]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d116      	bne.n	8002de0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002db2:	4b43      	ldr	r3, [pc, #268]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d005      	beq.n	8002dca <HAL_RCC_OscConfig+0x176>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d001      	beq.n	8002dca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e1ba      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dca:	4b3d      	ldr	r3, [pc, #244]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	4939      	ldr	r1, [pc, #228]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dde:	e03a      	b.n	8002e56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d020      	beq.n	8002e2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002de8:	4b36      	ldr	r3, [pc, #216]	; (8002ec4 <HAL_RCC_OscConfig+0x270>)
 8002dea:	2201      	movs	r2, #1
 8002dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dee:	f7ff f807 	bl	8001e00 <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002df6:	f7ff f803 	bl	8001e00 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e19b      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e08:	4b2d      	ldr	r3, [pc, #180]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d0f0      	beq.n	8002df6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e14:	4b2a      	ldr	r3, [pc, #168]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	4927      	ldr	r1, [pc, #156]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	600b      	str	r3, [r1, #0]
 8002e28:	e015      	b.n	8002e56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e2a:	4b26      	ldr	r3, [pc, #152]	; (8002ec4 <HAL_RCC_OscConfig+0x270>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e30:	f7fe ffe6 	bl	8001e00 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e38:	f7fe ffe2 	bl	8001e00 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e17a      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e4a:	4b1d      	ldr	r3, [pc, #116]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f0      	bne.n	8002e38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0308 	and.w	r3, r3, #8
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d03a      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d019      	beq.n	8002e9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e6a:	4b17      	ldr	r3, [pc, #92]	; (8002ec8 <HAL_RCC_OscConfig+0x274>)
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e70:	f7fe ffc6 	bl	8001e00 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e78:	f7fe ffc2 	bl	8001e00 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e15a      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e8a:	4b0d      	ldr	r3, [pc, #52]	; (8002ec0 <HAL_RCC_OscConfig+0x26c>)
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0f0      	beq.n	8002e78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e96:	2001      	movs	r0, #1
 8002e98:	f000 fab8 	bl	800340c <RCC_Delay>
 8002e9c:	e01c      	b.n	8002ed8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e9e:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <HAL_RCC_OscConfig+0x274>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ea4:	f7fe ffac 	bl	8001e00 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eaa:	e00f      	b.n	8002ecc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eac:	f7fe ffa8 	bl	8001e00 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d908      	bls.n	8002ecc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e140      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
 8002ebe:	bf00      	nop
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	42420000 	.word	0x42420000
 8002ec8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ecc:	4b9e      	ldr	r3, [pc, #632]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1e9      	bne.n	8002eac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 80a6 	beq.w	8003032 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eea:	4b97      	ldr	r3, [pc, #604]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10d      	bne.n	8002f12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ef6:	4b94      	ldr	r3, [pc, #592]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	4a93      	ldr	r2, [pc, #588]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f00:	61d3      	str	r3, [r2, #28]
 8002f02:	4b91      	ldr	r3, [pc, #580]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0a:	60bb      	str	r3, [r7, #8]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f12:	4b8e      	ldr	r3, [pc, #568]	; (800314c <HAL_RCC_OscConfig+0x4f8>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d118      	bne.n	8002f50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f1e:	4b8b      	ldr	r3, [pc, #556]	; (800314c <HAL_RCC_OscConfig+0x4f8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a8a      	ldr	r2, [pc, #552]	; (800314c <HAL_RCC_OscConfig+0x4f8>)
 8002f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f2a:	f7fe ff69 	bl	8001e00 <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f30:	e008      	b.n	8002f44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f32:	f7fe ff65 	bl	8001e00 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b64      	cmp	r3, #100	; 0x64
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e0fd      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f44:	4b81      	ldr	r3, [pc, #516]	; (800314c <HAL_RCC_OscConfig+0x4f8>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d0f0      	beq.n	8002f32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d106      	bne.n	8002f66 <HAL_RCC_OscConfig+0x312>
 8002f58:	4b7b      	ldr	r3, [pc, #492]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	4a7a      	ldr	r2, [pc, #488]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002f5e:	f043 0301 	orr.w	r3, r3, #1
 8002f62:	6213      	str	r3, [r2, #32]
 8002f64:	e02d      	b.n	8002fc2 <HAL_RCC_OscConfig+0x36e>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d10c      	bne.n	8002f88 <HAL_RCC_OscConfig+0x334>
 8002f6e:	4b76      	ldr	r3, [pc, #472]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	4a75      	ldr	r2, [pc, #468]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002f74:	f023 0301 	bic.w	r3, r3, #1
 8002f78:	6213      	str	r3, [r2, #32]
 8002f7a:	4b73      	ldr	r3, [pc, #460]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	4a72      	ldr	r2, [pc, #456]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002f80:	f023 0304 	bic.w	r3, r3, #4
 8002f84:	6213      	str	r3, [r2, #32]
 8002f86:	e01c      	b.n	8002fc2 <HAL_RCC_OscConfig+0x36e>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	2b05      	cmp	r3, #5
 8002f8e:	d10c      	bne.n	8002faa <HAL_RCC_OscConfig+0x356>
 8002f90:	4b6d      	ldr	r3, [pc, #436]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	4a6c      	ldr	r2, [pc, #432]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002f96:	f043 0304 	orr.w	r3, r3, #4
 8002f9a:	6213      	str	r3, [r2, #32]
 8002f9c:	4b6a      	ldr	r3, [pc, #424]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	4a69      	ldr	r2, [pc, #420]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002fa2:	f043 0301 	orr.w	r3, r3, #1
 8002fa6:	6213      	str	r3, [r2, #32]
 8002fa8:	e00b      	b.n	8002fc2 <HAL_RCC_OscConfig+0x36e>
 8002faa:	4b67      	ldr	r3, [pc, #412]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	4a66      	ldr	r2, [pc, #408]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002fb0:	f023 0301 	bic.w	r3, r3, #1
 8002fb4:	6213      	str	r3, [r2, #32]
 8002fb6:	4b64      	ldr	r3, [pc, #400]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	4a63      	ldr	r2, [pc, #396]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002fbc:	f023 0304 	bic.w	r3, r3, #4
 8002fc0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d015      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fca:	f7fe ff19 	bl	8001e00 <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fd0:	e00a      	b.n	8002fe8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fd2:	f7fe ff15 	bl	8001e00 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e0ab      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe8:	4b57      	ldr	r3, [pc, #348]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8002fea:	6a1b      	ldr	r3, [r3, #32]
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0ee      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x37e>
 8002ff4:	e014      	b.n	8003020 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff6:	f7fe ff03 	bl	8001e00 <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ffc:	e00a      	b.n	8003014 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ffe:	f7fe feff 	bl	8001e00 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	f241 3288 	movw	r2, #5000	; 0x1388
 800300c:	4293      	cmp	r3, r2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e095      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003014:	4b4c      	ldr	r3, [pc, #304]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1ee      	bne.n	8002ffe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003020:	7dfb      	ldrb	r3, [r7, #23]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d105      	bne.n	8003032 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003026:	4b48      	ldr	r3, [pc, #288]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	4a47      	ldr	r2, [pc, #284]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 800302c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003030:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 8081 	beq.w	800313e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800303c:	4b42      	ldr	r3, [pc, #264]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f003 030c 	and.w	r3, r3, #12
 8003044:	2b08      	cmp	r3, #8
 8003046:	d061      	beq.n	800310c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	69db      	ldr	r3, [r3, #28]
 800304c:	2b02      	cmp	r3, #2
 800304e:	d146      	bne.n	80030de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003050:	4b3f      	ldr	r3, [pc, #252]	; (8003150 <HAL_RCC_OscConfig+0x4fc>)
 8003052:	2200      	movs	r2, #0
 8003054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003056:	f7fe fed3 	bl	8001e00 <HAL_GetTick>
 800305a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800305c:	e008      	b.n	8003070 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800305e:	f7fe fecf 	bl	8001e00 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e067      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003070:	4b35      	ldr	r3, [pc, #212]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1f0      	bne.n	800305e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003084:	d108      	bne.n	8003098 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003086:	4b30      	ldr	r3, [pc, #192]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	492d      	ldr	r1, [pc, #180]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8003094:	4313      	orrs	r3, r2
 8003096:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003098:	4b2b      	ldr	r3, [pc, #172]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a19      	ldr	r1, [r3, #32]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	430b      	orrs	r3, r1
 80030aa:	4927      	ldr	r1, [pc, #156]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030b0:	4b27      	ldr	r3, [pc, #156]	; (8003150 <HAL_RCC_OscConfig+0x4fc>)
 80030b2:	2201      	movs	r2, #1
 80030b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b6:	f7fe fea3 	bl	8001e00 <HAL_GetTick>
 80030ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030bc:	e008      	b.n	80030d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030be:	f7fe fe9f 	bl	8001e00 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e037      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030d0:	4b1d      	ldr	r3, [pc, #116]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d0f0      	beq.n	80030be <HAL_RCC_OscConfig+0x46a>
 80030dc:	e02f      	b.n	800313e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030de:	4b1c      	ldr	r3, [pc, #112]	; (8003150 <HAL_RCC_OscConfig+0x4fc>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e4:	f7fe fe8c 	bl	8001e00 <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ec:	f7fe fe88 	bl	8001e00 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e020      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030fe:	4b12      	ldr	r3, [pc, #72]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1f0      	bne.n	80030ec <HAL_RCC_OscConfig+0x498>
 800310a:	e018      	b.n	800313e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	69db      	ldr	r3, [r3, #28]
 8003110:	2b01      	cmp	r3, #1
 8003112:	d101      	bne.n	8003118 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e013      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003118:	4b0b      	ldr	r3, [pc, #44]	; (8003148 <HAL_RCC_OscConfig+0x4f4>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	429a      	cmp	r2, r3
 800312a:	d106      	bne.n	800313a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003136:	429a      	cmp	r2, r3
 8003138:	d001      	beq.n	800313e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e000      	b.n	8003140 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3718      	adds	r7, #24
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40021000 	.word	0x40021000
 800314c:	40007000 	.word	0x40007000
 8003150:	42420060 	.word	0x42420060

08003154 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d101      	bne.n	8003168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e0d0      	b.n	800330a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003168:	4b6a      	ldr	r3, [pc, #424]	; (8003314 <HAL_RCC_ClockConfig+0x1c0>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0307 	and.w	r3, r3, #7
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	429a      	cmp	r2, r3
 8003174:	d910      	bls.n	8003198 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003176:	4b67      	ldr	r3, [pc, #412]	; (8003314 <HAL_RCC_ClockConfig+0x1c0>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f023 0207 	bic.w	r2, r3, #7
 800317e:	4965      	ldr	r1, [pc, #404]	; (8003314 <HAL_RCC_ClockConfig+0x1c0>)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	4313      	orrs	r3, r2
 8003184:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003186:	4b63      	ldr	r3, [pc, #396]	; (8003314 <HAL_RCC_ClockConfig+0x1c0>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	429a      	cmp	r2, r3
 8003192:	d001      	beq.n	8003198 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e0b8      	b.n	800330a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d020      	beq.n	80031e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d005      	beq.n	80031bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031b0:	4b59      	ldr	r3, [pc, #356]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	4a58      	ldr	r2, [pc, #352]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80031b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80031ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0308 	and.w	r3, r3, #8
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d005      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031c8:	4b53      	ldr	r3, [pc, #332]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	4a52      	ldr	r2, [pc, #328]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80031ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80031d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031d4:	4b50      	ldr	r3, [pc, #320]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	494d      	ldr	r1, [pc, #308]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d040      	beq.n	8003274 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d107      	bne.n	800320a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fa:	4b47      	ldr	r3, [pc, #284]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d115      	bne.n	8003232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e07f      	b.n	800330a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2b02      	cmp	r3, #2
 8003210:	d107      	bne.n	8003222 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003212:	4b41      	ldr	r3, [pc, #260]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d109      	bne.n	8003232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e073      	b.n	800330a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003222:	4b3d      	ldr	r3, [pc, #244]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e06b      	b.n	800330a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003232:	4b39      	ldr	r3, [pc, #228]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f023 0203 	bic.w	r2, r3, #3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	4936      	ldr	r1, [pc, #216]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 8003240:	4313      	orrs	r3, r2
 8003242:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003244:	f7fe fddc 	bl	8001e00 <HAL_GetTick>
 8003248:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800324a:	e00a      	b.n	8003262 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800324c:	f7fe fdd8 	bl	8001e00 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	f241 3288 	movw	r2, #5000	; 0x1388
 800325a:	4293      	cmp	r3, r2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e053      	b.n	800330a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003262:	4b2d      	ldr	r3, [pc, #180]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f003 020c 	and.w	r2, r3, #12
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	429a      	cmp	r2, r3
 8003272:	d1eb      	bne.n	800324c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003274:	4b27      	ldr	r3, [pc, #156]	; (8003314 <HAL_RCC_ClockConfig+0x1c0>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	429a      	cmp	r2, r3
 8003280:	d210      	bcs.n	80032a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003282:	4b24      	ldr	r3, [pc, #144]	; (8003314 <HAL_RCC_ClockConfig+0x1c0>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f023 0207 	bic.w	r2, r3, #7
 800328a:	4922      	ldr	r1, [pc, #136]	; (8003314 <HAL_RCC_ClockConfig+0x1c0>)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	4313      	orrs	r3, r2
 8003290:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003292:	4b20      	ldr	r3, [pc, #128]	; (8003314 <HAL_RCC_ClockConfig+0x1c0>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0307 	and.w	r3, r3, #7
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	429a      	cmp	r2, r3
 800329e:	d001      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e032      	b.n	800330a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d008      	beq.n	80032c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032b0:	4b19      	ldr	r3, [pc, #100]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	4916      	ldr	r1, [pc, #88]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0308 	and.w	r3, r3, #8
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d009      	beq.n	80032e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032ce:	4b12      	ldr	r3, [pc, #72]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	490e      	ldr	r1, [pc, #56]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032e2:	f000 f821 	bl	8003328 <HAL_RCC_GetSysClockFreq>
 80032e6:	4601      	mov	r1, r0
 80032e8:	4b0b      	ldr	r3, [pc, #44]	; (8003318 <HAL_RCC_ClockConfig+0x1c4>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	091b      	lsrs	r3, r3, #4
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	4a0a      	ldr	r2, [pc, #40]	; (800331c <HAL_RCC_ClockConfig+0x1c8>)
 80032f4:	5cd3      	ldrb	r3, [r2, r3]
 80032f6:	fa21 f303 	lsr.w	r3, r1, r3
 80032fa:	4a09      	ldr	r2, [pc, #36]	; (8003320 <HAL_RCC_ClockConfig+0x1cc>)
 80032fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032fe:	4b09      	ldr	r3, [pc, #36]	; (8003324 <HAL_RCC_ClockConfig+0x1d0>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f7fe fd3a 	bl	8001d7c <HAL_InitTick>

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40022000 	.word	0x40022000
 8003318:	40021000 	.word	0x40021000
 800331c:	08006f5c 	.word	0x08006f5c
 8003320:	20000000 	.word	0x20000000
 8003324:	20000004 	.word	0x20000004

08003328 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003328:	b480      	push	{r7}
 800332a:	b087      	sub	sp, #28
 800332c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800332e:	2300      	movs	r3, #0
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	2300      	movs	r3, #0
 8003334:	60bb      	str	r3, [r7, #8]
 8003336:	2300      	movs	r3, #0
 8003338:	617b      	str	r3, [r7, #20]
 800333a:	2300      	movs	r3, #0
 800333c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800333e:	2300      	movs	r3, #0
 8003340:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003342:	4b1e      	ldr	r3, [pc, #120]	; (80033bc <HAL_RCC_GetSysClockFreq+0x94>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f003 030c 	and.w	r3, r3, #12
 800334e:	2b04      	cmp	r3, #4
 8003350:	d002      	beq.n	8003358 <HAL_RCC_GetSysClockFreq+0x30>
 8003352:	2b08      	cmp	r3, #8
 8003354:	d003      	beq.n	800335e <HAL_RCC_GetSysClockFreq+0x36>
 8003356:	e027      	b.n	80033a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003358:	4b19      	ldr	r3, [pc, #100]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800335a:	613b      	str	r3, [r7, #16]
      break;
 800335c:	e027      	b.n	80033ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	0c9b      	lsrs	r3, r3, #18
 8003362:	f003 030f 	and.w	r3, r3, #15
 8003366:	4a17      	ldr	r2, [pc, #92]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003368:	5cd3      	ldrb	r3, [r2, r3]
 800336a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d010      	beq.n	8003398 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003376:	4b11      	ldr	r3, [pc, #68]	; (80033bc <HAL_RCC_GetSysClockFreq+0x94>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	0c5b      	lsrs	r3, r3, #17
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	4a11      	ldr	r2, [pc, #68]	; (80033c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003382:	5cd3      	ldrb	r3, [r2, r3]
 8003384:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a0d      	ldr	r2, [pc, #52]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800338a:	fb02 f203 	mul.w	r2, r2, r3
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	fbb2 f3f3 	udiv	r3, r2, r3
 8003394:	617b      	str	r3, [r7, #20]
 8003396:	e004      	b.n	80033a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a0c      	ldr	r2, [pc, #48]	; (80033cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800339c:	fb02 f303 	mul.w	r3, r2, r3
 80033a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	613b      	str	r3, [r7, #16]
      break;
 80033a6:	e002      	b.n	80033ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033a8:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80033aa:	613b      	str	r3, [r7, #16]
      break;
 80033ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033ae:	693b      	ldr	r3, [r7, #16]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	371c      	adds	r7, #28
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bc80      	pop	{r7}
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	40021000 	.word	0x40021000
 80033c0:	007a1200 	.word	0x007a1200
 80033c4:	08006f74 	.word	0x08006f74
 80033c8:	08006f84 	.word	0x08006f84
 80033cc:	003d0900 	.word	0x003d0900

080033d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033d4:	4b02      	ldr	r3, [pc, #8]	; (80033e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80033d6:	681b      	ldr	r3, [r3, #0]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	46bd      	mov	sp, r7
 80033dc:	bc80      	pop	{r7}
 80033de:	4770      	bx	lr
 80033e0:	20000000 	.word	0x20000000

080033e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033e8:	f7ff fff2 	bl	80033d0 <HAL_RCC_GetHCLKFreq>
 80033ec:	4601      	mov	r1, r0
 80033ee:	4b05      	ldr	r3, [pc, #20]	; (8003404 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	0a1b      	lsrs	r3, r3, #8
 80033f4:	f003 0307 	and.w	r3, r3, #7
 80033f8:	4a03      	ldr	r2, [pc, #12]	; (8003408 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033fa:	5cd3      	ldrb	r3, [r2, r3]
 80033fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003400:	4618      	mov	r0, r3
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40021000 	.word	0x40021000
 8003408:	08006f6c 	.word	0x08006f6c

0800340c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003414:	4b0a      	ldr	r3, [pc, #40]	; (8003440 <RCC_Delay+0x34>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a0a      	ldr	r2, [pc, #40]	; (8003444 <RCC_Delay+0x38>)
 800341a:	fba2 2303 	umull	r2, r3, r2, r3
 800341e:	0a5b      	lsrs	r3, r3, #9
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	fb02 f303 	mul.w	r3, r2, r3
 8003426:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003428:	bf00      	nop
  }
  while (Delay --);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	1e5a      	subs	r2, r3, #1
 800342e:	60fa      	str	r2, [r7, #12]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1f9      	bne.n	8003428 <RCC_Delay+0x1c>
}
 8003434:	bf00      	nop
 8003436:	3714      	adds	r7, #20
 8003438:	46bd      	mov	sp, r7
 800343a:	bc80      	pop	{r7}
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	20000000 	.word	0x20000000
 8003444:	10624dd3 	.word	0x10624dd3

08003448 <__errno>:
 8003448:	4b01      	ldr	r3, [pc, #4]	; (8003450 <__errno+0x8>)
 800344a:	6818      	ldr	r0, [r3, #0]
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	2000000c 	.word	0x2000000c

08003454 <__libc_init_array>:
 8003454:	b570      	push	{r4, r5, r6, lr}
 8003456:	2500      	movs	r5, #0
 8003458:	4e0c      	ldr	r6, [pc, #48]	; (800348c <__libc_init_array+0x38>)
 800345a:	4c0d      	ldr	r4, [pc, #52]	; (8003490 <__libc_init_array+0x3c>)
 800345c:	1ba4      	subs	r4, r4, r6
 800345e:	10a4      	asrs	r4, r4, #2
 8003460:	42a5      	cmp	r5, r4
 8003462:	d109      	bne.n	8003478 <__libc_init_array+0x24>
 8003464:	f003 fd5e 	bl	8006f24 <_init>
 8003468:	2500      	movs	r5, #0
 800346a:	4e0a      	ldr	r6, [pc, #40]	; (8003494 <__libc_init_array+0x40>)
 800346c:	4c0a      	ldr	r4, [pc, #40]	; (8003498 <__libc_init_array+0x44>)
 800346e:	1ba4      	subs	r4, r4, r6
 8003470:	10a4      	asrs	r4, r4, #2
 8003472:	42a5      	cmp	r5, r4
 8003474:	d105      	bne.n	8003482 <__libc_init_array+0x2e>
 8003476:	bd70      	pop	{r4, r5, r6, pc}
 8003478:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800347c:	4798      	blx	r3
 800347e:	3501      	adds	r5, #1
 8003480:	e7ee      	b.n	8003460 <__libc_init_array+0xc>
 8003482:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003486:	4798      	blx	r3
 8003488:	3501      	adds	r5, #1
 800348a:	e7f2      	b.n	8003472 <__libc_init_array+0x1e>
 800348c:	08007240 	.word	0x08007240
 8003490:	08007240 	.word	0x08007240
 8003494:	08007240 	.word	0x08007240
 8003498:	08007244 	.word	0x08007244

0800349c <memset>:
 800349c:	4603      	mov	r3, r0
 800349e:	4402      	add	r2, r0
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d100      	bne.n	80034a6 <memset+0xa>
 80034a4:	4770      	bx	lr
 80034a6:	f803 1b01 	strb.w	r1, [r3], #1
 80034aa:	e7f9      	b.n	80034a0 <memset+0x4>

080034ac <__cvt>:
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034b2:	461e      	mov	r6, r3
 80034b4:	bfbb      	ittet	lt
 80034b6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80034ba:	461e      	movlt	r6, r3
 80034bc:	2300      	movge	r3, #0
 80034be:	232d      	movlt	r3, #45	; 0x2d
 80034c0:	b088      	sub	sp, #32
 80034c2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80034c4:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80034c8:	f027 0720 	bic.w	r7, r7, #32
 80034cc:	2f46      	cmp	r7, #70	; 0x46
 80034ce:	4614      	mov	r4, r2
 80034d0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80034d2:	700b      	strb	r3, [r1, #0]
 80034d4:	d004      	beq.n	80034e0 <__cvt+0x34>
 80034d6:	2f45      	cmp	r7, #69	; 0x45
 80034d8:	d100      	bne.n	80034dc <__cvt+0x30>
 80034da:	3501      	adds	r5, #1
 80034dc:	2302      	movs	r3, #2
 80034de:	e000      	b.n	80034e2 <__cvt+0x36>
 80034e0:	2303      	movs	r3, #3
 80034e2:	aa07      	add	r2, sp, #28
 80034e4:	9204      	str	r2, [sp, #16]
 80034e6:	aa06      	add	r2, sp, #24
 80034e8:	e9cd a202 	strd	sl, r2, [sp, #8]
 80034ec:	e9cd 3500 	strd	r3, r5, [sp]
 80034f0:	4622      	mov	r2, r4
 80034f2:	4633      	mov	r3, r6
 80034f4:	f001 fd7c 	bl	8004ff0 <_dtoa_r>
 80034f8:	2f47      	cmp	r7, #71	; 0x47
 80034fa:	4680      	mov	r8, r0
 80034fc:	d102      	bne.n	8003504 <__cvt+0x58>
 80034fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003500:	07db      	lsls	r3, r3, #31
 8003502:	d526      	bpl.n	8003552 <__cvt+0xa6>
 8003504:	2f46      	cmp	r7, #70	; 0x46
 8003506:	eb08 0905 	add.w	r9, r8, r5
 800350a:	d111      	bne.n	8003530 <__cvt+0x84>
 800350c:	f898 3000 	ldrb.w	r3, [r8]
 8003510:	2b30      	cmp	r3, #48	; 0x30
 8003512:	d10a      	bne.n	800352a <__cvt+0x7e>
 8003514:	2200      	movs	r2, #0
 8003516:	2300      	movs	r3, #0
 8003518:	4620      	mov	r0, r4
 800351a:	4631      	mov	r1, r6
 800351c:	f7fd fa44 	bl	80009a8 <__aeabi_dcmpeq>
 8003520:	b918      	cbnz	r0, 800352a <__cvt+0x7e>
 8003522:	f1c5 0501 	rsb	r5, r5, #1
 8003526:	f8ca 5000 	str.w	r5, [sl]
 800352a:	f8da 3000 	ldr.w	r3, [sl]
 800352e:	4499      	add	r9, r3
 8003530:	2200      	movs	r2, #0
 8003532:	2300      	movs	r3, #0
 8003534:	4620      	mov	r0, r4
 8003536:	4631      	mov	r1, r6
 8003538:	f7fd fa36 	bl	80009a8 <__aeabi_dcmpeq>
 800353c:	b938      	cbnz	r0, 800354e <__cvt+0xa2>
 800353e:	2230      	movs	r2, #48	; 0x30
 8003540:	9b07      	ldr	r3, [sp, #28]
 8003542:	454b      	cmp	r3, r9
 8003544:	d205      	bcs.n	8003552 <__cvt+0xa6>
 8003546:	1c59      	adds	r1, r3, #1
 8003548:	9107      	str	r1, [sp, #28]
 800354a:	701a      	strb	r2, [r3, #0]
 800354c:	e7f8      	b.n	8003540 <__cvt+0x94>
 800354e:	f8cd 901c 	str.w	r9, [sp, #28]
 8003552:	4640      	mov	r0, r8
 8003554:	9b07      	ldr	r3, [sp, #28]
 8003556:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003558:	eba3 0308 	sub.w	r3, r3, r8
 800355c:	6013      	str	r3, [r2, #0]
 800355e:	b008      	add	sp, #32
 8003560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003564 <__exponent>:
 8003564:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003566:	2900      	cmp	r1, #0
 8003568:	bfb4      	ite	lt
 800356a:	232d      	movlt	r3, #45	; 0x2d
 800356c:	232b      	movge	r3, #43	; 0x2b
 800356e:	4604      	mov	r4, r0
 8003570:	bfb8      	it	lt
 8003572:	4249      	neglt	r1, r1
 8003574:	2909      	cmp	r1, #9
 8003576:	f804 2b02 	strb.w	r2, [r4], #2
 800357a:	7043      	strb	r3, [r0, #1]
 800357c:	dd21      	ble.n	80035c2 <__exponent+0x5e>
 800357e:	f10d 0307 	add.w	r3, sp, #7
 8003582:	461f      	mov	r7, r3
 8003584:	260a      	movs	r6, #10
 8003586:	fb91 f5f6 	sdiv	r5, r1, r6
 800358a:	fb06 1115 	mls	r1, r6, r5, r1
 800358e:	2d09      	cmp	r5, #9
 8003590:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8003594:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003598:	f103 32ff 	add.w	r2, r3, #4294967295
 800359c:	4629      	mov	r1, r5
 800359e:	dc09      	bgt.n	80035b4 <__exponent+0x50>
 80035a0:	3130      	adds	r1, #48	; 0x30
 80035a2:	3b02      	subs	r3, #2
 80035a4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80035a8:	42bb      	cmp	r3, r7
 80035aa:	4622      	mov	r2, r4
 80035ac:	d304      	bcc.n	80035b8 <__exponent+0x54>
 80035ae:	1a10      	subs	r0, r2, r0
 80035b0:	b003      	add	sp, #12
 80035b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035b4:	4613      	mov	r3, r2
 80035b6:	e7e6      	b.n	8003586 <__exponent+0x22>
 80035b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035bc:	f804 2b01 	strb.w	r2, [r4], #1
 80035c0:	e7f2      	b.n	80035a8 <__exponent+0x44>
 80035c2:	2330      	movs	r3, #48	; 0x30
 80035c4:	4419      	add	r1, r3
 80035c6:	7083      	strb	r3, [r0, #2]
 80035c8:	1d02      	adds	r2, r0, #4
 80035ca:	70c1      	strb	r1, [r0, #3]
 80035cc:	e7ef      	b.n	80035ae <__exponent+0x4a>
	...

080035d0 <_printf_float>:
 80035d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035d4:	b091      	sub	sp, #68	; 0x44
 80035d6:	460c      	mov	r4, r1
 80035d8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80035da:	4693      	mov	fp, r2
 80035dc:	461e      	mov	r6, r3
 80035de:	4605      	mov	r5, r0
 80035e0:	f002 fde8 	bl	80061b4 <_localeconv_r>
 80035e4:	6803      	ldr	r3, [r0, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	9309      	str	r3, [sp, #36]	; 0x24
 80035ea:	f7fc fdb1 	bl	8000150 <strlen>
 80035ee:	2300      	movs	r3, #0
 80035f0:	930e      	str	r3, [sp, #56]	; 0x38
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	900a      	str	r0, [sp, #40]	; 0x28
 80035f6:	3307      	adds	r3, #7
 80035f8:	f023 0307 	bic.w	r3, r3, #7
 80035fc:	f103 0208 	add.w	r2, r3, #8
 8003600:	f894 8018 	ldrb.w	r8, [r4, #24]
 8003604:	f8d4 a000 	ldr.w	sl, [r4]
 8003608:	603a      	str	r2, [r7, #0]
 800360a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003612:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8003616:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800361a:	930b      	str	r3, [sp, #44]	; 0x2c
 800361c:	f04f 32ff 	mov.w	r2, #4294967295
 8003620:	4ba6      	ldr	r3, [pc, #664]	; (80038bc <_printf_float+0x2ec>)
 8003622:	4638      	mov	r0, r7
 8003624:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003626:	f7fd f9f1 	bl	8000a0c <__aeabi_dcmpun>
 800362a:	bb68      	cbnz	r0, 8003688 <_printf_float+0xb8>
 800362c:	f04f 32ff 	mov.w	r2, #4294967295
 8003630:	4ba2      	ldr	r3, [pc, #648]	; (80038bc <_printf_float+0x2ec>)
 8003632:	4638      	mov	r0, r7
 8003634:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003636:	f7fd f9cb 	bl	80009d0 <__aeabi_dcmple>
 800363a:	bb28      	cbnz	r0, 8003688 <_printf_float+0xb8>
 800363c:	2200      	movs	r2, #0
 800363e:	2300      	movs	r3, #0
 8003640:	4638      	mov	r0, r7
 8003642:	4649      	mov	r1, r9
 8003644:	f7fd f9ba 	bl	80009bc <__aeabi_dcmplt>
 8003648:	b110      	cbz	r0, 8003650 <_printf_float+0x80>
 800364a:	232d      	movs	r3, #45	; 0x2d
 800364c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003650:	4f9b      	ldr	r7, [pc, #620]	; (80038c0 <_printf_float+0x2f0>)
 8003652:	4b9c      	ldr	r3, [pc, #624]	; (80038c4 <_printf_float+0x2f4>)
 8003654:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003658:	bf98      	it	ls
 800365a:	461f      	movls	r7, r3
 800365c:	2303      	movs	r3, #3
 800365e:	f04f 0900 	mov.w	r9, #0
 8003662:	6123      	str	r3, [r4, #16]
 8003664:	f02a 0304 	bic.w	r3, sl, #4
 8003668:	6023      	str	r3, [r4, #0]
 800366a:	9600      	str	r6, [sp, #0]
 800366c:	465b      	mov	r3, fp
 800366e:	aa0f      	add	r2, sp, #60	; 0x3c
 8003670:	4621      	mov	r1, r4
 8003672:	4628      	mov	r0, r5
 8003674:	f000 f9e2 	bl	8003a3c <_printf_common>
 8003678:	3001      	adds	r0, #1
 800367a:	f040 8090 	bne.w	800379e <_printf_float+0x1ce>
 800367e:	f04f 30ff 	mov.w	r0, #4294967295
 8003682:	b011      	add	sp, #68	; 0x44
 8003684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003688:	463a      	mov	r2, r7
 800368a:	464b      	mov	r3, r9
 800368c:	4638      	mov	r0, r7
 800368e:	4649      	mov	r1, r9
 8003690:	f7fd f9bc 	bl	8000a0c <__aeabi_dcmpun>
 8003694:	b110      	cbz	r0, 800369c <_printf_float+0xcc>
 8003696:	4f8c      	ldr	r7, [pc, #560]	; (80038c8 <_printf_float+0x2f8>)
 8003698:	4b8c      	ldr	r3, [pc, #560]	; (80038cc <_printf_float+0x2fc>)
 800369a:	e7db      	b.n	8003654 <_printf_float+0x84>
 800369c:	6863      	ldr	r3, [r4, #4]
 800369e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80036a2:	1c59      	adds	r1, r3, #1
 80036a4:	a80d      	add	r0, sp, #52	; 0x34
 80036a6:	a90e      	add	r1, sp, #56	; 0x38
 80036a8:	d140      	bne.n	800372c <_printf_float+0x15c>
 80036aa:	2306      	movs	r3, #6
 80036ac:	6063      	str	r3, [r4, #4]
 80036ae:	f04f 0c00 	mov.w	ip, #0
 80036b2:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80036b6:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80036ba:	6863      	ldr	r3, [r4, #4]
 80036bc:	6022      	str	r2, [r4, #0]
 80036be:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	463a      	mov	r2, r7
 80036c6:	464b      	mov	r3, r9
 80036c8:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80036cc:	4628      	mov	r0, r5
 80036ce:	f7ff feed 	bl	80034ac <__cvt>
 80036d2:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80036d6:	2b47      	cmp	r3, #71	; 0x47
 80036d8:	4607      	mov	r7, r0
 80036da:	d109      	bne.n	80036f0 <_printf_float+0x120>
 80036dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80036de:	1cd8      	adds	r0, r3, #3
 80036e0:	db02      	blt.n	80036e8 <_printf_float+0x118>
 80036e2:	6862      	ldr	r2, [r4, #4]
 80036e4:	4293      	cmp	r3, r2
 80036e6:	dd47      	ble.n	8003778 <_printf_float+0x1a8>
 80036e8:	f1a8 0802 	sub.w	r8, r8, #2
 80036ec:	fa5f f888 	uxtb.w	r8, r8
 80036f0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80036f4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80036f6:	d824      	bhi.n	8003742 <_printf_float+0x172>
 80036f8:	3901      	subs	r1, #1
 80036fa:	4642      	mov	r2, r8
 80036fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003700:	910d      	str	r1, [sp, #52]	; 0x34
 8003702:	f7ff ff2f 	bl	8003564 <__exponent>
 8003706:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003708:	4681      	mov	r9, r0
 800370a:	1813      	adds	r3, r2, r0
 800370c:	2a01      	cmp	r2, #1
 800370e:	6123      	str	r3, [r4, #16]
 8003710:	dc02      	bgt.n	8003718 <_printf_float+0x148>
 8003712:	6822      	ldr	r2, [r4, #0]
 8003714:	07d1      	lsls	r1, r2, #31
 8003716:	d501      	bpl.n	800371c <_printf_float+0x14c>
 8003718:	3301      	adds	r3, #1
 800371a:	6123      	str	r3, [r4, #16]
 800371c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003720:	2b00      	cmp	r3, #0
 8003722:	d0a2      	beq.n	800366a <_printf_float+0x9a>
 8003724:	232d      	movs	r3, #45	; 0x2d
 8003726:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800372a:	e79e      	b.n	800366a <_printf_float+0x9a>
 800372c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8003730:	f000 816e 	beq.w	8003a10 <_printf_float+0x440>
 8003734:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003738:	d1b9      	bne.n	80036ae <_printf_float+0xde>
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1b7      	bne.n	80036ae <_printf_float+0xde>
 800373e:	2301      	movs	r3, #1
 8003740:	e7b4      	b.n	80036ac <_printf_float+0xdc>
 8003742:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8003746:	d119      	bne.n	800377c <_printf_float+0x1ac>
 8003748:	2900      	cmp	r1, #0
 800374a:	6863      	ldr	r3, [r4, #4]
 800374c:	dd0c      	ble.n	8003768 <_printf_float+0x198>
 800374e:	6121      	str	r1, [r4, #16]
 8003750:	b913      	cbnz	r3, 8003758 <_printf_float+0x188>
 8003752:	6822      	ldr	r2, [r4, #0]
 8003754:	07d2      	lsls	r2, r2, #31
 8003756:	d502      	bpl.n	800375e <_printf_float+0x18e>
 8003758:	3301      	adds	r3, #1
 800375a:	440b      	add	r3, r1
 800375c:	6123      	str	r3, [r4, #16]
 800375e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003760:	f04f 0900 	mov.w	r9, #0
 8003764:	65a3      	str	r3, [r4, #88]	; 0x58
 8003766:	e7d9      	b.n	800371c <_printf_float+0x14c>
 8003768:	b913      	cbnz	r3, 8003770 <_printf_float+0x1a0>
 800376a:	6822      	ldr	r2, [r4, #0]
 800376c:	07d0      	lsls	r0, r2, #31
 800376e:	d501      	bpl.n	8003774 <_printf_float+0x1a4>
 8003770:	3302      	adds	r3, #2
 8003772:	e7f3      	b.n	800375c <_printf_float+0x18c>
 8003774:	2301      	movs	r3, #1
 8003776:	e7f1      	b.n	800375c <_printf_float+0x18c>
 8003778:	f04f 0867 	mov.w	r8, #103	; 0x67
 800377c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003780:	4293      	cmp	r3, r2
 8003782:	db05      	blt.n	8003790 <_printf_float+0x1c0>
 8003784:	6822      	ldr	r2, [r4, #0]
 8003786:	6123      	str	r3, [r4, #16]
 8003788:	07d1      	lsls	r1, r2, #31
 800378a:	d5e8      	bpl.n	800375e <_printf_float+0x18e>
 800378c:	3301      	adds	r3, #1
 800378e:	e7e5      	b.n	800375c <_printf_float+0x18c>
 8003790:	2b00      	cmp	r3, #0
 8003792:	bfcc      	ite	gt
 8003794:	2301      	movgt	r3, #1
 8003796:	f1c3 0302 	rsble	r3, r3, #2
 800379a:	4413      	add	r3, r2
 800379c:	e7de      	b.n	800375c <_printf_float+0x18c>
 800379e:	6823      	ldr	r3, [r4, #0]
 80037a0:	055a      	lsls	r2, r3, #21
 80037a2:	d407      	bmi.n	80037b4 <_printf_float+0x1e4>
 80037a4:	6923      	ldr	r3, [r4, #16]
 80037a6:	463a      	mov	r2, r7
 80037a8:	4659      	mov	r1, fp
 80037aa:	4628      	mov	r0, r5
 80037ac:	47b0      	blx	r6
 80037ae:	3001      	adds	r0, #1
 80037b0:	d129      	bne.n	8003806 <_printf_float+0x236>
 80037b2:	e764      	b.n	800367e <_printf_float+0xae>
 80037b4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80037b8:	f240 80d7 	bls.w	800396a <_printf_float+0x39a>
 80037bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80037c0:	2200      	movs	r2, #0
 80037c2:	2300      	movs	r3, #0
 80037c4:	f7fd f8f0 	bl	80009a8 <__aeabi_dcmpeq>
 80037c8:	b388      	cbz	r0, 800382e <_printf_float+0x25e>
 80037ca:	2301      	movs	r3, #1
 80037cc:	4a40      	ldr	r2, [pc, #256]	; (80038d0 <_printf_float+0x300>)
 80037ce:	4659      	mov	r1, fp
 80037d0:	4628      	mov	r0, r5
 80037d2:	47b0      	blx	r6
 80037d4:	3001      	adds	r0, #1
 80037d6:	f43f af52 	beq.w	800367e <_printf_float+0xae>
 80037da:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80037de:	429a      	cmp	r2, r3
 80037e0:	db02      	blt.n	80037e8 <_printf_float+0x218>
 80037e2:	6823      	ldr	r3, [r4, #0]
 80037e4:	07d8      	lsls	r0, r3, #31
 80037e6:	d50e      	bpl.n	8003806 <_printf_float+0x236>
 80037e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80037ec:	4659      	mov	r1, fp
 80037ee:	4628      	mov	r0, r5
 80037f0:	47b0      	blx	r6
 80037f2:	3001      	adds	r0, #1
 80037f4:	f43f af43 	beq.w	800367e <_printf_float+0xae>
 80037f8:	2700      	movs	r7, #0
 80037fa:	f104 081a 	add.w	r8, r4, #26
 80037fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003800:	3b01      	subs	r3, #1
 8003802:	42bb      	cmp	r3, r7
 8003804:	dc09      	bgt.n	800381a <_printf_float+0x24a>
 8003806:	6823      	ldr	r3, [r4, #0]
 8003808:	079f      	lsls	r7, r3, #30
 800380a:	f100 80fd 	bmi.w	8003a08 <_printf_float+0x438>
 800380e:	68e0      	ldr	r0, [r4, #12]
 8003810:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003812:	4298      	cmp	r0, r3
 8003814:	bfb8      	it	lt
 8003816:	4618      	movlt	r0, r3
 8003818:	e733      	b.n	8003682 <_printf_float+0xb2>
 800381a:	2301      	movs	r3, #1
 800381c:	4642      	mov	r2, r8
 800381e:	4659      	mov	r1, fp
 8003820:	4628      	mov	r0, r5
 8003822:	47b0      	blx	r6
 8003824:	3001      	adds	r0, #1
 8003826:	f43f af2a 	beq.w	800367e <_printf_float+0xae>
 800382a:	3701      	adds	r7, #1
 800382c:	e7e7      	b.n	80037fe <_printf_float+0x22e>
 800382e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003830:	2b00      	cmp	r3, #0
 8003832:	dc2b      	bgt.n	800388c <_printf_float+0x2bc>
 8003834:	2301      	movs	r3, #1
 8003836:	4a26      	ldr	r2, [pc, #152]	; (80038d0 <_printf_float+0x300>)
 8003838:	4659      	mov	r1, fp
 800383a:	4628      	mov	r0, r5
 800383c:	47b0      	blx	r6
 800383e:	3001      	adds	r0, #1
 8003840:	f43f af1d 	beq.w	800367e <_printf_float+0xae>
 8003844:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003846:	b923      	cbnz	r3, 8003852 <_printf_float+0x282>
 8003848:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800384a:	b913      	cbnz	r3, 8003852 <_printf_float+0x282>
 800384c:	6823      	ldr	r3, [r4, #0]
 800384e:	07d9      	lsls	r1, r3, #31
 8003850:	d5d9      	bpl.n	8003806 <_printf_float+0x236>
 8003852:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003856:	4659      	mov	r1, fp
 8003858:	4628      	mov	r0, r5
 800385a:	47b0      	blx	r6
 800385c:	3001      	adds	r0, #1
 800385e:	f43f af0e 	beq.w	800367e <_printf_float+0xae>
 8003862:	f04f 0800 	mov.w	r8, #0
 8003866:	f104 091a 	add.w	r9, r4, #26
 800386a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800386c:	425b      	negs	r3, r3
 800386e:	4543      	cmp	r3, r8
 8003870:	dc01      	bgt.n	8003876 <_printf_float+0x2a6>
 8003872:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003874:	e797      	b.n	80037a6 <_printf_float+0x1d6>
 8003876:	2301      	movs	r3, #1
 8003878:	464a      	mov	r2, r9
 800387a:	4659      	mov	r1, fp
 800387c:	4628      	mov	r0, r5
 800387e:	47b0      	blx	r6
 8003880:	3001      	adds	r0, #1
 8003882:	f43f aefc 	beq.w	800367e <_printf_float+0xae>
 8003886:	f108 0801 	add.w	r8, r8, #1
 800388a:	e7ee      	b.n	800386a <_printf_float+0x29a>
 800388c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800388e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003890:	429a      	cmp	r2, r3
 8003892:	bfa8      	it	ge
 8003894:	461a      	movge	r2, r3
 8003896:	2a00      	cmp	r2, #0
 8003898:	4690      	mov	r8, r2
 800389a:	dd07      	ble.n	80038ac <_printf_float+0x2dc>
 800389c:	4613      	mov	r3, r2
 800389e:	4659      	mov	r1, fp
 80038a0:	463a      	mov	r2, r7
 80038a2:	4628      	mov	r0, r5
 80038a4:	47b0      	blx	r6
 80038a6:	3001      	adds	r0, #1
 80038a8:	f43f aee9 	beq.w	800367e <_printf_float+0xae>
 80038ac:	f104 031a 	add.w	r3, r4, #26
 80038b0:	f04f 0a00 	mov.w	sl, #0
 80038b4:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80038b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80038ba:	e015      	b.n	80038e8 <_printf_float+0x318>
 80038bc:	7fefffff 	.word	0x7fefffff
 80038c0:	08006f8a 	.word	0x08006f8a
 80038c4:	08006f86 	.word	0x08006f86
 80038c8:	08006f92 	.word	0x08006f92
 80038cc:	08006f8e 	.word	0x08006f8e
 80038d0:	08006f96 	.word	0x08006f96
 80038d4:	2301      	movs	r3, #1
 80038d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80038d8:	4659      	mov	r1, fp
 80038da:	4628      	mov	r0, r5
 80038dc:	47b0      	blx	r6
 80038de:	3001      	adds	r0, #1
 80038e0:	f43f aecd 	beq.w	800367e <_printf_float+0xae>
 80038e4:	f10a 0a01 	add.w	sl, sl, #1
 80038e8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80038ec:	eba9 0308 	sub.w	r3, r9, r8
 80038f0:	4553      	cmp	r3, sl
 80038f2:	dcef      	bgt.n	80038d4 <_printf_float+0x304>
 80038f4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80038f8:	429a      	cmp	r2, r3
 80038fa:	444f      	add	r7, r9
 80038fc:	db14      	blt.n	8003928 <_printf_float+0x358>
 80038fe:	6823      	ldr	r3, [r4, #0]
 8003900:	07da      	lsls	r2, r3, #31
 8003902:	d411      	bmi.n	8003928 <_printf_float+0x358>
 8003904:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003906:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003908:	eba3 0209 	sub.w	r2, r3, r9
 800390c:	eba3 0901 	sub.w	r9, r3, r1
 8003910:	4591      	cmp	r9, r2
 8003912:	bfa8      	it	ge
 8003914:	4691      	movge	r9, r2
 8003916:	f1b9 0f00 	cmp.w	r9, #0
 800391a:	dc0d      	bgt.n	8003938 <_printf_float+0x368>
 800391c:	2700      	movs	r7, #0
 800391e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003922:	f104 081a 	add.w	r8, r4, #26
 8003926:	e018      	b.n	800395a <_printf_float+0x38a>
 8003928:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800392c:	4659      	mov	r1, fp
 800392e:	4628      	mov	r0, r5
 8003930:	47b0      	blx	r6
 8003932:	3001      	adds	r0, #1
 8003934:	d1e6      	bne.n	8003904 <_printf_float+0x334>
 8003936:	e6a2      	b.n	800367e <_printf_float+0xae>
 8003938:	464b      	mov	r3, r9
 800393a:	463a      	mov	r2, r7
 800393c:	4659      	mov	r1, fp
 800393e:	4628      	mov	r0, r5
 8003940:	47b0      	blx	r6
 8003942:	3001      	adds	r0, #1
 8003944:	d1ea      	bne.n	800391c <_printf_float+0x34c>
 8003946:	e69a      	b.n	800367e <_printf_float+0xae>
 8003948:	2301      	movs	r3, #1
 800394a:	4642      	mov	r2, r8
 800394c:	4659      	mov	r1, fp
 800394e:	4628      	mov	r0, r5
 8003950:	47b0      	blx	r6
 8003952:	3001      	adds	r0, #1
 8003954:	f43f ae93 	beq.w	800367e <_printf_float+0xae>
 8003958:	3701      	adds	r7, #1
 800395a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800395e:	1a9b      	subs	r3, r3, r2
 8003960:	eba3 0309 	sub.w	r3, r3, r9
 8003964:	42bb      	cmp	r3, r7
 8003966:	dcef      	bgt.n	8003948 <_printf_float+0x378>
 8003968:	e74d      	b.n	8003806 <_printf_float+0x236>
 800396a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800396c:	2a01      	cmp	r2, #1
 800396e:	dc01      	bgt.n	8003974 <_printf_float+0x3a4>
 8003970:	07db      	lsls	r3, r3, #31
 8003972:	d538      	bpl.n	80039e6 <_printf_float+0x416>
 8003974:	2301      	movs	r3, #1
 8003976:	463a      	mov	r2, r7
 8003978:	4659      	mov	r1, fp
 800397a:	4628      	mov	r0, r5
 800397c:	47b0      	blx	r6
 800397e:	3001      	adds	r0, #1
 8003980:	f43f ae7d 	beq.w	800367e <_printf_float+0xae>
 8003984:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003988:	4659      	mov	r1, fp
 800398a:	4628      	mov	r0, r5
 800398c:	47b0      	blx	r6
 800398e:	3001      	adds	r0, #1
 8003990:	f107 0701 	add.w	r7, r7, #1
 8003994:	f43f ae73 	beq.w	800367e <_printf_float+0xae>
 8003998:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800399c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800399e:	2200      	movs	r2, #0
 80039a0:	f103 38ff 	add.w	r8, r3, #4294967295
 80039a4:	2300      	movs	r3, #0
 80039a6:	f7fc ffff 	bl	80009a8 <__aeabi_dcmpeq>
 80039aa:	b9c0      	cbnz	r0, 80039de <_printf_float+0x40e>
 80039ac:	4643      	mov	r3, r8
 80039ae:	463a      	mov	r2, r7
 80039b0:	4659      	mov	r1, fp
 80039b2:	4628      	mov	r0, r5
 80039b4:	47b0      	blx	r6
 80039b6:	3001      	adds	r0, #1
 80039b8:	d10d      	bne.n	80039d6 <_printf_float+0x406>
 80039ba:	e660      	b.n	800367e <_printf_float+0xae>
 80039bc:	2301      	movs	r3, #1
 80039be:	4642      	mov	r2, r8
 80039c0:	4659      	mov	r1, fp
 80039c2:	4628      	mov	r0, r5
 80039c4:	47b0      	blx	r6
 80039c6:	3001      	adds	r0, #1
 80039c8:	f43f ae59 	beq.w	800367e <_printf_float+0xae>
 80039cc:	3701      	adds	r7, #1
 80039ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80039d0:	3b01      	subs	r3, #1
 80039d2:	42bb      	cmp	r3, r7
 80039d4:	dcf2      	bgt.n	80039bc <_printf_float+0x3ec>
 80039d6:	464b      	mov	r3, r9
 80039d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80039dc:	e6e4      	b.n	80037a8 <_printf_float+0x1d8>
 80039de:	2700      	movs	r7, #0
 80039e0:	f104 081a 	add.w	r8, r4, #26
 80039e4:	e7f3      	b.n	80039ce <_printf_float+0x3fe>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e7e1      	b.n	80039ae <_printf_float+0x3de>
 80039ea:	2301      	movs	r3, #1
 80039ec:	4642      	mov	r2, r8
 80039ee:	4659      	mov	r1, fp
 80039f0:	4628      	mov	r0, r5
 80039f2:	47b0      	blx	r6
 80039f4:	3001      	adds	r0, #1
 80039f6:	f43f ae42 	beq.w	800367e <_printf_float+0xae>
 80039fa:	3701      	adds	r7, #1
 80039fc:	68e3      	ldr	r3, [r4, #12]
 80039fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003a00:	1a9b      	subs	r3, r3, r2
 8003a02:	42bb      	cmp	r3, r7
 8003a04:	dcf1      	bgt.n	80039ea <_printf_float+0x41a>
 8003a06:	e702      	b.n	800380e <_printf_float+0x23e>
 8003a08:	2700      	movs	r7, #0
 8003a0a:	f104 0819 	add.w	r8, r4, #25
 8003a0e:	e7f5      	b.n	80039fc <_printf_float+0x42c>
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f43f ae94 	beq.w	800373e <_printf_float+0x16e>
 8003a16:	f04f 0c00 	mov.w	ip, #0
 8003a1a:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003a1e:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8003a22:	6022      	str	r2, [r4, #0]
 8003a24:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8003a28:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	463a      	mov	r2, r7
 8003a30:	464b      	mov	r3, r9
 8003a32:	4628      	mov	r0, r5
 8003a34:	f7ff fd3a 	bl	80034ac <__cvt>
 8003a38:	4607      	mov	r7, r0
 8003a3a:	e64f      	b.n	80036dc <_printf_float+0x10c>

08003a3c <_printf_common>:
 8003a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a40:	4691      	mov	r9, r2
 8003a42:	461f      	mov	r7, r3
 8003a44:	688a      	ldr	r2, [r1, #8]
 8003a46:	690b      	ldr	r3, [r1, #16]
 8003a48:	4606      	mov	r6, r0
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	bfb8      	it	lt
 8003a4e:	4613      	movlt	r3, r2
 8003a50:	f8c9 3000 	str.w	r3, [r9]
 8003a54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a58:	460c      	mov	r4, r1
 8003a5a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a5e:	b112      	cbz	r2, 8003a66 <_printf_common+0x2a>
 8003a60:	3301      	adds	r3, #1
 8003a62:	f8c9 3000 	str.w	r3, [r9]
 8003a66:	6823      	ldr	r3, [r4, #0]
 8003a68:	0699      	lsls	r1, r3, #26
 8003a6a:	bf42      	ittt	mi
 8003a6c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003a70:	3302      	addmi	r3, #2
 8003a72:	f8c9 3000 	strmi.w	r3, [r9]
 8003a76:	6825      	ldr	r5, [r4, #0]
 8003a78:	f015 0506 	ands.w	r5, r5, #6
 8003a7c:	d107      	bne.n	8003a8e <_printf_common+0x52>
 8003a7e:	f104 0a19 	add.w	sl, r4, #25
 8003a82:	68e3      	ldr	r3, [r4, #12]
 8003a84:	f8d9 2000 	ldr.w	r2, [r9]
 8003a88:	1a9b      	subs	r3, r3, r2
 8003a8a:	42ab      	cmp	r3, r5
 8003a8c:	dc29      	bgt.n	8003ae2 <_printf_common+0xa6>
 8003a8e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003a92:	6822      	ldr	r2, [r4, #0]
 8003a94:	3300      	adds	r3, #0
 8003a96:	bf18      	it	ne
 8003a98:	2301      	movne	r3, #1
 8003a9a:	0692      	lsls	r2, r2, #26
 8003a9c:	d42e      	bmi.n	8003afc <_printf_common+0xc0>
 8003a9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003aa2:	4639      	mov	r1, r7
 8003aa4:	4630      	mov	r0, r6
 8003aa6:	47c0      	blx	r8
 8003aa8:	3001      	adds	r0, #1
 8003aaa:	d021      	beq.n	8003af0 <_printf_common+0xb4>
 8003aac:	6823      	ldr	r3, [r4, #0]
 8003aae:	68e5      	ldr	r5, [r4, #12]
 8003ab0:	f003 0306 	and.w	r3, r3, #6
 8003ab4:	2b04      	cmp	r3, #4
 8003ab6:	bf18      	it	ne
 8003ab8:	2500      	movne	r5, #0
 8003aba:	f8d9 2000 	ldr.w	r2, [r9]
 8003abe:	f04f 0900 	mov.w	r9, #0
 8003ac2:	bf08      	it	eq
 8003ac4:	1aad      	subeq	r5, r5, r2
 8003ac6:	68a3      	ldr	r3, [r4, #8]
 8003ac8:	6922      	ldr	r2, [r4, #16]
 8003aca:	bf08      	it	eq
 8003acc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	bfc4      	itt	gt
 8003ad4:	1a9b      	subgt	r3, r3, r2
 8003ad6:	18ed      	addgt	r5, r5, r3
 8003ad8:	341a      	adds	r4, #26
 8003ada:	454d      	cmp	r5, r9
 8003adc:	d11a      	bne.n	8003b14 <_printf_common+0xd8>
 8003ade:	2000      	movs	r0, #0
 8003ae0:	e008      	b.n	8003af4 <_printf_common+0xb8>
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	4652      	mov	r2, sl
 8003ae6:	4639      	mov	r1, r7
 8003ae8:	4630      	mov	r0, r6
 8003aea:	47c0      	blx	r8
 8003aec:	3001      	adds	r0, #1
 8003aee:	d103      	bne.n	8003af8 <_printf_common+0xbc>
 8003af0:	f04f 30ff 	mov.w	r0, #4294967295
 8003af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003af8:	3501      	adds	r5, #1
 8003afa:	e7c2      	b.n	8003a82 <_printf_common+0x46>
 8003afc:	2030      	movs	r0, #48	; 0x30
 8003afe:	18e1      	adds	r1, r4, r3
 8003b00:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b04:	1c5a      	adds	r2, r3, #1
 8003b06:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b0a:	4422      	add	r2, r4
 8003b0c:	3302      	adds	r3, #2
 8003b0e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b12:	e7c4      	b.n	8003a9e <_printf_common+0x62>
 8003b14:	2301      	movs	r3, #1
 8003b16:	4622      	mov	r2, r4
 8003b18:	4639      	mov	r1, r7
 8003b1a:	4630      	mov	r0, r6
 8003b1c:	47c0      	blx	r8
 8003b1e:	3001      	adds	r0, #1
 8003b20:	d0e6      	beq.n	8003af0 <_printf_common+0xb4>
 8003b22:	f109 0901 	add.w	r9, r9, #1
 8003b26:	e7d8      	b.n	8003ada <_printf_common+0x9e>

08003b28 <_printf_i>:
 8003b28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b2c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003b30:	460c      	mov	r4, r1
 8003b32:	7e09      	ldrb	r1, [r1, #24]
 8003b34:	b085      	sub	sp, #20
 8003b36:	296e      	cmp	r1, #110	; 0x6e
 8003b38:	4617      	mov	r7, r2
 8003b3a:	4606      	mov	r6, r0
 8003b3c:	4698      	mov	r8, r3
 8003b3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003b40:	f000 80b3 	beq.w	8003caa <_printf_i+0x182>
 8003b44:	d822      	bhi.n	8003b8c <_printf_i+0x64>
 8003b46:	2963      	cmp	r1, #99	; 0x63
 8003b48:	d036      	beq.n	8003bb8 <_printf_i+0x90>
 8003b4a:	d80a      	bhi.n	8003b62 <_printf_i+0x3a>
 8003b4c:	2900      	cmp	r1, #0
 8003b4e:	f000 80b9 	beq.w	8003cc4 <_printf_i+0x19c>
 8003b52:	2958      	cmp	r1, #88	; 0x58
 8003b54:	f000 8083 	beq.w	8003c5e <_printf_i+0x136>
 8003b58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b5c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003b60:	e032      	b.n	8003bc8 <_printf_i+0xa0>
 8003b62:	2964      	cmp	r1, #100	; 0x64
 8003b64:	d001      	beq.n	8003b6a <_printf_i+0x42>
 8003b66:	2969      	cmp	r1, #105	; 0x69
 8003b68:	d1f6      	bne.n	8003b58 <_printf_i+0x30>
 8003b6a:	6820      	ldr	r0, [r4, #0]
 8003b6c:	6813      	ldr	r3, [r2, #0]
 8003b6e:	0605      	lsls	r5, r0, #24
 8003b70:	f103 0104 	add.w	r1, r3, #4
 8003b74:	d52a      	bpl.n	8003bcc <_printf_i+0xa4>
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6011      	str	r1, [r2, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	da03      	bge.n	8003b86 <_printf_i+0x5e>
 8003b7e:	222d      	movs	r2, #45	; 0x2d
 8003b80:	425b      	negs	r3, r3
 8003b82:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003b86:	486f      	ldr	r0, [pc, #444]	; (8003d44 <_printf_i+0x21c>)
 8003b88:	220a      	movs	r2, #10
 8003b8a:	e039      	b.n	8003c00 <_printf_i+0xd8>
 8003b8c:	2973      	cmp	r1, #115	; 0x73
 8003b8e:	f000 809d 	beq.w	8003ccc <_printf_i+0x1a4>
 8003b92:	d808      	bhi.n	8003ba6 <_printf_i+0x7e>
 8003b94:	296f      	cmp	r1, #111	; 0x6f
 8003b96:	d020      	beq.n	8003bda <_printf_i+0xb2>
 8003b98:	2970      	cmp	r1, #112	; 0x70
 8003b9a:	d1dd      	bne.n	8003b58 <_printf_i+0x30>
 8003b9c:	6823      	ldr	r3, [r4, #0]
 8003b9e:	f043 0320 	orr.w	r3, r3, #32
 8003ba2:	6023      	str	r3, [r4, #0]
 8003ba4:	e003      	b.n	8003bae <_printf_i+0x86>
 8003ba6:	2975      	cmp	r1, #117	; 0x75
 8003ba8:	d017      	beq.n	8003bda <_printf_i+0xb2>
 8003baa:	2978      	cmp	r1, #120	; 0x78
 8003bac:	d1d4      	bne.n	8003b58 <_printf_i+0x30>
 8003bae:	2378      	movs	r3, #120	; 0x78
 8003bb0:	4865      	ldr	r0, [pc, #404]	; (8003d48 <_printf_i+0x220>)
 8003bb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003bb6:	e055      	b.n	8003c64 <_printf_i+0x13c>
 8003bb8:	6813      	ldr	r3, [r2, #0]
 8003bba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bbe:	1d19      	adds	r1, r3, #4
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	6011      	str	r1, [r2, #0]
 8003bc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e08c      	b.n	8003ce6 <_printf_i+0x1be>
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003bd2:	6011      	str	r1, [r2, #0]
 8003bd4:	bf18      	it	ne
 8003bd6:	b21b      	sxthne	r3, r3
 8003bd8:	e7cf      	b.n	8003b7a <_printf_i+0x52>
 8003bda:	6813      	ldr	r3, [r2, #0]
 8003bdc:	6825      	ldr	r5, [r4, #0]
 8003bde:	1d18      	adds	r0, r3, #4
 8003be0:	6010      	str	r0, [r2, #0]
 8003be2:	0628      	lsls	r0, r5, #24
 8003be4:	d501      	bpl.n	8003bea <_printf_i+0xc2>
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	e002      	b.n	8003bf0 <_printf_i+0xc8>
 8003bea:	0668      	lsls	r0, r5, #25
 8003bec:	d5fb      	bpl.n	8003be6 <_printf_i+0xbe>
 8003bee:	881b      	ldrh	r3, [r3, #0]
 8003bf0:	296f      	cmp	r1, #111	; 0x6f
 8003bf2:	bf14      	ite	ne
 8003bf4:	220a      	movne	r2, #10
 8003bf6:	2208      	moveq	r2, #8
 8003bf8:	4852      	ldr	r0, [pc, #328]	; (8003d44 <_printf_i+0x21c>)
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c00:	6865      	ldr	r5, [r4, #4]
 8003c02:	2d00      	cmp	r5, #0
 8003c04:	60a5      	str	r5, [r4, #8]
 8003c06:	f2c0 8095 	blt.w	8003d34 <_printf_i+0x20c>
 8003c0a:	6821      	ldr	r1, [r4, #0]
 8003c0c:	f021 0104 	bic.w	r1, r1, #4
 8003c10:	6021      	str	r1, [r4, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d13d      	bne.n	8003c92 <_printf_i+0x16a>
 8003c16:	2d00      	cmp	r5, #0
 8003c18:	f040 808e 	bne.w	8003d38 <_printf_i+0x210>
 8003c1c:	4665      	mov	r5, ip
 8003c1e:	2a08      	cmp	r2, #8
 8003c20:	d10b      	bne.n	8003c3a <_printf_i+0x112>
 8003c22:	6823      	ldr	r3, [r4, #0]
 8003c24:	07db      	lsls	r3, r3, #31
 8003c26:	d508      	bpl.n	8003c3a <_printf_i+0x112>
 8003c28:	6923      	ldr	r3, [r4, #16]
 8003c2a:	6862      	ldr	r2, [r4, #4]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	bfde      	ittt	le
 8003c30:	2330      	movle	r3, #48	; 0x30
 8003c32:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003c36:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003c3a:	ebac 0305 	sub.w	r3, ip, r5
 8003c3e:	6123      	str	r3, [r4, #16]
 8003c40:	f8cd 8000 	str.w	r8, [sp]
 8003c44:	463b      	mov	r3, r7
 8003c46:	aa03      	add	r2, sp, #12
 8003c48:	4621      	mov	r1, r4
 8003c4a:	4630      	mov	r0, r6
 8003c4c:	f7ff fef6 	bl	8003a3c <_printf_common>
 8003c50:	3001      	adds	r0, #1
 8003c52:	d14d      	bne.n	8003cf0 <_printf_i+0x1c8>
 8003c54:	f04f 30ff 	mov.w	r0, #4294967295
 8003c58:	b005      	add	sp, #20
 8003c5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003c5e:	4839      	ldr	r0, [pc, #228]	; (8003d44 <_printf_i+0x21c>)
 8003c60:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003c64:	6813      	ldr	r3, [r2, #0]
 8003c66:	6821      	ldr	r1, [r4, #0]
 8003c68:	1d1d      	adds	r5, r3, #4
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6015      	str	r5, [r2, #0]
 8003c6e:	060a      	lsls	r2, r1, #24
 8003c70:	d50b      	bpl.n	8003c8a <_printf_i+0x162>
 8003c72:	07ca      	lsls	r2, r1, #31
 8003c74:	bf44      	itt	mi
 8003c76:	f041 0120 	orrmi.w	r1, r1, #32
 8003c7a:	6021      	strmi	r1, [r4, #0]
 8003c7c:	b91b      	cbnz	r3, 8003c86 <_printf_i+0x15e>
 8003c7e:	6822      	ldr	r2, [r4, #0]
 8003c80:	f022 0220 	bic.w	r2, r2, #32
 8003c84:	6022      	str	r2, [r4, #0]
 8003c86:	2210      	movs	r2, #16
 8003c88:	e7b7      	b.n	8003bfa <_printf_i+0xd2>
 8003c8a:	064d      	lsls	r5, r1, #25
 8003c8c:	bf48      	it	mi
 8003c8e:	b29b      	uxthmi	r3, r3
 8003c90:	e7ef      	b.n	8003c72 <_printf_i+0x14a>
 8003c92:	4665      	mov	r5, ip
 8003c94:	fbb3 f1f2 	udiv	r1, r3, r2
 8003c98:	fb02 3311 	mls	r3, r2, r1, r3
 8003c9c:	5cc3      	ldrb	r3, [r0, r3]
 8003c9e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	2900      	cmp	r1, #0
 8003ca6:	d1f5      	bne.n	8003c94 <_printf_i+0x16c>
 8003ca8:	e7b9      	b.n	8003c1e <_printf_i+0xf6>
 8003caa:	6813      	ldr	r3, [r2, #0]
 8003cac:	6825      	ldr	r5, [r4, #0]
 8003cae:	1d18      	adds	r0, r3, #4
 8003cb0:	6961      	ldr	r1, [r4, #20]
 8003cb2:	6010      	str	r0, [r2, #0]
 8003cb4:	0628      	lsls	r0, r5, #24
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	d501      	bpl.n	8003cbe <_printf_i+0x196>
 8003cba:	6019      	str	r1, [r3, #0]
 8003cbc:	e002      	b.n	8003cc4 <_printf_i+0x19c>
 8003cbe:	066a      	lsls	r2, r5, #25
 8003cc0:	d5fb      	bpl.n	8003cba <_printf_i+0x192>
 8003cc2:	8019      	strh	r1, [r3, #0]
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	4665      	mov	r5, ip
 8003cc8:	6123      	str	r3, [r4, #16]
 8003cca:	e7b9      	b.n	8003c40 <_printf_i+0x118>
 8003ccc:	6813      	ldr	r3, [r2, #0]
 8003cce:	1d19      	adds	r1, r3, #4
 8003cd0:	6011      	str	r1, [r2, #0]
 8003cd2:	681d      	ldr	r5, [r3, #0]
 8003cd4:	6862      	ldr	r2, [r4, #4]
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	4628      	mov	r0, r5
 8003cda:	f002 fa93 	bl	8006204 <memchr>
 8003cde:	b108      	cbz	r0, 8003ce4 <_printf_i+0x1bc>
 8003ce0:	1b40      	subs	r0, r0, r5
 8003ce2:	6060      	str	r0, [r4, #4]
 8003ce4:	6863      	ldr	r3, [r4, #4]
 8003ce6:	6123      	str	r3, [r4, #16]
 8003ce8:	2300      	movs	r3, #0
 8003cea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cee:	e7a7      	b.n	8003c40 <_printf_i+0x118>
 8003cf0:	6923      	ldr	r3, [r4, #16]
 8003cf2:	462a      	mov	r2, r5
 8003cf4:	4639      	mov	r1, r7
 8003cf6:	4630      	mov	r0, r6
 8003cf8:	47c0      	blx	r8
 8003cfa:	3001      	adds	r0, #1
 8003cfc:	d0aa      	beq.n	8003c54 <_printf_i+0x12c>
 8003cfe:	6823      	ldr	r3, [r4, #0]
 8003d00:	079b      	lsls	r3, r3, #30
 8003d02:	d413      	bmi.n	8003d2c <_printf_i+0x204>
 8003d04:	68e0      	ldr	r0, [r4, #12]
 8003d06:	9b03      	ldr	r3, [sp, #12]
 8003d08:	4298      	cmp	r0, r3
 8003d0a:	bfb8      	it	lt
 8003d0c:	4618      	movlt	r0, r3
 8003d0e:	e7a3      	b.n	8003c58 <_printf_i+0x130>
 8003d10:	2301      	movs	r3, #1
 8003d12:	464a      	mov	r2, r9
 8003d14:	4639      	mov	r1, r7
 8003d16:	4630      	mov	r0, r6
 8003d18:	47c0      	blx	r8
 8003d1a:	3001      	adds	r0, #1
 8003d1c:	d09a      	beq.n	8003c54 <_printf_i+0x12c>
 8003d1e:	3501      	adds	r5, #1
 8003d20:	68e3      	ldr	r3, [r4, #12]
 8003d22:	9a03      	ldr	r2, [sp, #12]
 8003d24:	1a9b      	subs	r3, r3, r2
 8003d26:	42ab      	cmp	r3, r5
 8003d28:	dcf2      	bgt.n	8003d10 <_printf_i+0x1e8>
 8003d2a:	e7eb      	b.n	8003d04 <_printf_i+0x1dc>
 8003d2c:	2500      	movs	r5, #0
 8003d2e:	f104 0919 	add.w	r9, r4, #25
 8003d32:	e7f5      	b.n	8003d20 <_printf_i+0x1f8>
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1ac      	bne.n	8003c92 <_printf_i+0x16a>
 8003d38:	7803      	ldrb	r3, [r0, #0]
 8003d3a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d42:	e76c      	b.n	8003c1e <_printf_i+0xf6>
 8003d44:	08006f98 	.word	0x08006f98
 8003d48:	08006fa9 	.word	0x08006fa9

08003d4c <_scanf_float>:
 8003d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d50:	469a      	mov	sl, r3
 8003d52:	688b      	ldr	r3, [r1, #8]
 8003d54:	4616      	mov	r6, r2
 8003d56:	1e5a      	subs	r2, r3, #1
 8003d58:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003d5c:	bf88      	it	hi
 8003d5e:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8003d62:	b087      	sub	sp, #28
 8003d64:	bf85      	ittet	hi
 8003d66:	189b      	addhi	r3, r3, r2
 8003d68:	9301      	strhi	r3, [sp, #4]
 8003d6a:	2300      	movls	r3, #0
 8003d6c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003d70:	4688      	mov	r8, r1
 8003d72:	f04f 0b00 	mov.w	fp, #0
 8003d76:	bf8c      	ite	hi
 8003d78:	608b      	strhi	r3, [r1, #8]
 8003d7a:	9301      	strls	r3, [sp, #4]
 8003d7c:	680b      	ldr	r3, [r1, #0]
 8003d7e:	4607      	mov	r7, r0
 8003d80:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003d84:	f848 3b1c 	str.w	r3, [r8], #28
 8003d88:	460c      	mov	r4, r1
 8003d8a:	4645      	mov	r5, r8
 8003d8c:	465a      	mov	r2, fp
 8003d8e:	46d9      	mov	r9, fp
 8003d90:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8003d94:	f8cd b008 	str.w	fp, [sp, #8]
 8003d98:	68a1      	ldr	r1, [r4, #8]
 8003d9a:	b181      	cbz	r1, 8003dbe <_scanf_float+0x72>
 8003d9c:	6833      	ldr	r3, [r6, #0]
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	2b49      	cmp	r3, #73	; 0x49
 8003da2:	d071      	beq.n	8003e88 <_scanf_float+0x13c>
 8003da4:	d84d      	bhi.n	8003e42 <_scanf_float+0xf6>
 8003da6:	2b39      	cmp	r3, #57	; 0x39
 8003da8:	d840      	bhi.n	8003e2c <_scanf_float+0xe0>
 8003daa:	2b31      	cmp	r3, #49	; 0x31
 8003dac:	f080 8088 	bcs.w	8003ec0 <_scanf_float+0x174>
 8003db0:	2b2d      	cmp	r3, #45	; 0x2d
 8003db2:	f000 8090 	beq.w	8003ed6 <_scanf_float+0x18a>
 8003db6:	d815      	bhi.n	8003de4 <_scanf_float+0x98>
 8003db8:	2b2b      	cmp	r3, #43	; 0x2b
 8003dba:	f000 808c 	beq.w	8003ed6 <_scanf_float+0x18a>
 8003dbe:	f1b9 0f00 	cmp.w	r9, #0
 8003dc2:	d003      	beq.n	8003dcc <_scanf_float+0x80>
 8003dc4:	6823      	ldr	r3, [r4, #0]
 8003dc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dca:	6023      	str	r3, [r4, #0]
 8003dcc:	3a01      	subs	r2, #1
 8003dce:	2a01      	cmp	r2, #1
 8003dd0:	f200 80ea 	bhi.w	8003fa8 <_scanf_float+0x25c>
 8003dd4:	4545      	cmp	r5, r8
 8003dd6:	f200 80dc 	bhi.w	8003f92 <_scanf_float+0x246>
 8003dda:	2601      	movs	r6, #1
 8003ddc:	4630      	mov	r0, r6
 8003dde:	b007      	add	sp, #28
 8003de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003de4:	2b2e      	cmp	r3, #46	; 0x2e
 8003de6:	f000 809f 	beq.w	8003f28 <_scanf_float+0x1dc>
 8003dea:	2b30      	cmp	r3, #48	; 0x30
 8003dec:	d1e7      	bne.n	8003dbe <_scanf_float+0x72>
 8003dee:	6820      	ldr	r0, [r4, #0]
 8003df0:	f410 7f80 	tst.w	r0, #256	; 0x100
 8003df4:	d064      	beq.n	8003ec0 <_scanf_float+0x174>
 8003df6:	9b01      	ldr	r3, [sp, #4]
 8003df8:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8003dfc:	6020      	str	r0, [r4, #0]
 8003dfe:	f109 0901 	add.w	r9, r9, #1
 8003e02:	b11b      	cbz	r3, 8003e0c <_scanf_float+0xc0>
 8003e04:	3b01      	subs	r3, #1
 8003e06:	3101      	adds	r1, #1
 8003e08:	9301      	str	r3, [sp, #4]
 8003e0a:	60a1      	str	r1, [r4, #8]
 8003e0c:	68a3      	ldr	r3, [r4, #8]
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	60a3      	str	r3, [r4, #8]
 8003e12:	6923      	ldr	r3, [r4, #16]
 8003e14:	3301      	adds	r3, #1
 8003e16:	6123      	str	r3, [r4, #16]
 8003e18:	6873      	ldr	r3, [r6, #4]
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	6073      	str	r3, [r6, #4]
 8003e20:	f340 80ac 	ble.w	8003f7c <_scanf_float+0x230>
 8003e24:	6833      	ldr	r3, [r6, #0]
 8003e26:	3301      	adds	r3, #1
 8003e28:	6033      	str	r3, [r6, #0]
 8003e2a:	e7b5      	b.n	8003d98 <_scanf_float+0x4c>
 8003e2c:	2b45      	cmp	r3, #69	; 0x45
 8003e2e:	f000 8085 	beq.w	8003f3c <_scanf_float+0x1f0>
 8003e32:	2b46      	cmp	r3, #70	; 0x46
 8003e34:	d06a      	beq.n	8003f0c <_scanf_float+0x1c0>
 8003e36:	2b41      	cmp	r3, #65	; 0x41
 8003e38:	d1c1      	bne.n	8003dbe <_scanf_float+0x72>
 8003e3a:	2a01      	cmp	r2, #1
 8003e3c:	d1bf      	bne.n	8003dbe <_scanf_float+0x72>
 8003e3e:	2202      	movs	r2, #2
 8003e40:	e046      	b.n	8003ed0 <_scanf_float+0x184>
 8003e42:	2b65      	cmp	r3, #101	; 0x65
 8003e44:	d07a      	beq.n	8003f3c <_scanf_float+0x1f0>
 8003e46:	d818      	bhi.n	8003e7a <_scanf_float+0x12e>
 8003e48:	2b54      	cmp	r3, #84	; 0x54
 8003e4a:	d066      	beq.n	8003f1a <_scanf_float+0x1ce>
 8003e4c:	d811      	bhi.n	8003e72 <_scanf_float+0x126>
 8003e4e:	2b4e      	cmp	r3, #78	; 0x4e
 8003e50:	d1b5      	bne.n	8003dbe <_scanf_float+0x72>
 8003e52:	2a00      	cmp	r2, #0
 8003e54:	d146      	bne.n	8003ee4 <_scanf_float+0x198>
 8003e56:	f1b9 0f00 	cmp.w	r9, #0
 8003e5a:	d145      	bne.n	8003ee8 <_scanf_float+0x19c>
 8003e5c:	6821      	ldr	r1, [r4, #0]
 8003e5e:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8003e62:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8003e66:	d13f      	bne.n	8003ee8 <_scanf_float+0x19c>
 8003e68:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8003e6c:	6021      	str	r1, [r4, #0]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	e02e      	b.n	8003ed0 <_scanf_float+0x184>
 8003e72:	2b59      	cmp	r3, #89	; 0x59
 8003e74:	d01e      	beq.n	8003eb4 <_scanf_float+0x168>
 8003e76:	2b61      	cmp	r3, #97	; 0x61
 8003e78:	e7de      	b.n	8003e38 <_scanf_float+0xec>
 8003e7a:	2b6e      	cmp	r3, #110	; 0x6e
 8003e7c:	d0e9      	beq.n	8003e52 <_scanf_float+0x106>
 8003e7e:	d815      	bhi.n	8003eac <_scanf_float+0x160>
 8003e80:	2b66      	cmp	r3, #102	; 0x66
 8003e82:	d043      	beq.n	8003f0c <_scanf_float+0x1c0>
 8003e84:	2b69      	cmp	r3, #105	; 0x69
 8003e86:	d19a      	bne.n	8003dbe <_scanf_float+0x72>
 8003e88:	f1bb 0f00 	cmp.w	fp, #0
 8003e8c:	d138      	bne.n	8003f00 <_scanf_float+0x1b4>
 8003e8e:	f1b9 0f00 	cmp.w	r9, #0
 8003e92:	d197      	bne.n	8003dc4 <_scanf_float+0x78>
 8003e94:	6821      	ldr	r1, [r4, #0]
 8003e96:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8003e9a:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8003e9e:	d195      	bne.n	8003dcc <_scanf_float+0x80>
 8003ea0:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8003ea4:	6021      	str	r1, [r4, #0]
 8003ea6:	f04f 0b01 	mov.w	fp, #1
 8003eaa:	e011      	b.n	8003ed0 <_scanf_float+0x184>
 8003eac:	2b74      	cmp	r3, #116	; 0x74
 8003eae:	d034      	beq.n	8003f1a <_scanf_float+0x1ce>
 8003eb0:	2b79      	cmp	r3, #121	; 0x79
 8003eb2:	d184      	bne.n	8003dbe <_scanf_float+0x72>
 8003eb4:	f1bb 0f07 	cmp.w	fp, #7
 8003eb8:	d181      	bne.n	8003dbe <_scanf_float+0x72>
 8003eba:	f04f 0b08 	mov.w	fp, #8
 8003ebe:	e007      	b.n	8003ed0 <_scanf_float+0x184>
 8003ec0:	eb12 0f0b 	cmn.w	r2, fp
 8003ec4:	f47f af7b 	bne.w	8003dbe <_scanf_float+0x72>
 8003ec8:	6821      	ldr	r1, [r4, #0]
 8003eca:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8003ece:	6021      	str	r1, [r4, #0]
 8003ed0:	702b      	strb	r3, [r5, #0]
 8003ed2:	3501      	adds	r5, #1
 8003ed4:	e79a      	b.n	8003e0c <_scanf_float+0xc0>
 8003ed6:	6821      	ldr	r1, [r4, #0]
 8003ed8:	0608      	lsls	r0, r1, #24
 8003eda:	f57f af70 	bpl.w	8003dbe <_scanf_float+0x72>
 8003ede:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003ee2:	e7f4      	b.n	8003ece <_scanf_float+0x182>
 8003ee4:	2a02      	cmp	r2, #2
 8003ee6:	d047      	beq.n	8003f78 <_scanf_float+0x22c>
 8003ee8:	f1bb 0f01 	cmp.w	fp, #1
 8003eec:	d003      	beq.n	8003ef6 <_scanf_float+0x1aa>
 8003eee:	f1bb 0f04 	cmp.w	fp, #4
 8003ef2:	f47f af64 	bne.w	8003dbe <_scanf_float+0x72>
 8003ef6:	f10b 0b01 	add.w	fp, fp, #1
 8003efa:	fa5f fb8b 	uxtb.w	fp, fp
 8003efe:	e7e7      	b.n	8003ed0 <_scanf_float+0x184>
 8003f00:	f1bb 0f03 	cmp.w	fp, #3
 8003f04:	d0f7      	beq.n	8003ef6 <_scanf_float+0x1aa>
 8003f06:	f1bb 0f05 	cmp.w	fp, #5
 8003f0a:	e7f2      	b.n	8003ef2 <_scanf_float+0x1a6>
 8003f0c:	f1bb 0f02 	cmp.w	fp, #2
 8003f10:	f47f af55 	bne.w	8003dbe <_scanf_float+0x72>
 8003f14:	f04f 0b03 	mov.w	fp, #3
 8003f18:	e7da      	b.n	8003ed0 <_scanf_float+0x184>
 8003f1a:	f1bb 0f06 	cmp.w	fp, #6
 8003f1e:	f47f af4e 	bne.w	8003dbe <_scanf_float+0x72>
 8003f22:	f04f 0b07 	mov.w	fp, #7
 8003f26:	e7d3      	b.n	8003ed0 <_scanf_float+0x184>
 8003f28:	6821      	ldr	r1, [r4, #0]
 8003f2a:	0588      	lsls	r0, r1, #22
 8003f2c:	f57f af47 	bpl.w	8003dbe <_scanf_float+0x72>
 8003f30:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8003f34:	6021      	str	r1, [r4, #0]
 8003f36:	f8cd 9008 	str.w	r9, [sp, #8]
 8003f3a:	e7c9      	b.n	8003ed0 <_scanf_float+0x184>
 8003f3c:	6821      	ldr	r1, [r4, #0]
 8003f3e:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8003f42:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8003f46:	d006      	beq.n	8003f56 <_scanf_float+0x20a>
 8003f48:	0548      	lsls	r0, r1, #21
 8003f4a:	f57f af38 	bpl.w	8003dbe <_scanf_float+0x72>
 8003f4e:	f1b9 0f00 	cmp.w	r9, #0
 8003f52:	f43f af3b 	beq.w	8003dcc <_scanf_float+0x80>
 8003f56:	0588      	lsls	r0, r1, #22
 8003f58:	bf58      	it	pl
 8003f5a:	9802      	ldrpl	r0, [sp, #8]
 8003f5c:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8003f60:	bf58      	it	pl
 8003f62:	eba9 0000 	subpl.w	r0, r9, r0
 8003f66:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8003f6a:	bf58      	it	pl
 8003f6c:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8003f70:	6021      	str	r1, [r4, #0]
 8003f72:	f04f 0900 	mov.w	r9, #0
 8003f76:	e7ab      	b.n	8003ed0 <_scanf_float+0x184>
 8003f78:	2203      	movs	r2, #3
 8003f7a:	e7a9      	b.n	8003ed0 <_scanf_float+0x184>
 8003f7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003f80:	4631      	mov	r1, r6
 8003f82:	4638      	mov	r0, r7
 8003f84:	9205      	str	r2, [sp, #20]
 8003f86:	4798      	blx	r3
 8003f88:	9a05      	ldr	r2, [sp, #20]
 8003f8a:	2800      	cmp	r0, #0
 8003f8c:	f43f af04 	beq.w	8003d98 <_scanf_float+0x4c>
 8003f90:	e715      	b.n	8003dbe <_scanf_float+0x72>
 8003f92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003f96:	4632      	mov	r2, r6
 8003f98:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8003f9c:	4638      	mov	r0, r7
 8003f9e:	4798      	blx	r3
 8003fa0:	6923      	ldr	r3, [r4, #16]
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	6123      	str	r3, [r4, #16]
 8003fa6:	e715      	b.n	8003dd4 <_scanf_float+0x88>
 8003fa8:	f10b 33ff 	add.w	r3, fp, #4294967295
 8003fac:	2b06      	cmp	r3, #6
 8003fae:	d80a      	bhi.n	8003fc6 <_scanf_float+0x27a>
 8003fb0:	f1bb 0f02 	cmp.w	fp, #2
 8003fb4:	d967      	bls.n	8004086 <_scanf_float+0x33a>
 8003fb6:	f1ab 0b03 	sub.w	fp, fp, #3
 8003fba:	fa5f fb8b 	uxtb.w	fp, fp
 8003fbe:	eba5 0b0b 	sub.w	fp, r5, fp
 8003fc2:	455d      	cmp	r5, fp
 8003fc4:	d14a      	bne.n	800405c <_scanf_float+0x310>
 8003fc6:	6823      	ldr	r3, [r4, #0]
 8003fc8:	05da      	lsls	r2, r3, #23
 8003fca:	d51f      	bpl.n	800400c <_scanf_float+0x2c0>
 8003fcc:	055b      	lsls	r3, r3, #21
 8003fce:	d467      	bmi.n	80040a0 <_scanf_float+0x354>
 8003fd0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8003fd4:	6923      	ldr	r3, [r4, #16]
 8003fd6:	2965      	cmp	r1, #101	; 0x65
 8003fd8:	f103 33ff 	add.w	r3, r3, #4294967295
 8003fdc:	f105 3bff 	add.w	fp, r5, #4294967295
 8003fe0:	6123      	str	r3, [r4, #16]
 8003fe2:	d00d      	beq.n	8004000 <_scanf_float+0x2b4>
 8003fe4:	2945      	cmp	r1, #69	; 0x45
 8003fe6:	d00b      	beq.n	8004000 <_scanf_float+0x2b4>
 8003fe8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003fec:	4632      	mov	r2, r6
 8003fee:	4638      	mov	r0, r7
 8003ff0:	4798      	blx	r3
 8003ff2:	6923      	ldr	r3, [r4, #16]
 8003ff4:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	f1a5 0b02 	sub.w	fp, r5, #2
 8003ffe:	6123      	str	r3, [r4, #16]
 8004000:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004004:	4632      	mov	r2, r6
 8004006:	4638      	mov	r0, r7
 8004008:	4798      	blx	r3
 800400a:	465d      	mov	r5, fp
 800400c:	6826      	ldr	r6, [r4, #0]
 800400e:	f016 0610 	ands.w	r6, r6, #16
 8004012:	d176      	bne.n	8004102 <_scanf_float+0x3b6>
 8004014:	702e      	strb	r6, [r5, #0]
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800401c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004020:	d141      	bne.n	80040a6 <_scanf_float+0x35a>
 8004022:	9b02      	ldr	r3, [sp, #8]
 8004024:	eba9 0303 	sub.w	r3, r9, r3
 8004028:	425a      	negs	r2, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d148      	bne.n	80040c0 <_scanf_float+0x374>
 800402e:	4641      	mov	r1, r8
 8004030:	2200      	movs	r2, #0
 8004032:	4638      	mov	r0, r7
 8004034:	f000 feb0 	bl	8004d98 <_strtod_r>
 8004038:	6825      	ldr	r5, [r4, #0]
 800403a:	4680      	mov	r8, r0
 800403c:	f015 0f02 	tst.w	r5, #2
 8004040:	4689      	mov	r9, r1
 8004042:	f8da 3000 	ldr.w	r3, [sl]
 8004046:	d046      	beq.n	80040d6 <_scanf_float+0x38a>
 8004048:	1d1a      	adds	r2, r3, #4
 800404a:	f8ca 2000 	str.w	r2, [sl]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	e9c3 8900 	strd	r8, r9, [r3]
 8004054:	68e3      	ldr	r3, [r4, #12]
 8004056:	3301      	adds	r3, #1
 8004058:	60e3      	str	r3, [r4, #12]
 800405a:	e6bf      	b.n	8003ddc <_scanf_float+0x90>
 800405c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004060:	4632      	mov	r2, r6
 8004062:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004066:	4638      	mov	r0, r7
 8004068:	4798      	blx	r3
 800406a:	6923      	ldr	r3, [r4, #16]
 800406c:	3b01      	subs	r3, #1
 800406e:	6123      	str	r3, [r4, #16]
 8004070:	e7a7      	b.n	8003fc2 <_scanf_float+0x276>
 8004072:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004076:	4632      	mov	r2, r6
 8004078:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800407c:	4638      	mov	r0, r7
 800407e:	4798      	blx	r3
 8004080:	6923      	ldr	r3, [r4, #16]
 8004082:	3b01      	subs	r3, #1
 8004084:	6123      	str	r3, [r4, #16]
 8004086:	4545      	cmp	r5, r8
 8004088:	d8f3      	bhi.n	8004072 <_scanf_float+0x326>
 800408a:	e6a6      	b.n	8003dda <_scanf_float+0x8e>
 800408c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004090:	4632      	mov	r2, r6
 8004092:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004096:	4638      	mov	r0, r7
 8004098:	4798      	blx	r3
 800409a:	6923      	ldr	r3, [r4, #16]
 800409c:	3b01      	subs	r3, #1
 800409e:	6123      	str	r3, [r4, #16]
 80040a0:	4545      	cmp	r5, r8
 80040a2:	d8f3      	bhi.n	800408c <_scanf_float+0x340>
 80040a4:	e699      	b.n	8003dda <_scanf_float+0x8e>
 80040a6:	9b03      	ldr	r3, [sp, #12]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d0c0      	beq.n	800402e <_scanf_float+0x2e2>
 80040ac:	9904      	ldr	r1, [sp, #16]
 80040ae:	230a      	movs	r3, #10
 80040b0:	4632      	mov	r2, r6
 80040b2:	3101      	adds	r1, #1
 80040b4:	4638      	mov	r0, r7
 80040b6:	f000 fefb 	bl	8004eb0 <_strtol_r>
 80040ba:	9b03      	ldr	r3, [sp, #12]
 80040bc:	9d04      	ldr	r5, [sp, #16]
 80040be:	1ac2      	subs	r2, r0, r3
 80040c0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80040c4:	429d      	cmp	r5, r3
 80040c6:	bf28      	it	cs
 80040c8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80040cc:	490e      	ldr	r1, [pc, #56]	; (8004108 <_scanf_float+0x3bc>)
 80040ce:	4628      	mov	r0, r5
 80040d0:	f000 f820 	bl	8004114 <siprintf>
 80040d4:	e7ab      	b.n	800402e <_scanf_float+0x2e2>
 80040d6:	1d1f      	adds	r7, r3, #4
 80040d8:	f015 0504 	ands.w	r5, r5, #4
 80040dc:	f8ca 7000 	str.w	r7, [sl]
 80040e0:	d1b5      	bne.n	800404e <_scanf_float+0x302>
 80040e2:	681f      	ldr	r7, [r3, #0]
 80040e4:	4602      	mov	r2, r0
 80040e6:	460b      	mov	r3, r1
 80040e8:	f7fc fc90 	bl	8000a0c <__aeabi_dcmpun>
 80040ec:	b120      	cbz	r0, 80040f8 <_scanf_float+0x3ac>
 80040ee:	4628      	mov	r0, r5
 80040f0:	f000 f80c 	bl	800410c <nanf>
 80040f4:	6038      	str	r0, [r7, #0]
 80040f6:	e7ad      	b.n	8004054 <_scanf_float+0x308>
 80040f8:	4640      	mov	r0, r8
 80040fa:	4649      	mov	r1, r9
 80040fc:	f7fc fce4 	bl	8000ac8 <__aeabi_d2f>
 8004100:	e7f8      	b.n	80040f4 <_scanf_float+0x3a8>
 8004102:	2600      	movs	r6, #0
 8004104:	e66a      	b.n	8003ddc <_scanf_float+0x90>
 8004106:	bf00      	nop
 8004108:	08006fba 	.word	0x08006fba

0800410c <nanf>:
 800410c:	4800      	ldr	r0, [pc, #0]	; (8004110 <nanf+0x4>)
 800410e:	4770      	bx	lr
 8004110:	7fc00000 	.word	0x7fc00000

08004114 <siprintf>:
 8004114:	b40e      	push	{r1, r2, r3}
 8004116:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800411a:	b500      	push	{lr}
 800411c:	b09c      	sub	sp, #112	; 0x70
 800411e:	ab1d      	add	r3, sp, #116	; 0x74
 8004120:	9002      	str	r0, [sp, #8]
 8004122:	9006      	str	r0, [sp, #24]
 8004124:	9107      	str	r1, [sp, #28]
 8004126:	9104      	str	r1, [sp, #16]
 8004128:	4808      	ldr	r0, [pc, #32]	; (800414c <siprintf+0x38>)
 800412a:	4909      	ldr	r1, [pc, #36]	; (8004150 <siprintf+0x3c>)
 800412c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004130:	9105      	str	r1, [sp, #20]
 8004132:	6800      	ldr	r0, [r0, #0]
 8004134:	a902      	add	r1, sp, #8
 8004136:	9301      	str	r3, [sp, #4]
 8004138:	f002 fd84 	bl	8006c44 <_svfiprintf_r>
 800413c:	2200      	movs	r2, #0
 800413e:	9b02      	ldr	r3, [sp, #8]
 8004140:	701a      	strb	r2, [r3, #0]
 8004142:	b01c      	add	sp, #112	; 0x70
 8004144:	f85d eb04 	ldr.w	lr, [sp], #4
 8004148:	b003      	add	sp, #12
 800414a:	4770      	bx	lr
 800414c:	2000000c 	.word	0x2000000c
 8004150:	ffff0208 	.word	0xffff0208

08004154 <sulp>:
 8004154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004158:	460f      	mov	r7, r1
 800415a:	4690      	mov	r8, r2
 800415c:	f002 fb36 	bl	80067cc <__ulp>
 8004160:	4604      	mov	r4, r0
 8004162:	460d      	mov	r5, r1
 8004164:	f1b8 0f00 	cmp.w	r8, #0
 8004168:	d011      	beq.n	800418e <sulp+0x3a>
 800416a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800416e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004172:	2b00      	cmp	r3, #0
 8004174:	dd0b      	ble.n	800418e <sulp+0x3a>
 8004176:	2400      	movs	r4, #0
 8004178:	051b      	lsls	r3, r3, #20
 800417a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800417e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004182:	4622      	mov	r2, r4
 8004184:	462b      	mov	r3, r5
 8004186:	f7fc f9a7 	bl	80004d8 <__aeabi_dmul>
 800418a:	4604      	mov	r4, r0
 800418c:	460d      	mov	r5, r1
 800418e:	4620      	mov	r0, r4
 8004190:	4629      	mov	r1, r5
 8004192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004198 <_strtod_l>:
 8004198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800419c:	461f      	mov	r7, r3
 800419e:	2300      	movs	r3, #0
 80041a0:	b0a1      	sub	sp, #132	; 0x84
 80041a2:	4683      	mov	fp, r0
 80041a4:	4638      	mov	r0, r7
 80041a6:	460e      	mov	r6, r1
 80041a8:	9217      	str	r2, [sp, #92]	; 0x5c
 80041aa:	931c      	str	r3, [sp, #112]	; 0x70
 80041ac:	f001 ffff 	bl	80061ae <__localeconv_l>
 80041b0:	4680      	mov	r8, r0
 80041b2:	6800      	ldr	r0, [r0, #0]
 80041b4:	f7fb ffcc 	bl	8000150 <strlen>
 80041b8:	f04f 0900 	mov.w	r9, #0
 80041bc:	4604      	mov	r4, r0
 80041be:	f04f 0a00 	mov.w	sl, #0
 80041c2:	961b      	str	r6, [sp, #108]	; 0x6c
 80041c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80041c6:	781a      	ldrb	r2, [r3, #0]
 80041c8:	2a0d      	cmp	r2, #13
 80041ca:	d832      	bhi.n	8004232 <_strtod_l+0x9a>
 80041cc:	2a09      	cmp	r2, #9
 80041ce:	d236      	bcs.n	800423e <_strtod_l+0xa6>
 80041d0:	2a00      	cmp	r2, #0
 80041d2:	d03e      	beq.n	8004252 <_strtod_l+0xba>
 80041d4:	2300      	movs	r3, #0
 80041d6:	930d      	str	r3, [sp, #52]	; 0x34
 80041d8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80041da:	782b      	ldrb	r3, [r5, #0]
 80041dc:	2b30      	cmp	r3, #48	; 0x30
 80041de:	f040 80ac 	bne.w	800433a <_strtod_l+0x1a2>
 80041e2:	786b      	ldrb	r3, [r5, #1]
 80041e4:	2b58      	cmp	r3, #88	; 0x58
 80041e6:	d001      	beq.n	80041ec <_strtod_l+0x54>
 80041e8:	2b78      	cmp	r3, #120	; 0x78
 80041ea:	d167      	bne.n	80042bc <_strtod_l+0x124>
 80041ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80041ee:	9702      	str	r7, [sp, #8]
 80041f0:	9301      	str	r3, [sp, #4]
 80041f2:	ab1c      	add	r3, sp, #112	; 0x70
 80041f4:	9300      	str	r3, [sp, #0]
 80041f6:	4a89      	ldr	r2, [pc, #548]	; (800441c <_strtod_l+0x284>)
 80041f8:	ab1d      	add	r3, sp, #116	; 0x74
 80041fa:	a91b      	add	r1, sp, #108	; 0x6c
 80041fc:	4658      	mov	r0, fp
 80041fe:	f001 fcfb 	bl	8005bf8 <__gethex>
 8004202:	f010 0407 	ands.w	r4, r0, #7
 8004206:	4606      	mov	r6, r0
 8004208:	d005      	beq.n	8004216 <_strtod_l+0x7e>
 800420a:	2c06      	cmp	r4, #6
 800420c:	d12b      	bne.n	8004266 <_strtod_l+0xce>
 800420e:	2300      	movs	r3, #0
 8004210:	3501      	adds	r5, #1
 8004212:	951b      	str	r5, [sp, #108]	; 0x6c
 8004214:	930d      	str	r3, [sp, #52]	; 0x34
 8004216:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004218:	2b00      	cmp	r3, #0
 800421a:	f040 85a6 	bne.w	8004d6a <_strtod_l+0xbd2>
 800421e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004220:	b1e3      	cbz	r3, 800425c <_strtod_l+0xc4>
 8004222:	464a      	mov	r2, r9
 8004224:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8004228:	4610      	mov	r0, r2
 800422a:	4619      	mov	r1, r3
 800422c:	b021      	add	sp, #132	; 0x84
 800422e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004232:	2a2b      	cmp	r2, #43	; 0x2b
 8004234:	d015      	beq.n	8004262 <_strtod_l+0xca>
 8004236:	2a2d      	cmp	r2, #45	; 0x2d
 8004238:	d004      	beq.n	8004244 <_strtod_l+0xac>
 800423a:	2a20      	cmp	r2, #32
 800423c:	d1ca      	bne.n	80041d4 <_strtod_l+0x3c>
 800423e:	3301      	adds	r3, #1
 8004240:	931b      	str	r3, [sp, #108]	; 0x6c
 8004242:	e7bf      	b.n	80041c4 <_strtod_l+0x2c>
 8004244:	2201      	movs	r2, #1
 8004246:	920d      	str	r2, [sp, #52]	; 0x34
 8004248:	1c5a      	adds	r2, r3, #1
 800424a:	921b      	str	r2, [sp, #108]	; 0x6c
 800424c:	785b      	ldrb	r3, [r3, #1]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1c2      	bne.n	80041d8 <_strtod_l+0x40>
 8004252:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004254:	961b      	str	r6, [sp, #108]	; 0x6c
 8004256:	2b00      	cmp	r3, #0
 8004258:	f040 8585 	bne.w	8004d66 <_strtod_l+0xbce>
 800425c:	464a      	mov	r2, r9
 800425e:	4653      	mov	r3, sl
 8004260:	e7e2      	b.n	8004228 <_strtod_l+0x90>
 8004262:	2200      	movs	r2, #0
 8004264:	e7ef      	b.n	8004246 <_strtod_l+0xae>
 8004266:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004268:	b13a      	cbz	r2, 800427a <_strtod_l+0xe2>
 800426a:	2135      	movs	r1, #53	; 0x35
 800426c:	a81e      	add	r0, sp, #120	; 0x78
 800426e:	f002 fba0 	bl	80069b2 <__copybits>
 8004272:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004274:	4658      	mov	r0, fp
 8004276:	f002 f812 	bl	800629e <_Bfree>
 800427a:	3c01      	subs	r4, #1
 800427c:	2c04      	cmp	r4, #4
 800427e:	d806      	bhi.n	800428e <_strtod_l+0xf6>
 8004280:	e8df f004 	tbb	[pc, r4]
 8004284:	1714030a 	.word	0x1714030a
 8004288:	0a          	.byte	0x0a
 8004289:	00          	.byte	0x00
 800428a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 800428e:	0731      	lsls	r1, r6, #28
 8004290:	d5c1      	bpl.n	8004216 <_strtod_l+0x7e>
 8004292:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 8004296:	e7be      	b.n	8004216 <_strtod_l+0x7e>
 8004298:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800429a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 800429e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80042a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80042a6:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 80042aa:	e7f0      	b.n	800428e <_strtod_l+0xf6>
 80042ac:	f8df a170 	ldr.w	sl, [pc, #368]	; 8004420 <_strtod_l+0x288>
 80042b0:	e7ed      	b.n	800428e <_strtod_l+0xf6>
 80042b2:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80042b6:	f04f 39ff 	mov.w	r9, #4294967295
 80042ba:	e7e8      	b.n	800428e <_strtod_l+0xf6>
 80042bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80042be:	1c5a      	adds	r2, r3, #1
 80042c0:	921b      	str	r2, [sp, #108]	; 0x6c
 80042c2:	785b      	ldrb	r3, [r3, #1]
 80042c4:	2b30      	cmp	r3, #48	; 0x30
 80042c6:	d0f9      	beq.n	80042bc <_strtod_l+0x124>
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d0a4      	beq.n	8004216 <_strtod_l+0x7e>
 80042cc:	2301      	movs	r3, #1
 80042ce:	2500      	movs	r5, #0
 80042d0:	220a      	movs	r2, #10
 80042d2:	9307      	str	r3, [sp, #28]
 80042d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80042d6:	9506      	str	r5, [sp, #24]
 80042d8:	9308      	str	r3, [sp, #32]
 80042da:	9504      	str	r5, [sp, #16]
 80042dc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80042de:	7807      	ldrb	r7, [r0, #0]
 80042e0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80042e4:	b2d9      	uxtb	r1, r3
 80042e6:	2909      	cmp	r1, #9
 80042e8:	d929      	bls.n	800433e <_strtod_l+0x1a6>
 80042ea:	4622      	mov	r2, r4
 80042ec:	f8d8 1000 	ldr.w	r1, [r8]
 80042f0:	f002 fdb0 	bl	8006e54 <strncmp>
 80042f4:	2800      	cmp	r0, #0
 80042f6:	d031      	beq.n	800435c <_strtod_l+0x1c4>
 80042f8:	2000      	movs	r0, #0
 80042fa:	463b      	mov	r3, r7
 80042fc:	4602      	mov	r2, r0
 80042fe:	9c04      	ldr	r4, [sp, #16]
 8004300:	9005      	str	r0, [sp, #20]
 8004302:	2b65      	cmp	r3, #101	; 0x65
 8004304:	d001      	beq.n	800430a <_strtod_l+0x172>
 8004306:	2b45      	cmp	r3, #69	; 0x45
 8004308:	d114      	bne.n	8004334 <_strtod_l+0x19c>
 800430a:	b924      	cbnz	r4, 8004316 <_strtod_l+0x17e>
 800430c:	b910      	cbnz	r0, 8004314 <_strtod_l+0x17c>
 800430e:	9b07      	ldr	r3, [sp, #28]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d09e      	beq.n	8004252 <_strtod_l+0xba>
 8004314:	2400      	movs	r4, #0
 8004316:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8004318:	1c73      	adds	r3, r6, #1
 800431a:	931b      	str	r3, [sp, #108]	; 0x6c
 800431c:	7873      	ldrb	r3, [r6, #1]
 800431e:	2b2b      	cmp	r3, #43	; 0x2b
 8004320:	d078      	beq.n	8004414 <_strtod_l+0x27c>
 8004322:	2b2d      	cmp	r3, #45	; 0x2d
 8004324:	d070      	beq.n	8004408 <_strtod_l+0x270>
 8004326:	f04f 0c00 	mov.w	ip, #0
 800432a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800432e:	2f09      	cmp	r7, #9
 8004330:	d97c      	bls.n	800442c <_strtod_l+0x294>
 8004332:	961b      	str	r6, [sp, #108]	; 0x6c
 8004334:	f04f 0e00 	mov.w	lr, #0
 8004338:	e09a      	b.n	8004470 <_strtod_l+0x2d8>
 800433a:	2300      	movs	r3, #0
 800433c:	e7c7      	b.n	80042ce <_strtod_l+0x136>
 800433e:	9904      	ldr	r1, [sp, #16]
 8004340:	3001      	adds	r0, #1
 8004342:	2908      	cmp	r1, #8
 8004344:	bfd7      	itett	le
 8004346:	9906      	ldrle	r1, [sp, #24]
 8004348:	fb02 3505 	mlagt	r5, r2, r5, r3
 800434c:	fb02 3301 	mlale	r3, r2, r1, r3
 8004350:	9306      	strle	r3, [sp, #24]
 8004352:	9b04      	ldr	r3, [sp, #16]
 8004354:	901b      	str	r0, [sp, #108]	; 0x6c
 8004356:	3301      	adds	r3, #1
 8004358:	9304      	str	r3, [sp, #16]
 800435a:	e7bf      	b.n	80042dc <_strtod_l+0x144>
 800435c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800435e:	191a      	adds	r2, r3, r4
 8004360:	921b      	str	r2, [sp, #108]	; 0x6c
 8004362:	9a04      	ldr	r2, [sp, #16]
 8004364:	5d1b      	ldrb	r3, [r3, r4]
 8004366:	2a00      	cmp	r2, #0
 8004368:	d037      	beq.n	80043da <_strtod_l+0x242>
 800436a:	4602      	mov	r2, r0
 800436c:	9c04      	ldr	r4, [sp, #16]
 800436e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004372:	2909      	cmp	r1, #9
 8004374:	d913      	bls.n	800439e <_strtod_l+0x206>
 8004376:	2101      	movs	r1, #1
 8004378:	9105      	str	r1, [sp, #20]
 800437a:	e7c2      	b.n	8004302 <_strtod_l+0x16a>
 800437c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800437e:	3001      	adds	r0, #1
 8004380:	1c5a      	adds	r2, r3, #1
 8004382:	921b      	str	r2, [sp, #108]	; 0x6c
 8004384:	785b      	ldrb	r3, [r3, #1]
 8004386:	2b30      	cmp	r3, #48	; 0x30
 8004388:	d0f8      	beq.n	800437c <_strtod_l+0x1e4>
 800438a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800438e:	2a08      	cmp	r2, #8
 8004390:	f200 84f0 	bhi.w	8004d74 <_strtod_l+0xbdc>
 8004394:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004396:	9208      	str	r2, [sp, #32]
 8004398:	4602      	mov	r2, r0
 800439a:	2000      	movs	r0, #0
 800439c:	4604      	mov	r4, r0
 800439e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80043a2:	f100 0101 	add.w	r1, r0, #1
 80043a6:	d012      	beq.n	80043ce <_strtod_l+0x236>
 80043a8:	440a      	add	r2, r1
 80043aa:	270a      	movs	r7, #10
 80043ac:	4621      	mov	r1, r4
 80043ae:	eb00 0c04 	add.w	ip, r0, r4
 80043b2:	458c      	cmp	ip, r1
 80043b4:	d113      	bne.n	80043de <_strtod_l+0x246>
 80043b6:	1821      	adds	r1, r4, r0
 80043b8:	2908      	cmp	r1, #8
 80043ba:	f104 0401 	add.w	r4, r4, #1
 80043be:	4404      	add	r4, r0
 80043c0:	dc19      	bgt.n	80043f6 <_strtod_l+0x25e>
 80043c2:	210a      	movs	r1, #10
 80043c4:	9b06      	ldr	r3, [sp, #24]
 80043c6:	fb01 e303 	mla	r3, r1, r3, lr
 80043ca:	9306      	str	r3, [sp, #24]
 80043cc:	2100      	movs	r1, #0
 80043ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80043d0:	1c58      	adds	r0, r3, #1
 80043d2:	901b      	str	r0, [sp, #108]	; 0x6c
 80043d4:	785b      	ldrb	r3, [r3, #1]
 80043d6:	4608      	mov	r0, r1
 80043d8:	e7c9      	b.n	800436e <_strtod_l+0x1d6>
 80043da:	9804      	ldr	r0, [sp, #16]
 80043dc:	e7d3      	b.n	8004386 <_strtod_l+0x1ee>
 80043de:	2908      	cmp	r1, #8
 80043e0:	f101 0101 	add.w	r1, r1, #1
 80043e4:	dc03      	bgt.n	80043ee <_strtod_l+0x256>
 80043e6:	9b06      	ldr	r3, [sp, #24]
 80043e8:	437b      	muls	r3, r7
 80043ea:	9306      	str	r3, [sp, #24]
 80043ec:	e7e1      	b.n	80043b2 <_strtod_l+0x21a>
 80043ee:	2910      	cmp	r1, #16
 80043f0:	bfd8      	it	le
 80043f2:	437d      	mulle	r5, r7
 80043f4:	e7dd      	b.n	80043b2 <_strtod_l+0x21a>
 80043f6:	2c10      	cmp	r4, #16
 80043f8:	bfdc      	itt	le
 80043fa:	210a      	movle	r1, #10
 80043fc:	fb01 e505 	mlale	r5, r1, r5, lr
 8004400:	e7e4      	b.n	80043cc <_strtod_l+0x234>
 8004402:	2301      	movs	r3, #1
 8004404:	9305      	str	r3, [sp, #20]
 8004406:	e781      	b.n	800430c <_strtod_l+0x174>
 8004408:	f04f 0c01 	mov.w	ip, #1
 800440c:	1cb3      	adds	r3, r6, #2
 800440e:	931b      	str	r3, [sp, #108]	; 0x6c
 8004410:	78b3      	ldrb	r3, [r6, #2]
 8004412:	e78a      	b.n	800432a <_strtod_l+0x192>
 8004414:	f04f 0c00 	mov.w	ip, #0
 8004418:	e7f8      	b.n	800440c <_strtod_l+0x274>
 800441a:	bf00      	nop
 800441c:	08006fc0 	.word	0x08006fc0
 8004420:	7ff00000 	.word	0x7ff00000
 8004424:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004426:	1c5f      	adds	r7, r3, #1
 8004428:	971b      	str	r7, [sp, #108]	; 0x6c
 800442a:	785b      	ldrb	r3, [r3, #1]
 800442c:	2b30      	cmp	r3, #48	; 0x30
 800442e:	d0f9      	beq.n	8004424 <_strtod_l+0x28c>
 8004430:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8004434:	2f08      	cmp	r7, #8
 8004436:	f63f af7d 	bhi.w	8004334 <_strtod_l+0x19c>
 800443a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800443e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004440:	9309      	str	r3, [sp, #36]	; 0x24
 8004442:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004444:	1c5f      	adds	r7, r3, #1
 8004446:	971b      	str	r7, [sp, #108]	; 0x6c
 8004448:	785b      	ldrb	r3, [r3, #1]
 800444a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800444e:	f1b8 0f09 	cmp.w	r8, #9
 8004452:	d937      	bls.n	80044c4 <_strtod_l+0x32c>
 8004454:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004456:	1a7f      	subs	r7, r7, r1
 8004458:	2f08      	cmp	r7, #8
 800445a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800445e:	dc37      	bgt.n	80044d0 <_strtod_l+0x338>
 8004460:	45be      	cmp	lr, r7
 8004462:	bfa8      	it	ge
 8004464:	46be      	movge	lr, r7
 8004466:	f1bc 0f00 	cmp.w	ip, #0
 800446a:	d001      	beq.n	8004470 <_strtod_l+0x2d8>
 800446c:	f1ce 0e00 	rsb	lr, lr, #0
 8004470:	2c00      	cmp	r4, #0
 8004472:	d151      	bne.n	8004518 <_strtod_l+0x380>
 8004474:	2800      	cmp	r0, #0
 8004476:	f47f aece 	bne.w	8004216 <_strtod_l+0x7e>
 800447a:	9a07      	ldr	r2, [sp, #28]
 800447c:	2a00      	cmp	r2, #0
 800447e:	f47f aeca 	bne.w	8004216 <_strtod_l+0x7e>
 8004482:	9a05      	ldr	r2, [sp, #20]
 8004484:	2a00      	cmp	r2, #0
 8004486:	f47f aee4 	bne.w	8004252 <_strtod_l+0xba>
 800448a:	2b4e      	cmp	r3, #78	; 0x4e
 800448c:	d027      	beq.n	80044de <_strtod_l+0x346>
 800448e:	dc21      	bgt.n	80044d4 <_strtod_l+0x33c>
 8004490:	2b49      	cmp	r3, #73	; 0x49
 8004492:	f47f aede 	bne.w	8004252 <_strtod_l+0xba>
 8004496:	49a4      	ldr	r1, [pc, #656]	; (8004728 <_strtod_l+0x590>)
 8004498:	a81b      	add	r0, sp, #108	; 0x6c
 800449a:	f001 fde1 	bl	8006060 <__match>
 800449e:	2800      	cmp	r0, #0
 80044a0:	f43f aed7 	beq.w	8004252 <_strtod_l+0xba>
 80044a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80044a6:	49a1      	ldr	r1, [pc, #644]	; (800472c <_strtod_l+0x594>)
 80044a8:	3b01      	subs	r3, #1
 80044aa:	a81b      	add	r0, sp, #108	; 0x6c
 80044ac:	931b      	str	r3, [sp, #108]	; 0x6c
 80044ae:	f001 fdd7 	bl	8006060 <__match>
 80044b2:	b910      	cbnz	r0, 80044ba <_strtod_l+0x322>
 80044b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80044b6:	3301      	adds	r3, #1
 80044b8:	931b      	str	r3, [sp, #108]	; 0x6c
 80044ba:	f8df a284 	ldr.w	sl, [pc, #644]	; 8004740 <_strtod_l+0x5a8>
 80044be:	f04f 0900 	mov.w	r9, #0
 80044c2:	e6a8      	b.n	8004216 <_strtod_l+0x7e>
 80044c4:	210a      	movs	r1, #10
 80044c6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80044ca:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80044ce:	e7b8      	b.n	8004442 <_strtod_l+0x2aa>
 80044d0:	46be      	mov	lr, r7
 80044d2:	e7c8      	b.n	8004466 <_strtod_l+0x2ce>
 80044d4:	2b69      	cmp	r3, #105	; 0x69
 80044d6:	d0de      	beq.n	8004496 <_strtod_l+0x2fe>
 80044d8:	2b6e      	cmp	r3, #110	; 0x6e
 80044da:	f47f aeba 	bne.w	8004252 <_strtod_l+0xba>
 80044de:	4994      	ldr	r1, [pc, #592]	; (8004730 <_strtod_l+0x598>)
 80044e0:	a81b      	add	r0, sp, #108	; 0x6c
 80044e2:	f001 fdbd 	bl	8006060 <__match>
 80044e6:	2800      	cmp	r0, #0
 80044e8:	f43f aeb3 	beq.w	8004252 <_strtod_l+0xba>
 80044ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	2b28      	cmp	r3, #40	; 0x28
 80044f2:	d10e      	bne.n	8004512 <_strtod_l+0x37a>
 80044f4:	aa1e      	add	r2, sp, #120	; 0x78
 80044f6:	498f      	ldr	r1, [pc, #572]	; (8004734 <_strtod_l+0x59c>)
 80044f8:	a81b      	add	r0, sp, #108	; 0x6c
 80044fa:	f001 fdc5 	bl	8006088 <__hexnan>
 80044fe:	2805      	cmp	r0, #5
 8004500:	d107      	bne.n	8004512 <_strtod_l+0x37a>
 8004502:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004504:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8004508:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 800450c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8004510:	e681      	b.n	8004216 <_strtod_l+0x7e>
 8004512:	f8df a234 	ldr.w	sl, [pc, #564]	; 8004748 <_strtod_l+0x5b0>
 8004516:	e7d2      	b.n	80044be <_strtod_l+0x326>
 8004518:	ebae 0302 	sub.w	r3, lr, r2
 800451c:	9307      	str	r3, [sp, #28]
 800451e:	9b04      	ldr	r3, [sp, #16]
 8004520:	9806      	ldr	r0, [sp, #24]
 8004522:	2b00      	cmp	r3, #0
 8004524:	bf08      	it	eq
 8004526:	4623      	moveq	r3, r4
 8004528:	2c10      	cmp	r4, #16
 800452a:	9304      	str	r3, [sp, #16]
 800452c:	46a0      	mov	r8, r4
 800452e:	bfa8      	it	ge
 8004530:	f04f 0810 	movge.w	r8, #16
 8004534:	f7fb ff56 	bl	80003e4 <__aeabi_ui2d>
 8004538:	2c09      	cmp	r4, #9
 800453a:	4681      	mov	r9, r0
 800453c:	468a      	mov	sl, r1
 800453e:	dc13      	bgt.n	8004568 <_strtod_l+0x3d0>
 8004540:	9b07      	ldr	r3, [sp, #28]
 8004542:	2b00      	cmp	r3, #0
 8004544:	f43f ae67 	beq.w	8004216 <_strtod_l+0x7e>
 8004548:	9b07      	ldr	r3, [sp, #28]
 800454a:	dd7e      	ble.n	800464a <_strtod_l+0x4b2>
 800454c:	2b16      	cmp	r3, #22
 800454e:	dc65      	bgt.n	800461c <_strtod_l+0x484>
 8004550:	4a79      	ldr	r2, [pc, #484]	; (8004738 <_strtod_l+0x5a0>)
 8004552:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8004556:	464a      	mov	r2, r9
 8004558:	e9de 0100 	ldrd	r0, r1, [lr]
 800455c:	4653      	mov	r3, sl
 800455e:	f7fb ffbb 	bl	80004d8 <__aeabi_dmul>
 8004562:	4681      	mov	r9, r0
 8004564:	468a      	mov	sl, r1
 8004566:	e656      	b.n	8004216 <_strtod_l+0x7e>
 8004568:	4b73      	ldr	r3, [pc, #460]	; (8004738 <_strtod_l+0x5a0>)
 800456a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800456e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004572:	f7fb ffb1 	bl	80004d8 <__aeabi_dmul>
 8004576:	4606      	mov	r6, r0
 8004578:	4628      	mov	r0, r5
 800457a:	460f      	mov	r7, r1
 800457c:	f7fb ff32 	bl	80003e4 <__aeabi_ui2d>
 8004580:	4602      	mov	r2, r0
 8004582:	460b      	mov	r3, r1
 8004584:	4630      	mov	r0, r6
 8004586:	4639      	mov	r1, r7
 8004588:	f7fb fdf0 	bl	800016c <__adddf3>
 800458c:	2c0f      	cmp	r4, #15
 800458e:	4681      	mov	r9, r0
 8004590:	468a      	mov	sl, r1
 8004592:	ddd5      	ble.n	8004540 <_strtod_l+0x3a8>
 8004594:	9b07      	ldr	r3, [sp, #28]
 8004596:	eba4 0808 	sub.w	r8, r4, r8
 800459a:	4498      	add	r8, r3
 800459c:	f1b8 0f00 	cmp.w	r8, #0
 80045a0:	f340 809a 	ble.w	80046d8 <_strtod_l+0x540>
 80045a4:	f018 030f 	ands.w	r3, r8, #15
 80045a8:	d00a      	beq.n	80045c0 <_strtod_l+0x428>
 80045aa:	4963      	ldr	r1, [pc, #396]	; (8004738 <_strtod_l+0x5a0>)
 80045ac:	464a      	mov	r2, r9
 80045ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80045b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80045b6:	4653      	mov	r3, sl
 80045b8:	f7fb ff8e 	bl	80004d8 <__aeabi_dmul>
 80045bc:	4681      	mov	r9, r0
 80045be:	468a      	mov	sl, r1
 80045c0:	f038 080f 	bics.w	r8, r8, #15
 80045c4:	d077      	beq.n	80046b6 <_strtod_l+0x51e>
 80045c6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80045ca:	dd4b      	ble.n	8004664 <_strtod_l+0x4cc>
 80045cc:	f04f 0800 	mov.w	r8, #0
 80045d0:	f8cd 8010 	str.w	r8, [sp, #16]
 80045d4:	f8cd 8020 	str.w	r8, [sp, #32]
 80045d8:	f8cd 8018 	str.w	r8, [sp, #24]
 80045dc:	2322      	movs	r3, #34	; 0x22
 80045de:	f04f 0900 	mov.w	r9, #0
 80045e2:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8004740 <_strtod_l+0x5a8>
 80045e6:	f8cb 3000 	str.w	r3, [fp]
 80045ea:	9b08      	ldr	r3, [sp, #32]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f43f ae12 	beq.w	8004216 <_strtod_l+0x7e>
 80045f2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80045f4:	4658      	mov	r0, fp
 80045f6:	f001 fe52 	bl	800629e <_Bfree>
 80045fa:	9906      	ldr	r1, [sp, #24]
 80045fc:	4658      	mov	r0, fp
 80045fe:	f001 fe4e 	bl	800629e <_Bfree>
 8004602:	9904      	ldr	r1, [sp, #16]
 8004604:	4658      	mov	r0, fp
 8004606:	f001 fe4a 	bl	800629e <_Bfree>
 800460a:	9908      	ldr	r1, [sp, #32]
 800460c:	4658      	mov	r0, fp
 800460e:	f001 fe46 	bl	800629e <_Bfree>
 8004612:	4641      	mov	r1, r8
 8004614:	4658      	mov	r0, fp
 8004616:	f001 fe42 	bl	800629e <_Bfree>
 800461a:	e5fc      	b.n	8004216 <_strtod_l+0x7e>
 800461c:	9a07      	ldr	r2, [sp, #28]
 800461e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8004622:	4293      	cmp	r3, r2
 8004624:	dbb6      	blt.n	8004594 <_strtod_l+0x3fc>
 8004626:	4d44      	ldr	r5, [pc, #272]	; (8004738 <_strtod_l+0x5a0>)
 8004628:	f1c4 040f 	rsb	r4, r4, #15
 800462c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004630:	464a      	mov	r2, r9
 8004632:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004636:	4653      	mov	r3, sl
 8004638:	f7fb ff4e 	bl	80004d8 <__aeabi_dmul>
 800463c:	9b07      	ldr	r3, [sp, #28]
 800463e:	1b1c      	subs	r4, r3, r4
 8004640:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004644:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004648:	e789      	b.n	800455e <_strtod_l+0x3c6>
 800464a:	f113 0f16 	cmn.w	r3, #22
 800464e:	dba1      	blt.n	8004594 <_strtod_l+0x3fc>
 8004650:	4a39      	ldr	r2, [pc, #228]	; (8004738 <_strtod_l+0x5a0>)
 8004652:	4648      	mov	r0, r9
 8004654:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8004658:	e9d2 2300 	ldrd	r2, r3, [r2]
 800465c:	4651      	mov	r1, sl
 800465e:	f7fc f865 	bl	800072c <__aeabi_ddiv>
 8004662:	e77e      	b.n	8004562 <_strtod_l+0x3ca>
 8004664:	2300      	movs	r3, #0
 8004666:	4648      	mov	r0, r9
 8004668:	4651      	mov	r1, sl
 800466a:	461d      	mov	r5, r3
 800466c:	4e33      	ldr	r6, [pc, #204]	; (800473c <_strtod_l+0x5a4>)
 800466e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004672:	f1b8 0f01 	cmp.w	r8, #1
 8004676:	dc21      	bgt.n	80046bc <_strtod_l+0x524>
 8004678:	b10b      	cbz	r3, 800467e <_strtod_l+0x4e6>
 800467a:	4681      	mov	r9, r0
 800467c:	468a      	mov	sl, r1
 800467e:	4b2f      	ldr	r3, [pc, #188]	; (800473c <_strtod_l+0x5a4>)
 8004680:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 8004684:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004688:	464a      	mov	r2, r9
 800468a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800468e:	4653      	mov	r3, sl
 8004690:	f7fb ff22 	bl	80004d8 <__aeabi_dmul>
 8004694:	4b2a      	ldr	r3, [pc, #168]	; (8004740 <_strtod_l+0x5a8>)
 8004696:	460a      	mov	r2, r1
 8004698:	400b      	ands	r3, r1
 800469a:	492a      	ldr	r1, [pc, #168]	; (8004744 <_strtod_l+0x5ac>)
 800469c:	4681      	mov	r9, r0
 800469e:	428b      	cmp	r3, r1
 80046a0:	d894      	bhi.n	80045cc <_strtod_l+0x434>
 80046a2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80046a6:	428b      	cmp	r3, r1
 80046a8:	bf86      	itte	hi
 80046aa:	f04f 39ff 	movhi.w	r9, #4294967295
 80046ae:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800474c <_strtod_l+0x5b4>
 80046b2:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 80046b6:	2300      	movs	r3, #0
 80046b8:	9305      	str	r3, [sp, #20]
 80046ba:	e07b      	b.n	80047b4 <_strtod_l+0x61c>
 80046bc:	f018 0f01 	tst.w	r8, #1
 80046c0:	d006      	beq.n	80046d0 <_strtod_l+0x538>
 80046c2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80046c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ca:	f7fb ff05 	bl	80004d8 <__aeabi_dmul>
 80046ce:	2301      	movs	r3, #1
 80046d0:	3501      	adds	r5, #1
 80046d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80046d6:	e7cc      	b.n	8004672 <_strtod_l+0x4da>
 80046d8:	d0ed      	beq.n	80046b6 <_strtod_l+0x51e>
 80046da:	f1c8 0800 	rsb	r8, r8, #0
 80046de:	f018 020f 	ands.w	r2, r8, #15
 80046e2:	d00a      	beq.n	80046fa <_strtod_l+0x562>
 80046e4:	4b14      	ldr	r3, [pc, #80]	; (8004738 <_strtod_l+0x5a0>)
 80046e6:	4648      	mov	r0, r9
 80046e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80046ec:	4651      	mov	r1, sl
 80046ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f2:	f7fc f81b 	bl	800072c <__aeabi_ddiv>
 80046f6:	4681      	mov	r9, r0
 80046f8:	468a      	mov	sl, r1
 80046fa:	ea5f 1828 	movs.w	r8, r8, asr #4
 80046fe:	d0da      	beq.n	80046b6 <_strtod_l+0x51e>
 8004700:	f1b8 0f1f 	cmp.w	r8, #31
 8004704:	dd24      	ble.n	8004750 <_strtod_l+0x5b8>
 8004706:	f04f 0800 	mov.w	r8, #0
 800470a:	f8cd 8010 	str.w	r8, [sp, #16]
 800470e:	f8cd 8020 	str.w	r8, [sp, #32]
 8004712:	f8cd 8018 	str.w	r8, [sp, #24]
 8004716:	2322      	movs	r3, #34	; 0x22
 8004718:	f04f 0900 	mov.w	r9, #0
 800471c:	f04f 0a00 	mov.w	sl, #0
 8004720:	f8cb 3000 	str.w	r3, [fp]
 8004724:	e761      	b.n	80045ea <_strtod_l+0x452>
 8004726:	bf00      	nop
 8004728:	08006f8b 	.word	0x08006f8b
 800472c:	08007013 	.word	0x08007013
 8004730:	08006f93 	.word	0x08006f93
 8004734:	08006fd4 	.word	0x08006fd4
 8004738:	08007050 	.word	0x08007050
 800473c:	08007028 	.word	0x08007028
 8004740:	7ff00000 	.word	0x7ff00000
 8004744:	7ca00000 	.word	0x7ca00000
 8004748:	fff80000 	.word	0xfff80000
 800474c:	7fefffff 	.word	0x7fefffff
 8004750:	f018 0310 	ands.w	r3, r8, #16
 8004754:	bf18      	it	ne
 8004756:	236a      	movne	r3, #106	; 0x6a
 8004758:	4648      	mov	r0, r9
 800475a:	9305      	str	r3, [sp, #20]
 800475c:	4651      	mov	r1, sl
 800475e:	2300      	movs	r3, #0
 8004760:	4da1      	ldr	r5, [pc, #644]	; (80049e8 <_strtod_l+0x850>)
 8004762:	f1b8 0f00 	cmp.w	r8, #0
 8004766:	f300 8113 	bgt.w	8004990 <_strtod_l+0x7f8>
 800476a:	b10b      	cbz	r3, 8004770 <_strtod_l+0x5d8>
 800476c:	4681      	mov	r9, r0
 800476e:	468a      	mov	sl, r1
 8004770:	9b05      	ldr	r3, [sp, #20]
 8004772:	b1bb      	cbz	r3, 80047a4 <_strtod_l+0x60c>
 8004774:	f3ca 530a 	ubfx	r3, sl, #20, #11
 8004778:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800477c:	2b00      	cmp	r3, #0
 800477e:	4651      	mov	r1, sl
 8004780:	dd10      	ble.n	80047a4 <_strtod_l+0x60c>
 8004782:	2b1f      	cmp	r3, #31
 8004784:	f340 8110 	ble.w	80049a8 <_strtod_l+0x810>
 8004788:	2b34      	cmp	r3, #52	; 0x34
 800478a:	bfd8      	it	le
 800478c:	f04f 32ff 	movle.w	r2, #4294967295
 8004790:	f04f 0900 	mov.w	r9, #0
 8004794:	bfcf      	iteee	gt
 8004796:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800479a:	3b20      	suble	r3, #32
 800479c:	fa02 f303 	lslle.w	r3, r2, r3
 80047a0:	ea03 0a01 	andle.w	sl, r3, r1
 80047a4:	2200      	movs	r2, #0
 80047a6:	2300      	movs	r3, #0
 80047a8:	4648      	mov	r0, r9
 80047aa:	4651      	mov	r1, sl
 80047ac:	f7fc f8fc 	bl	80009a8 <__aeabi_dcmpeq>
 80047b0:	2800      	cmp	r0, #0
 80047b2:	d1a8      	bne.n	8004706 <_strtod_l+0x56e>
 80047b4:	9b06      	ldr	r3, [sp, #24]
 80047b6:	9a04      	ldr	r2, [sp, #16]
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	9908      	ldr	r1, [sp, #32]
 80047bc:	4623      	mov	r3, r4
 80047be:	4658      	mov	r0, fp
 80047c0:	f001 fdbf 	bl	8006342 <__s2b>
 80047c4:	9008      	str	r0, [sp, #32]
 80047c6:	2800      	cmp	r0, #0
 80047c8:	f43f af00 	beq.w	80045cc <_strtod_l+0x434>
 80047cc:	9a07      	ldr	r2, [sp, #28]
 80047ce:	9b07      	ldr	r3, [sp, #28]
 80047d0:	2a00      	cmp	r2, #0
 80047d2:	f1c3 0300 	rsb	r3, r3, #0
 80047d6:	bfa8      	it	ge
 80047d8:	2300      	movge	r3, #0
 80047da:	f04f 0800 	mov.w	r8, #0
 80047de:	930e      	str	r3, [sp, #56]	; 0x38
 80047e0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80047e4:	9316      	str	r3, [sp, #88]	; 0x58
 80047e6:	f8cd 8010 	str.w	r8, [sp, #16]
 80047ea:	9b08      	ldr	r3, [sp, #32]
 80047ec:	4658      	mov	r0, fp
 80047ee:	6859      	ldr	r1, [r3, #4]
 80047f0:	f001 fd21 	bl	8006236 <_Balloc>
 80047f4:	9006      	str	r0, [sp, #24]
 80047f6:	2800      	cmp	r0, #0
 80047f8:	f43f aef0 	beq.w	80045dc <_strtod_l+0x444>
 80047fc:	9b08      	ldr	r3, [sp, #32]
 80047fe:	300c      	adds	r0, #12
 8004800:	691a      	ldr	r2, [r3, #16]
 8004802:	f103 010c 	add.w	r1, r3, #12
 8004806:	3202      	adds	r2, #2
 8004808:	0092      	lsls	r2, r2, #2
 800480a:	f001 fd09 	bl	8006220 <memcpy>
 800480e:	ab1e      	add	r3, sp, #120	; 0x78
 8004810:	9301      	str	r3, [sp, #4]
 8004812:	ab1d      	add	r3, sp, #116	; 0x74
 8004814:	9300      	str	r3, [sp, #0]
 8004816:	464a      	mov	r2, r9
 8004818:	4653      	mov	r3, sl
 800481a:	4658      	mov	r0, fp
 800481c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8004820:	f002 f84a 	bl	80068b8 <__d2b>
 8004824:	901c      	str	r0, [sp, #112]	; 0x70
 8004826:	2800      	cmp	r0, #0
 8004828:	f43f aed8 	beq.w	80045dc <_strtod_l+0x444>
 800482c:	2101      	movs	r1, #1
 800482e:	4658      	mov	r0, fp
 8004830:	f001 fe13 	bl	800645a <__i2b>
 8004834:	9004      	str	r0, [sp, #16]
 8004836:	4603      	mov	r3, r0
 8004838:	2800      	cmp	r0, #0
 800483a:	f43f aecf 	beq.w	80045dc <_strtod_l+0x444>
 800483e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8004840:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004842:	2d00      	cmp	r5, #0
 8004844:	bfab      	itete	ge
 8004846:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8004848:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800484a:	18ee      	addge	r6, r5, r3
 800484c:	1b5c      	sublt	r4, r3, r5
 800484e:	9b05      	ldr	r3, [sp, #20]
 8004850:	bfa8      	it	ge
 8004852:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8004854:	eba5 0503 	sub.w	r5, r5, r3
 8004858:	4415      	add	r5, r2
 800485a:	4b64      	ldr	r3, [pc, #400]	; (80049ec <_strtod_l+0x854>)
 800485c:	f105 35ff 	add.w	r5, r5, #4294967295
 8004860:	bfb8      	it	lt
 8004862:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8004864:	429d      	cmp	r5, r3
 8004866:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800486a:	f280 80af 	bge.w	80049cc <_strtod_l+0x834>
 800486e:	1b5b      	subs	r3, r3, r5
 8004870:	2b1f      	cmp	r3, #31
 8004872:	eba2 0203 	sub.w	r2, r2, r3
 8004876:	f04f 0701 	mov.w	r7, #1
 800487a:	f300 809c 	bgt.w	80049b6 <_strtod_l+0x81e>
 800487e:	2500      	movs	r5, #0
 8004880:	fa07 f303 	lsl.w	r3, r7, r3
 8004884:	930f      	str	r3, [sp, #60]	; 0x3c
 8004886:	18b7      	adds	r7, r6, r2
 8004888:	9b05      	ldr	r3, [sp, #20]
 800488a:	42be      	cmp	r6, r7
 800488c:	4414      	add	r4, r2
 800488e:	441c      	add	r4, r3
 8004890:	4633      	mov	r3, r6
 8004892:	bfa8      	it	ge
 8004894:	463b      	movge	r3, r7
 8004896:	42a3      	cmp	r3, r4
 8004898:	bfa8      	it	ge
 800489a:	4623      	movge	r3, r4
 800489c:	2b00      	cmp	r3, #0
 800489e:	bfc2      	ittt	gt
 80048a0:	1aff      	subgt	r7, r7, r3
 80048a2:	1ae4      	subgt	r4, r4, r3
 80048a4:	1af6      	subgt	r6, r6, r3
 80048a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048a8:	b1bb      	cbz	r3, 80048da <_strtod_l+0x742>
 80048aa:	461a      	mov	r2, r3
 80048ac:	9904      	ldr	r1, [sp, #16]
 80048ae:	4658      	mov	r0, fp
 80048b0:	f001 fe72 	bl	8006598 <__pow5mult>
 80048b4:	9004      	str	r0, [sp, #16]
 80048b6:	2800      	cmp	r0, #0
 80048b8:	f43f ae90 	beq.w	80045dc <_strtod_l+0x444>
 80048bc:	4601      	mov	r1, r0
 80048be:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80048c0:	4658      	mov	r0, fp
 80048c2:	f001 fdd3 	bl	800646c <__multiply>
 80048c6:	9009      	str	r0, [sp, #36]	; 0x24
 80048c8:	2800      	cmp	r0, #0
 80048ca:	f43f ae87 	beq.w	80045dc <_strtod_l+0x444>
 80048ce:	991c      	ldr	r1, [sp, #112]	; 0x70
 80048d0:	4658      	mov	r0, fp
 80048d2:	f001 fce4 	bl	800629e <_Bfree>
 80048d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048d8:	931c      	str	r3, [sp, #112]	; 0x70
 80048da:	2f00      	cmp	r7, #0
 80048dc:	dc7a      	bgt.n	80049d4 <_strtod_l+0x83c>
 80048de:	9b07      	ldr	r3, [sp, #28]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	dd08      	ble.n	80048f6 <_strtod_l+0x75e>
 80048e4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80048e6:	9906      	ldr	r1, [sp, #24]
 80048e8:	4658      	mov	r0, fp
 80048ea:	f001 fe55 	bl	8006598 <__pow5mult>
 80048ee:	9006      	str	r0, [sp, #24]
 80048f0:	2800      	cmp	r0, #0
 80048f2:	f43f ae73 	beq.w	80045dc <_strtod_l+0x444>
 80048f6:	2c00      	cmp	r4, #0
 80048f8:	dd08      	ble.n	800490c <_strtod_l+0x774>
 80048fa:	4622      	mov	r2, r4
 80048fc:	9906      	ldr	r1, [sp, #24]
 80048fe:	4658      	mov	r0, fp
 8004900:	f001 fe98 	bl	8006634 <__lshift>
 8004904:	9006      	str	r0, [sp, #24]
 8004906:	2800      	cmp	r0, #0
 8004908:	f43f ae68 	beq.w	80045dc <_strtod_l+0x444>
 800490c:	2e00      	cmp	r6, #0
 800490e:	dd08      	ble.n	8004922 <_strtod_l+0x78a>
 8004910:	4632      	mov	r2, r6
 8004912:	9904      	ldr	r1, [sp, #16]
 8004914:	4658      	mov	r0, fp
 8004916:	f001 fe8d 	bl	8006634 <__lshift>
 800491a:	9004      	str	r0, [sp, #16]
 800491c:	2800      	cmp	r0, #0
 800491e:	f43f ae5d 	beq.w	80045dc <_strtod_l+0x444>
 8004922:	9a06      	ldr	r2, [sp, #24]
 8004924:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004926:	4658      	mov	r0, fp
 8004928:	f001 fef2 	bl	8006710 <__mdiff>
 800492c:	4680      	mov	r8, r0
 800492e:	2800      	cmp	r0, #0
 8004930:	f43f ae54 	beq.w	80045dc <_strtod_l+0x444>
 8004934:	2400      	movs	r4, #0
 8004936:	68c3      	ldr	r3, [r0, #12]
 8004938:	9904      	ldr	r1, [sp, #16]
 800493a:	60c4      	str	r4, [r0, #12]
 800493c:	930c      	str	r3, [sp, #48]	; 0x30
 800493e:	f001 fecd 	bl	80066dc <__mcmp>
 8004942:	42a0      	cmp	r0, r4
 8004944:	da54      	bge.n	80049f0 <_strtod_l+0x858>
 8004946:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004948:	b9f3      	cbnz	r3, 8004988 <_strtod_l+0x7f0>
 800494a:	f1b9 0f00 	cmp.w	r9, #0
 800494e:	d11b      	bne.n	8004988 <_strtod_l+0x7f0>
 8004950:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8004954:	b9c3      	cbnz	r3, 8004988 <_strtod_l+0x7f0>
 8004956:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800495a:	0d1b      	lsrs	r3, r3, #20
 800495c:	051b      	lsls	r3, r3, #20
 800495e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004962:	d911      	bls.n	8004988 <_strtod_l+0x7f0>
 8004964:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8004968:	b91b      	cbnz	r3, 8004972 <_strtod_l+0x7da>
 800496a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800496e:	2b01      	cmp	r3, #1
 8004970:	dd0a      	ble.n	8004988 <_strtod_l+0x7f0>
 8004972:	4641      	mov	r1, r8
 8004974:	2201      	movs	r2, #1
 8004976:	4658      	mov	r0, fp
 8004978:	f001 fe5c 	bl	8006634 <__lshift>
 800497c:	9904      	ldr	r1, [sp, #16]
 800497e:	4680      	mov	r8, r0
 8004980:	f001 feac 	bl	80066dc <__mcmp>
 8004984:	2800      	cmp	r0, #0
 8004986:	dc68      	bgt.n	8004a5a <_strtod_l+0x8c2>
 8004988:	9b05      	ldr	r3, [sp, #20]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d172      	bne.n	8004a74 <_strtod_l+0x8dc>
 800498e:	e630      	b.n	80045f2 <_strtod_l+0x45a>
 8004990:	f018 0f01 	tst.w	r8, #1
 8004994:	d004      	beq.n	80049a0 <_strtod_l+0x808>
 8004996:	e9d5 2300 	ldrd	r2, r3, [r5]
 800499a:	f7fb fd9d 	bl	80004d8 <__aeabi_dmul>
 800499e:	2301      	movs	r3, #1
 80049a0:	ea4f 0868 	mov.w	r8, r8, asr #1
 80049a4:	3508      	adds	r5, #8
 80049a6:	e6dc      	b.n	8004762 <_strtod_l+0x5ca>
 80049a8:	f04f 32ff 	mov.w	r2, #4294967295
 80049ac:	fa02 f303 	lsl.w	r3, r2, r3
 80049b0:	ea03 0909 	and.w	r9, r3, r9
 80049b4:	e6f6      	b.n	80047a4 <_strtod_l+0x60c>
 80049b6:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80049ba:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80049be:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80049c2:	35e2      	adds	r5, #226	; 0xe2
 80049c4:	fa07 f505 	lsl.w	r5, r7, r5
 80049c8:	970f      	str	r7, [sp, #60]	; 0x3c
 80049ca:	e75c      	b.n	8004886 <_strtod_l+0x6ee>
 80049cc:	2301      	movs	r3, #1
 80049ce:	2500      	movs	r5, #0
 80049d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80049d2:	e758      	b.n	8004886 <_strtod_l+0x6ee>
 80049d4:	463a      	mov	r2, r7
 80049d6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80049d8:	4658      	mov	r0, fp
 80049da:	f001 fe2b 	bl	8006634 <__lshift>
 80049de:	901c      	str	r0, [sp, #112]	; 0x70
 80049e0:	2800      	cmp	r0, #0
 80049e2:	f47f af7c 	bne.w	80048de <_strtod_l+0x746>
 80049e6:	e5f9      	b.n	80045dc <_strtod_l+0x444>
 80049e8:	08006fe8 	.word	0x08006fe8
 80049ec:	fffffc02 	.word	0xfffffc02
 80049f0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80049f4:	f040 8089 	bne.w	8004b0a <_strtod_l+0x972>
 80049f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80049fa:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80049fe:	b342      	cbz	r2, 8004a52 <_strtod_l+0x8ba>
 8004a00:	4aaf      	ldr	r2, [pc, #700]	; (8004cc0 <_strtod_l+0xb28>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d156      	bne.n	8004ab4 <_strtod_l+0x91c>
 8004a06:	9b05      	ldr	r3, [sp, #20]
 8004a08:	4648      	mov	r0, r9
 8004a0a:	b1eb      	cbz	r3, 8004a48 <_strtod_l+0x8b0>
 8004a0c:	4653      	mov	r3, sl
 8004a0e:	4aad      	ldr	r2, [pc, #692]	; (8004cc4 <_strtod_l+0xb2c>)
 8004a10:	f04f 31ff 	mov.w	r1, #4294967295
 8004a14:	401a      	ands	r2, r3
 8004a16:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004a1a:	d818      	bhi.n	8004a4e <_strtod_l+0x8b6>
 8004a1c:	0d12      	lsrs	r2, r2, #20
 8004a1e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004a22:	fa01 f303 	lsl.w	r3, r1, r3
 8004a26:	4298      	cmp	r0, r3
 8004a28:	d144      	bne.n	8004ab4 <_strtod_l+0x91c>
 8004a2a:	4ba7      	ldr	r3, [pc, #668]	; (8004cc8 <_strtod_l+0xb30>)
 8004a2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d102      	bne.n	8004a38 <_strtod_l+0x8a0>
 8004a32:	3001      	adds	r0, #1
 8004a34:	f43f add2 	beq.w	80045dc <_strtod_l+0x444>
 8004a38:	4ba2      	ldr	r3, [pc, #648]	; (8004cc4 <_strtod_l+0xb2c>)
 8004a3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a3c:	f04f 0900 	mov.w	r9, #0
 8004a40:	401a      	ands	r2, r3
 8004a42:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8004a46:	e79f      	b.n	8004988 <_strtod_l+0x7f0>
 8004a48:	f04f 33ff 	mov.w	r3, #4294967295
 8004a4c:	e7eb      	b.n	8004a26 <_strtod_l+0x88e>
 8004a4e:	460b      	mov	r3, r1
 8004a50:	e7e9      	b.n	8004a26 <_strtod_l+0x88e>
 8004a52:	bb7b      	cbnz	r3, 8004ab4 <_strtod_l+0x91c>
 8004a54:	f1b9 0f00 	cmp.w	r9, #0
 8004a58:	d12c      	bne.n	8004ab4 <_strtod_l+0x91c>
 8004a5a:	9905      	ldr	r1, [sp, #20]
 8004a5c:	4653      	mov	r3, sl
 8004a5e:	4a99      	ldr	r2, [pc, #612]	; (8004cc4 <_strtod_l+0xb2c>)
 8004a60:	b1f1      	cbz	r1, 8004aa0 <_strtod_l+0x908>
 8004a62:	ea02 010a 	and.w	r1, r2, sl
 8004a66:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004a6a:	dc19      	bgt.n	8004aa0 <_strtod_l+0x908>
 8004a6c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004a70:	f77f ae51 	ble.w	8004716 <_strtod_l+0x57e>
 8004a74:	2300      	movs	r3, #0
 8004a76:	4a95      	ldr	r2, [pc, #596]	; (8004ccc <_strtod_l+0xb34>)
 8004a78:	4648      	mov	r0, r9
 8004a7a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8004a7e:	4651      	mov	r1, sl
 8004a80:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004a84:	f7fb fd28 	bl	80004d8 <__aeabi_dmul>
 8004a88:	4681      	mov	r9, r0
 8004a8a:	468a      	mov	sl, r1
 8004a8c:	2900      	cmp	r1, #0
 8004a8e:	f47f adb0 	bne.w	80045f2 <_strtod_l+0x45a>
 8004a92:	2800      	cmp	r0, #0
 8004a94:	f47f adad 	bne.w	80045f2 <_strtod_l+0x45a>
 8004a98:	2322      	movs	r3, #34	; 0x22
 8004a9a:	f8cb 3000 	str.w	r3, [fp]
 8004a9e:	e5a8      	b.n	80045f2 <_strtod_l+0x45a>
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004aa6:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8004aaa:	f04f 39ff 	mov.w	r9, #4294967295
 8004aae:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8004ab2:	e769      	b.n	8004988 <_strtod_l+0x7f0>
 8004ab4:	b19d      	cbz	r5, 8004ade <_strtod_l+0x946>
 8004ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ab8:	421d      	tst	r5, r3
 8004aba:	f43f af65 	beq.w	8004988 <_strtod_l+0x7f0>
 8004abe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ac0:	9a05      	ldr	r2, [sp, #20]
 8004ac2:	4648      	mov	r0, r9
 8004ac4:	4651      	mov	r1, sl
 8004ac6:	b173      	cbz	r3, 8004ae6 <_strtod_l+0x94e>
 8004ac8:	f7ff fb44 	bl	8004154 <sulp>
 8004acc:	4602      	mov	r2, r0
 8004ace:	460b      	mov	r3, r1
 8004ad0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004ad4:	f7fb fb4a 	bl	800016c <__adddf3>
 8004ad8:	4681      	mov	r9, r0
 8004ada:	468a      	mov	sl, r1
 8004adc:	e754      	b.n	8004988 <_strtod_l+0x7f0>
 8004ade:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ae0:	ea13 0f09 	tst.w	r3, r9
 8004ae4:	e7e9      	b.n	8004aba <_strtod_l+0x922>
 8004ae6:	f7ff fb35 	bl	8004154 <sulp>
 8004aea:	4602      	mov	r2, r0
 8004aec:	460b      	mov	r3, r1
 8004aee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004af2:	f7fb fb39 	bl	8000168 <__aeabi_dsub>
 8004af6:	2200      	movs	r2, #0
 8004af8:	2300      	movs	r3, #0
 8004afa:	4681      	mov	r9, r0
 8004afc:	468a      	mov	sl, r1
 8004afe:	f7fb ff53 	bl	80009a8 <__aeabi_dcmpeq>
 8004b02:	2800      	cmp	r0, #0
 8004b04:	f47f ae07 	bne.w	8004716 <_strtod_l+0x57e>
 8004b08:	e73e      	b.n	8004988 <_strtod_l+0x7f0>
 8004b0a:	9904      	ldr	r1, [sp, #16]
 8004b0c:	4640      	mov	r0, r8
 8004b0e:	f001 ff22 	bl	8006956 <__ratio>
 8004b12:	2200      	movs	r2, #0
 8004b14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004b18:	4606      	mov	r6, r0
 8004b1a:	460f      	mov	r7, r1
 8004b1c:	f7fb ff58 	bl	80009d0 <__aeabi_dcmple>
 8004b20:	2800      	cmp	r0, #0
 8004b22:	d075      	beq.n	8004c10 <_strtod_l+0xa78>
 8004b24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d047      	beq.n	8004bba <_strtod_l+0xa22>
 8004b2a:	2600      	movs	r6, #0
 8004b2c:	4f68      	ldr	r7, [pc, #416]	; (8004cd0 <_strtod_l+0xb38>)
 8004b2e:	4d68      	ldr	r5, [pc, #416]	; (8004cd0 <_strtod_l+0xb38>)
 8004b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b36:	0d1b      	lsrs	r3, r3, #20
 8004b38:	051b      	lsls	r3, r3, #20
 8004b3a:	930f      	str	r3, [sp, #60]	; 0x3c
 8004b3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004b3e:	4b65      	ldr	r3, [pc, #404]	; (8004cd4 <_strtod_l+0xb3c>)
 8004b40:	429a      	cmp	r2, r3
 8004b42:	f040 80cf 	bne.w	8004ce4 <_strtod_l+0xb4c>
 8004b46:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004b4a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8004b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b50:	4648      	mov	r0, r9
 8004b52:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8004b56:	4651      	mov	r1, sl
 8004b58:	f001 fe38 	bl	80067cc <__ulp>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	460b      	mov	r3, r1
 8004b60:	4630      	mov	r0, r6
 8004b62:	4639      	mov	r1, r7
 8004b64:	f7fb fcb8 	bl	80004d8 <__aeabi_dmul>
 8004b68:	464a      	mov	r2, r9
 8004b6a:	4653      	mov	r3, sl
 8004b6c:	f7fb fafe 	bl	800016c <__adddf3>
 8004b70:	460b      	mov	r3, r1
 8004b72:	4954      	ldr	r1, [pc, #336]	; (8004cc4 <_strtod_l+0xb2c>)
 8004b74:	4a58      	ldr	r2, [pc, #352]	; (8004cd8 <_strtod_l+0xb40>)
 8004b76:	4019      	ands	r1, r3
 8004b78:	4291      	cmp	r1, r2
 8004b7a:	4681      	mov	r9, r0
 8004b7c:	d95e      	bls.n	8004c3c <_strtod_l+0xaa4>
 8004b7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b80:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d103      	bne.n	8004b90 <_strtod_l+0x9f8>
 8004b88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	f43f ad26 	beq.w	80045dc <_strtod_l+0x444>
 8004b90:	f04f 39ff 	mov.w	r9, #4294967295
 8004b94:	f8df a130 	ldr.w	sl, [pc, #304]	; 8004cc8 <_strtod_l+0xb30>
 8004b98:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004b9a:	4658      	mov	r0, fp
 8004b9c:	f001 fb7f 	bl	800629e <_Bfree>
 8004ba0:	9906      	ldr	r1, [sp, #24]
 8004ba2:	4658      	mov	r0, fp
 8004ba4:	f001 fb7b 	bl	800629e <_Bfree>
 8004ba8:	9904      	ldr	r1, [sp, #16]
 8004baa:	4658      	mov	r0, fp
 8004bac:	f001 fb77 	bl	800629e <_Bfree>
 8004bb0:	4641      	mov	r1, r8
 8004bb2:	4658      	mov	r0, fp
 8004bb4:	f001 fb73 	bl	800629e <_Bfree>
 8004bb8:	e617      	b.n	80047ea <_strtod_l+0x652>
 8004bba:	f1b9 0f00 	cmp.w	r9, #0
 8004bbe:	d119      	bne.n	8004bf4 <_strtod_l+0xa5c>
 8004bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bc6:	b9e3      	cbnz	r3, 8004c02 <_strtod_l+0xa6a>
 8004bc8:	2200      	movs	r2, #0
 8004bca:	4b41      	ldr	r3, [pc, #260]	; (8004cd0 <_strtod_l+0xb38>)
 8004bcc:	4630      	mov	r0, r6
 8004bce:	4639      	mov	r1, r7
 8004bd0:	f7fb fef4 	bl	80009bc <__aeabi_dcmplt>
 8004bd4:	b9c8      	cbnz	r0, 8004c0a <_strtod_l+0xa72>
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	4b40      	ldr	r3, [pc, #256]	; (8004cdc <_strtod_l+0xb44>)
 8004bda:	4630      	mov	r0, r6
 8004bdc:	4639      	mov	r1, r7
 8004bde:	f7fb fc7b 	bl	80004d8 <__aeabi_dmul>
 8004be2:	4604      	mov	r4, r0
 8004be4:	460d      	mov	r5, r1
 8004be6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004bea:	9418      	str	r4, [sp, #96]	; 0x60
 8004bec:	9319      	str	r3, [sp, #100]	; 0x64
 8004bee:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8004bf2:	e79d      	b.n	8004b30 <_strtod_l+0x998>
 8004bf4:	f1b9 0f01 	cmp.w	r9, #1
 8004bf8:	d103      	bne.n	8004c02 <_strtod_l+0xa6a>
 8004bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f43f ad8a 	beq.w	8004716 <_strtod_l+0x57e>
 8004c02:	2600      	movs	r6, #0
 8004c04:	4f36      	ldr	r7, [pc, #216]	; (8004ce0 <_strtod_l+0xb48>)
 8004c06:	2400      	movs	r4, #0
 8004c08:	e791      	b.n	8004b2e <_strtod_l+0x996>
 8004c0a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004c0c:	4d33      	ldr	r5, [pc, #204]	; (8004cdc <_strtod_l+0xb44>)
 8004c0e:	e7ea      	b.n	8004be6 <_strtod_l+0xa4e>
 8004c10:	4b32      	ldr	r3, [pc, #200]	; (8004cdc <_strtod_l+0xb44>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	4630      	mov	r0, r6
 8004c16:	4639      	mov	r1, r7
 8004c18:	f7fb fc5e 	bl	80004d8 <__aeabi_dmul>
 8004c1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004c1e:	4604      	mov	r4, r0
 8004c20:	460d      	mov	r5, r1
 8004c22:	b933      	cbnz	r3, 8004c32 <_strtod_l+0xa9a>
 8004c24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004c28:	9010      	str	r0, [sp, #64]	; 0x40
 8004c2a:	9311      	str	r3, [sp, #68]	; 0x44
 8004c2c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004c30:	e77e      	b.n	8004b30 <_strtod_l+0x998>
 8004c32:	4602      	mov	r2, r0
 8004c34:	460b      	mov	r3, r1
 8004c36:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004c3a:	e7f7      	b.n	8004c2c <_strtod_l+0xa94>
 8004c3c:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8004c40:	9b05      	ldr	r3, [sp, #20]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1a8      	bne.n	8004b98 <_strtod_l+0xa00>
 8004c46:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004c4a:	0d1b      	lsrs	r3, r3, #20
 8004c4c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004c4e:	051b      	lsls	r3, r3, #20
 8004c50:	429a      	cmp	r2, r3
 8004c52:	4656      	mov	r6, sl
 8004c54:	d1a0      	bne.n	8004b98 <_strtod_l+0xa00>
 8004c56:	4629      	mov	r1, r5
 8004c58:	4620      	mov	r0, r4
 8004c5a:	f7fb feed 	bl	8000a38 <__aeabi_d2iz>
 8004c5e:	f7fb fbd1 	bl	8000404 <__aeabi_i2d>
 8004c62:	460b      	mov	r3, r1
 8004c64:	4602      	mov	r2, r0
 8004c66:	4629      	mov	r1, r5
 8004c68:	4620      	mov	r0, r4
 8004c6a:	f7fb fa7d 	bl	8000168 <__aeabi_dsub>
 8004c6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004c70:	4604      	mov	r4, r0
 8004c72:	460d      	mov	r5, r1
 8004c74:	b933      	cbnz	r3, 8004c84 <_strtod_l+0xaec>
 8004c76:	f1b9 0f00 	cmp.w	r9, #0
 8004c7a:	d103      	bne.n	8004c84 <_strtod_l+0xaec>
 8004c7c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8004c80:	2e00      	cmp	r6, #0
 8004c82:	d06a      	beq.n	8004d5a <_strtod_l+0xbc2>
 8004c84:	a30a      	add	r3, pc, #40	; (adr r3, 8004cb0 <_strtod_l+0xb18>)
 8004c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8a:	4620      	mov	r0, r4
 8004c8c:	4629      	mov	r1, r5
 8004c8e:	f7fb fe95 	bl	80009bc <__aeabi_dcmplt>
 8004c92:	2800      	cmp	r0, #0
 8004c94:	f47f acad 	bne.w	80045f2 <_strtod_l+0x45a>
 8004c98:	a307      	add	r3, pc, #28	; (adr r3, 8004cb8 <_strtod_l+0xb20>)
 8004c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9e:	4620      	mov	r0, r4
 8004ca0:	4629      	mov	r1, r5
 8004ca2:	f7fb fea9 	bl	80009f8 <__aeabi_dcmpgt>
 8004ca6:	2800      	cmp	r0, #0
 8004ca8:	f43f af76 	beq.w	8004b98 <_strtod_l+0xa00>
 8004cac:	e4a1      	b.n	80045f2 <_strtod_l+0x45a>
 8004cae:	bf00      	nop
 8004cb0:	94a03595 	.word	0x94a03595
 8004cb4:	3fdfffff 	.word	0x3fdfffff
 8004cb8:	35afe535 	.word	0x35afe535
 8004cbc:	3fe00000 	.word	0x3fe00000
 8004cc0:	000fffff 	.word	0x000fffff
 8004cc4:	7ff00000 	.word	0x7ff00000
 8004cc8:	7fefffff 	.word	0x7fefffff
 8004ccc:	39500000 	.word	0x39500000
 8004cd0:	3ff00000 	.word	0x3ff00000
 8004cd4:	7fe00000 	.word	0x7fe00000
 8004cd8:	7c9fffff 	.word	0x7c9fffff
 8004cdc:	3fe00000 	.word	0x3fe00000
 8004ce0:	bff00000 	.word	0xbff00000
 8004ce4:	9b05      	ldr	r3, [sp, #20]
 8004ce6:	b313      	cbz	r3, 8004d2e <_strtod_l+0xb96>
 8004ce8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004cea:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004cee:	d81e      	bhi.n	8004d2e <_strtod_l+0xb96>
 8004cf0:	a325      	add	r3, pc, #148	; (adr r3, 8004d88 <_strtod_l+0xbf0>)
 8004cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf6:	4620      	mov	r0, r4
 8004cf8:	4629      	mov	r1, r5
 8004cfa:	f7fb fe69 	bl	80009d0 <__aeabi_dcmple>
 8004cfe:	b190      	cbz	r0, 8004d26 <_strtod_l+0xb8e>
 8004d00:	4629      	mov	r1, r5
 8004d02:	4620      	mov	r0, r4
 8004d04:	f7fb fec0 	bl	8000a88 <__aeabi_d2uiz>
 8004d08:	2800      	cmp	r0, #0
 8004d0a:	bf08      	it	eq
 8004d0c:	2001      	moveq	r0, #1
 8004d0e:	f7fb fb69 	bl	80003e4 <__aeabi_ui2d>
 8004d12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004d14:	4604      	mov	r4, r0
 8004d16:	460d      	mov	r5, r1
 8004d18:	b9d3      	cbnz	r3, 8004d50 <_strtod_l+0xbb8>
 8004d1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004d1e:	9012      	str	r0, [sp, #72]	; 0x48
 8004d20:	9313      	str	r3, [sp, #76]	; 0x4c
 8004d22:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8004d26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004d28:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004d2c:	1a9f      	subs	r7, r3, r2
 8004d2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004d32:	f001 fd4b 	bl	80067cc <__ulp>
 8004d36:	4602      	mov	r2, r0
 8004d38:	460b      	mov	r3, r1
 8004d3a:	4630      	mov	r0, r6
 8004d3c:	4639      	mov	r1, r7
 8004d3e:	f7fb fbcb 	bl	80004d8 <__aeabi_dmul>
 8004d42:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004d46:	f7fb fa11 	bl	800016c <__adddf3>
 8004d4a:	4681      	mov	r9, r0
 8004d4c:	468a      	mov	sl, r1
 8004d4e:	e777      	b.n	8004c40 <_strtod_l+0xaa8>
 8004d50:	4602      	mov	r2, r0
 8004d52:	460b      	mov	r3, r1
 8004d54:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8004d58:	e7e3      	b.n	8004d22 <_strtod_l+0xb8a>
 8004d5a:	a30d      	add	r3, pc, #52	; (adr r3, 8004d90 <_strtod_l+0xbf8>)
 8004d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d60:	f7fb fe2c 	bl	80009bc <__aeabi_dcmplt>
 8004d64:	e79f      	b.n	8004ca6 <_strtod_l+0xb0e>
 8004d66:	2300      	movs	r3, #0
 8004d68:	930d      	str	r3, [sp, #52]	; 0x34
 8004d6a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004d6c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004d6e:	6013      	str	r3, [r2, #0]
 8004d70:	f7ff ba55 	b.w	800421e <_strtod_l+0x86>
 8004d74:	2b65      	cmp	r3, #101	; 0x65
 8004d76:	f04f 0200 	mov.w	r2, #0
 8004d7a:	f43f ab42 	beq.w	8004402 <_strtod_l+0x26a>
 8004d7e:	2101      	movs	r1, #1
 8004d80:	4614      	mov	r4, r2
 8004d82:	9105      	str	r1, [sp, #20]
 8004d84:	f7ff babf 	b.w	8004306 <_strtod_l+0x16e>
 8004d88:	ffc00000 	.word	0xffc00000
 8004d8c:	41dfffff 	.word	0x41dfffff
 8004d90:	94a03595 	.word	0x94a03595
 8004d94:	3fcfffff 	.word	0x3fcfffff

08004d98 <_strtod_r>:
 8004d98:	4b05      	ldr	r3, [pc, #20]	; (8004db0 <_strtod_r+0x18>)
 8004d9a:	b410      	push	{r4}
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4c05      	ldr	r4, [pc, #20]	; (8004db4 <_strtod_r+0x1c>)
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	bf08      	it	eq
 8004da6:	4623      	moveq	r3, r4
 8004da8:	bc10      	pop	{r4}
 8004daa:	f7ff b9f5 	b.w	8004198 <_strtod_l>
 8004dae:	bf00      	nop
 8004db0:	2000000c 	.word	0x2000000c
 8004db4:	20000070 	.word	0x20000070

08004db8 <_strtol_l.isra.0>:
 8004db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dbc:	4680      	mov	r8, r0
 8004dbe:	4689      	mov	r9, r1
 8004dc0:	4692      	mov	sl, r2
 8004dc2:	461e      	mov	r6, r3
 8004dc4:	460f      	mov	r7, r1
 8004dc6:	463d      	mov	r5, r7
 8004dc8:	9808      	ldr	r0, [sp, #32]
 8004dca:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004dce:	f001 f9eb 	bl	80061a8 <__locale_ctype_ptr_l>
 8004dd2:	4420      	add	r0, r4
 8004dd4:	7843      	ldrb	r3, [r0, #1]
 8004dd6:	f013 0308 	ands.w	r3, r3, #8
 8004dda:	d132      	bne.n	8004e42 <_strtol_l.isra.0+0x8a>
 8004ddc:	2c2d      	cmp	r4, #45	; 0x2d
 8004dde:	d132      	bne.n	8004e46 <_strtol_l.isra.0+0x8e>
 8004de0:	2201      	movs	r2, #1
 8004de2:	787c      	ldrb	r4, [r7, #1]
 8004de4:	1cbd      	adds	r5, r7, #2
 8004de6:	2e00      	cmp	r6, #0
 8004de8:	d05d      	beq.n	8004ea6 <_strtol_l.isra.0+0xee>
 8004dea:	2e10      	cmp	r6, #16
 8004dec:	d109      	bne.n	8004e02 <_strtol_l.isra.0+0x4a>
 8004dee:	2c30      	cmp	r4, #48	; 0x30
 8004df0:	d107      	bne.n	8004e02 <_strtol_l.isra.0+0x4a>
 8004df2:	782b      	ldrb	r3, [r5, #0]
 8004df4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004df8:	2b58      	cmp	r3, #88	; 0x58
 8004dfa:	d14f      	bne.n	8004e9c <_strtol_l.isra.0+0xe4>
 8004dfc:	2610      	movs	r6, #16
 8004dfe:	786c      	ldrb	r4, [r5, #1]
 8004e00:	3502      	adds	r5, #2
 8004e02:	2a00      	cmp	r2, #0
 8004e04:	bf14      	ite	ne
 8004e06:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8004e0a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8004e0e:	2700      	movs	r7, #0
 8004e10:	fbb1 fcf6 	udiv	ip, r1, r6
 8004e14:	4638      	mov	r0, r7
 8004e16:	fb06 1e1c 	mls	lr, r6, ip, r1
 8004e1a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8004e1e:	2b09      	cmp	r3, #9
 8004e20:	d817      	bhi.n	8004e52 <_strtol_l.isra.0+0x9a>
 8004e22:	461c      	mov	r4, r3
 8004e24:	42a6      	cmp	r6, r4
 8004e26:	dd23      	ble.n	8004e70 <_strtol_l.isra.0+0xb8>
 8004e28:	1c7b      	adds	r3, r7, #1
 8004e2a:	d007      	beq.n	8004e3c <_strtol_l.isra.0+0x84>
 8004e2c:	4584      	cmp	ip, r0
 8004e2e:	d31c      	bcc.n	8004e6a <_strtol_l.isra.0+0xb2>
 8004e30:	d101      	bne.n	8004e36 <_strtol_l.isra.0+0x7e>
 8004e32:	45a6      	cmp	lr, r4
 8004e34:	db19      	blt.n	8004e6a <_strtol_l.isra.0+0xb2>
 8004e36:	2701      	movs	r7, #1
 8004e38:	fb00 4006 	mla	r0, r0, r6, r4
 8004e3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004e40:	e7eb      	b.n	8004e1a <_strtol_l.isra.0+0x62>
 8004e42:	462f      	mov	r7, r5
 8004e44:	e7bf      	b.n	8004dc6 <_strtol_l.isra.0+0xe>
 8004e46:	2c2b      	cmp	r4, #43	; 0x2b
 8004e48:	bf04      	itt	eq
 8004e4a:	1cbd      	addeq	r5, r7, #2
 8004e4c:	787c      	ldrbeq	r4, [r7, #1]
 8004e4e:	461a      	mov	r2, r3
 8004e50:	e7c9      	b.n	8004de6 <_strtol_l.isra.0+0x2e>
 8004e52:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004e56:	2b19      	cmp	r3, #25
 8004e58:	d801      	bhi.n	8004e5e <_strtol_l.isra.0+0xa6>
 8004e5a:	3c37      	subs	r4, #55	; 0x37
 8004e5c:	e7e2      	b.n	8004e24 <_strtol_l.isra.0+0x6c>
 8004e5e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8004e62:	2b19      	cmp	r3, #25
 8004e64:	d804      	bhi.n	8004e70 <_strtol_l.isra.0+0xb8>
 8004e66:	3c57      	subs	r4, #87	; 0x57
 8004e68:	e7dc      	b.n	8004e24 <_strtol_l.isra.0+0x6c>
 8004e6a:	f04f 37ff 	mov.w	r7, #4294967295
 8004e6e:	e7e5      	b.n	8004e3c <_strtol_l.isra.0+0x84>
 8004e70:	1c7b      	adds	r3, r7, #1
 8004e72:	d108      	bne.n	8004e86 <_strtol_l.isra.0+0xce>
 8004e74:	2322      	movs	r3, #34	; 0x22
 8004e76:	4608      	mov	r0, r1
 8004e78:	f8c8 3000 	str.w	r3, [r8]
 8004e7c:	f1ba 0f00 	cmp.w	sl, #0
 8004e80:	d107      	bne.n	8004e92 <_strtol_l.isra.0+0xda>
 8004e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e86:	b102      	cbz	r2, 8004e8a <_strtol_l.isra.0+0xd2>
 8004e88:	4240      	negs	r0, r0
 8004e8a:	f1ba 0f00 	cmp.w	sl, #0
 8004e8e:	d0f8      	beq.n	8004e82 <_strtol_l.isra.0+0xca>
 8004e90:	b10f      	cbz	r7, 8004e96 <_strtol_l.isra.0+0xde>
 8004e92:	f105 39ff 	add.w	r9, r5, #4294967295
 8004e96:	f8ca 9000 	str.w	r9, [sl]
 8004e9a:	e7f2      	b.n	8004e82 <_strtol_l.isra.0+0xca>
 8004e9c:	2430      	movs	r4, #48	; 0x30
 8004e9e:	2e00      	cmp	r6, #0
 8004ea0:	d1af      	bne.n	8004e02 <_strtol_l.isra.0+0x4a>
 8004ea2:	2608      	movs	r6, #8
 8004ea4:	e7ad      	b.n	8004e02 <_strtol_l.isra.0+0x4a>
 8004ea6:	2c30      	cmp	r4, #48	; 0x30
 8004ea8:	d0a3      	beq.n	8004df2 <_strtol_l.isra.0+0x3a>
 8004eaa:	260a      	movs	r6, #10
 8004eac:	e7a9      	b.n	8004e02 <_strtol_l.isra.0+0x4a>
	...

08004eb0 <_strtol_r>:
 8004eb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004eb2:	4c06      	ldr	r4, [pc, #24]	; (8004ecc <_strtol_r+0x1c>)
 8004eb4:	4d06      	ldr	r5, [pc, #24]	; (8004ed0 <_strtol_r+0x20>)
 8004eb6:	6824      	ldr	r4, [r4, #0]
 8004eb8:	6a24      	ldr	r4, [r4, #32]
 8004eba:	2c00      	cmp	r4, #0
 8004ebc:	bf08      	it	eq
 8004ebe:	462c      	moveq	r4, r5
 8004ec0:	9400      	str	r4, [sp, #0]
 8004ec2:	f7ff ff79 	bl	8004db8 <_strtol_l.isra.0>
 8004ec6:	b003      	add	sp, #12
 8004ec8:	bd30      	pop	{r4, r5, pc}
 8004eca:	bf00      	nop
 8004ecc:	2000000c 	.word	0x2000000c
 8004ed0:	20000070 	.word	0x20000070

08004ed4 <quorem>:
 8004ed4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ed8:	6903      	ldr	r3, [r0, #16]
 8004eda:	690c      	ldr	r4, [r1, #16]
 8004edc:	4680      	mov	r8, r0
 8004ede:	42a3      	cmp	r3, r4
 8004ee0:	f2c0 8084 	blt.w	8004fec <quorem+0x118>
 8004ee4:	3c01      	subs	r4, #1
 8004ee6:	f101 0714 	add.w	r7, r1, #20
 8004eea:	f100 0614 	add.w	r6, r0, #20
 8004eee:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004ef2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004ef6:	3501      	adds	r5, #1
 8004ef8:	fbb0 f5f5 	udiv	r5, r0, r5
 8004efc:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004f00:	eb06 030c 	add.w	r3, r6, ip
 8004f04:	eb07 090c 	add.w	r9, r7, ip
 8004f08:	9301      	str	r3, [sp, #4]
 8004f0a:	b39d      	cbz	r5, 8004f74 <quorem+0xa0>
 8004f0c:	f04f 0a00 	mov.w	sl, #0
 8004f10:	4638      	mov	r0, r7
 8004f12:	46b6      	mov	lr, r6
 8004f14:	46d3      	mov	fp, sl
 8004f16:	f850 2b04 	ldr.w	r2, [r0], #4
 8004f1a:	b293      	uxth	r3, r2
 8004f1c:	fb05 a303 	mla	r3, r5, r3, sl
 8004f20:	0c12      	lsrs	r2, r2, #16
 8004f22:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004f26:	fb05 a202 	mla	r2, r5, r2, sl
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	ebab 0303 	sub.w	r3, fp, r3
 8004f30:	f8de b000 	ldr.w	fp, [lr]
 8004f34:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004f38:	fa1f fb8b 	uxth.w	fp, fp
 8004f3c:	445b      	add	r3, fp
 8004f3e:	fa1f fb82 	uxth.w	fp, r2
 8004f42:	f8de 2000 	ldr.w	r2, [lr]
 8004f46:	4581      	cmp	r9, r0
 8004f48:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004f4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f56:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004f5a:	f84e 3b04 	str.w	r3, [lr], #4
 8004f5e:	d2da      	bcs.n	8004f16 <quorem+0x42>
 8004f60:	f856 300c 	ldr.w	r3, [r6, ip]
 8004f64:	b933      	cbnz	r3, 8004f74 <quorem+0xa0>
 8004f66:	9b01      	ldr	r3, [sp, #4]
 8004f68:	3b04      	subs	r3, #4
 8004f6a:	429e      	cmp	r6, r3
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	d331      	bcc.n	8004fd4 <quorem+0x100>
 8004f70:	f8c8 4010 	str.w	r4, [r8, #16]
 8004f74:	4640      	mov	r0, r8
 8004f76:	f001 fbb1 	bl	80066dc <__mcmp>
 8004f7a:	2800      	cmp	r0, #0
 8004f7c:	db26      	blt.n	8004fcc <quorem+0xf8>
 8004f7e:	4630      	mov	r0, r6
 8004f80:	f04f 0c00 	mov.w	ip, #0
 8004f84:	3501      	adds	r5, #1
 8004f86:	f857 1b04 	ldr.w	r1, [r7], #4
 8004f8a:	f8d0 e000 	ldr.w	lr, [r0]
 8004f8e:	b28b      	uxth	r3, r1
 8004f90:	ebac 0303 	sub.w	r3, ip, r3
 8004f94:	fa1f f28e 	uxth.w	r2, lr
 8004f98:	4413      	add	r3, r2
 8004f9a:	0c0a      	lsrs	r2, r1, #16
 8004f9c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004fa0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004faa:	45b9      	cmp	r9, r7
 8004fac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004fb0:	f840 3b04 	str.w	r3, [r0], #4
 8004fb4:	d2e7      	bcs.n	8004f86 <quorem+0xb2>
 8004fb6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004fba:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004fbe:	b92a      	cbnz	r2, 8004fcc <quorem+0xf8>
 8004fc0:	3b04      	subs	r3, #4
 8004fc2:	429e      	cmp	r6, r3
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	d30b      	bcc.n	8004fe0 <quorem+0x10c>
 8004fc8:	f8c8 4010 	str.w	r4, [r8, #16]
 8004fcc:	4628      	mov	r0, r5
 8004fce:	b003      	add	sp, #12
 8004fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fd4:	6812      	ldr	r2, [r2, #0]
 8004fd6:	3b04      	subs	r3, #4
 8004fd8:	2a00      	cmp	r2, #0
 8004fda:	d1c9      	bne.n	8004f70 <quorem+0x9c>
 8004fdc:	3c01      	subs	r4, #1
 8004fde:	e7c4      	b.n	8004f6a <quorem+0x96>
 8004fe0:	6812      	ldr	r2, [r2, #0]
 8004fe2:	3b04      	subs	r3, #4
 8004fe4:	2a00      	cmp	r2, #0
 8004fe6:	d1ef      	bne.n	8004fc8 <quorem+0xf4>
 8004fe8:	3c01      	subs	r4, #1
 8004fea:	e7ea      	b.n	8004fc2 <quorem+0xee>
 8004fec:	2000      	movs	r0, #0
 8004fee:	e7ee      	b.n	8004fce <quorem+0xfa>

08004ff0 <_dtoa_r>:
 8004ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ff4:	4616      	mov	r6, r2
 8004ff6:	461f      	mov	r7, r3
 8004ff8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004ffa:	b095      	sub	sp, #84	; 0x54
 8004ffc:	4604      	mov	r4, r0
 8004ffe:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8005002:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005006:	b93d      	cbnz	r5, 8005018 <_dtoa_r+0x28>
 8005008:	2010      	movs	r0, #16
 800500a:	f001 f8e1 	bl	80061d0 <malloc>
 800500e:	6260      	str	r0, [r4, #36]	; 0x24
 8005010:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005014:	6005      	str	r5, [r0, #0]
 8005016:	60c5      	str	r5, [r0, #12]
 8005018:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800501a:	6819      	ldr	r1, [r3, #0]
 800501c:	b151      	cbz	r1, 8005034 <_dtoa_r+0x44>
 800501e:	685a      	ldr	r2, [r3, #4]
 8005020:	2301      	movs	r3, #1
 8005022:	4093      	lsls	r3, r2
 8005024:	604a      	str	r2, [r1, #4]
 8005026:	608b      	str	r3, [r1, #8]
 8005028:	4620      	mov	r0, r4
 800502a:	f001 f938 	bl	800629e <_Bfree>
 800502e:	2200      	movs	r2, #0
 8005030:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005032:	601a      	str	r2, [r3, #0]
 8005034:	1e3b      	subs	r3, r7, #0
 8005036:	bfaf      	iteee	ge
 8005038:	2300      	movge	r3, #0
 800503a:	2201      	movlt	r2, #1
 800503c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005040:	9303      	strlt	r3, [sp, #12]
 8005042:	bfac      	ite	ge
 8005044:	f8c8 3000 	strge.w	r3, [r8]
 8005048:	f8c8 2000 	strlt.w	r2, [r8]
 800504c:	4bae      	ldr	r3, [pc, #696]	; (8005308 <_dtoa_r+0x318>)
 800504e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005052:	ea33 0308 	bics.w	r3, r3, r8
 8005056:	d11b      	bne.n	8005090 <_dtoa_r+0xa0>
 8005058:	f242 730f 	movw	r3, #9999	; 0x270f
 800505c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800505e:	6013      	str	r3, [r2, #0]
 8005060:	9b02      	ldr	r3, [sp, #8]
 8005062:	b923      	cbnz	r3, 800506e <_dtoa_r+0x7e>
 8005064:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005068:	2800      	cmp	r0, #0
 800506a:	f000 8545 	beq.w	8005af8 <_dtoa_r+0xb08>
 800506e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005070:	b953      	cbnz	r3, 8005088 <_dtoa_r+0x98>
 8005072:	4ba6      	ldr	r3, [pc, #664]	; (800530c <_dtoa_r+0x31c>)
 8005074:	e021      	b.n	80050ba <_dtoa_r+0xca>
 8005076:	4ba6      	ldr	r3, [pc, #664]	; (8005310 <_dtoa_r+0x320>)
 8005078:	9306      	str	r3, [sp, #24]
 800507a:	3308      	adds	r3, #8
 800507c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800507e:	6013      	str	r3, [r2, #0]
 8005080:	9806      	ldr	r0, [sp, #24]
 8005082:	b015      	add	sp, #84	; 0x54
 8005084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005088:	4ba0      	ldr	r3, [pc, #640]	; (800530c <_dtoa_r+0x31c>)
 800508a:	9306      	str	r3, [sp, #24]
 800508c:	3303      	adds	r3, #3
 800508e:	e7f5      	b.n	800507c <_dtoa_r+0x8c>
 8005090:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005094:	2200      	movs	r2, #0
 8005096:	2300      	movs	r3, #0
 8005098:	4630      	mov	r0, r6
 800509a:	4639      	mov	r1, r7
 800509c:	f7fb fc84 	bl	80009a8 <__aeabi_dcmpeq>
 80050a0:	4682      	mov	sl, r0
 80050a2:	b160      	cbz	r0, 80050be <_dtoa_r+0xce>
 80050a4:	2301      	movs	r3, #1
 80050a6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80050a8:	6013      	str	r3, [r2, #0]
 80050aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f000 8520 	beq.w	8005af2 <_dtoa_r+0xb02>
 80050b2:	4b98      	ldr	r3, [pc, #608]	; (8005314 <_dtoa_r+0x324>)
 80050b4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80050b6:	6013      	str	r3, [r2, #0]
 80050b8:	3b01      	subs	r3, #1
 80050ba:	9306      	str	r3, [sp, #24]
 80050bc:	e7e0      	b.n	8005080 <_dtoa_r+0x90>
 80050be:	ab12      	add	r3, sp, #72	; 0x48
 80050c0:	9301      	str	r3, [sp, #4]
 80050c2:	ab13      	add	r3, sp, #76	; 0x4c
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	4632      	mov	r2, r6
 80050c8:	463b      	mov	r3, r7
 80050ca:	4620      	mov	r0, r4
 80050cc:	f001 fbf4 	bl	80068b8 <__d2b>
 80050d0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80050d4:	4683      	mov	fp, r0
 80050d6:	2d00      	cmp	r5, #0
 80050d8:	d07d      	beq.n	80051d6 <_dtoa_r+0x1e6>
 80050da:	46b0      	mov	r8, r6
 80050dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80050e0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80050e4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80050e8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80050ec:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80050f0:	2200      	movs	r2, #0
 80050f2:	4b89      	ldr	r3, [pc, #548]	; (8005318 <_dtoa_r+0x328>)
 80050f4:	4640      	mov	r0, r8
 80050f6:	4649      	mov	r1, r9
 80050f8:	f7fb f836 	bl	8000168 <__aeabi_dsub>
 80050fc:	a37c      	add	r3, pc, #496	; (adr r3, 80052f0 <_dtoa_r+0x300>)
 80050fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005102:	f7fb f9e9 	bl	80004d8 <__aeabi_dmul>
 8005106:	a37c      	add	r3, pc, #496	; (adr r3, 80052f8 <_dtoa_r+0x308>)
 8005108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510c:	f7fb f82e 	bl	800016c <__adddf3>
 8005110:	4606      	mov	r6, r0
 8005112:	4628      	mov	r0, r5
 8005114:	460f      	mov	r7, r1
 8005116:	f7fb f975 	bl	8000404 <__aeabi_i2d>
 800511a:	a379      	add	r3, pc, #484	; (adr r3, 8005300 <_dtoa_r+0x310>)
 800511c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005120:	f7fb f9da 	bl	80004d8 <__aeabi_dmul>
 8005124:	4602      	mov	r2, r0
 8005126:	460b      	mov	r3, r1
 8005128:	4630      	mov	r0, r6
 800512a:	4639      	mov	r1, r7
 800512c:	f7fb f81e 	bl	800016c <__adddf3>
 8005130:	4606      	mov	r6, r0
 8005132:	460f      	mov	r7, r1
 8005134:	f7fb fc80 	bl	8000a38 <__aeabi_d2iz>
 8005138:	2200      	movs	r2, #0
 800513a:	4682      	mov	sl, r0
 800513c:	2300      	movs	r3, #0
 800513e:	4630      	mov	r0, r6
 8005140:	4639      	mov	r1, r7
 8005142:	f7fb fc3b 	bl	80009bc <__aeabi_dcmplt>
 8005146:	b148      	cbz	r0, 800515c <_dtoa_r+0x16c>
 8005148:	4650      	mov	r0, sl
 800514a:	f7fb f95b 	bl	8000404 <__aeabi_i2d>
 800514e:	4632      	mov	r2, r6
 8005150:	463b      	mov	r3, r7
 8005152:	f7fb fc29 	bl	80009a8 <__aeabi_dcmpeq>
 8005156:	b908      	cbnz	r0, 800515c <_dtoa_r+0x16c>
 8005158:	f10a 3aff 	add.w	sl, sl, #4294967295
 800515c:	f1ba 0f16 	cmp.w	sl, #22
 8005160:	d85a      	bhi.n	8005218 <_dtoa_r+0x228>
 8005162:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005166:	496d      	ldr	r1, [pc, #436]	; (800531c <_dtoa_r+0x32c>)
 8005168:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800516c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005170:	f7fb fc42 	bl	80009f8 <__aeabi_dcmpgt>
 8005174:	2800      	cmp	r0, #0
 8005176:	d051      	beq.n	800521c <_dtoa_r+0x22c>
 8005178:	2300      	movs	r3, #0
 800517a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800517e:	930d      	str	r3, [sp, #52]	; 0x34
 8005180:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005182:	1b5d      	subs	r5, r3, r5
 8005184:	1e6b      	subs	r3, r5, #1
 8005186:	9307      	str	r3, [sp, #28]
 8005188:	bf43      	ittte	mi
 800518a:	2300      	movmi	r3, #0
 800518c:	f1c5 0901 	rsbmi	r9, r5, #1
 8005190:	9307      	strmi	r3, [sp, #28]
 8005192:	f04f 0900 	movpl.w	r9, #0
 8005196:	f1ba 0f00 	cmp.w	sl, #0
 800519a:	db41      	blt.n	8005220 <_dtoa_r+0x230>
 800519c:	9b07      	ldr	r3, [sp, #28]
 800519e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80051a2:	4453      	add	r3, sl
 80051a4:	9307      	str	r3, [sp, #28]
 80051a6:	2300      	movs	r3, #0
 80051a8:	9308      	str	r3, [sp, #32]
 80051aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80051ac:	2b09      	cmp	r3, #9
 80051ae:	f200 808f 	bhi.w	80052d0 <_dtoa_r+0x2e0>
 80051b2:	2b05      	cmp	r3, #5
 80051b4:	bfc4      	itt	gt
 80051b6:	3b04      	subgt	r3, #4
 80051b8:	931e      	strgt	r3, [sp, #120]	; 0x78
 80051ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80051bc:	bfc8      	it	gt
 80051be:	2500      	movgt	r5, #0
 80051c0:	f1a3 0302 	sub.w	r3, r3, #2
 80051c4:	bfd8      	it	le
 80051c6:	2501      	movle	r5, #1
 80051c8:	2b03      	cmp	r3, #3
 80051ca:	f200 808d 	bhi.w	80052e8 <_dtoa_r+0x2f8>
 80051ce:	e8df f003 	tbb	[pc, r3]
 80051d2:	7d7b      	.short	0x7d7b
 80051d4:	6f2f      	.short	0x6f2f
 80051d6:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80051da:	441d      	add	r5, r3
 80051dc:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80051e0:	2820      	cmp	r0, #32
 80051e2:	dd13      	ble.n	800520c <_dtoa_r+0x21c>
 80051e4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80051e8:	9b02      	ldr	r3, [sp, #8]
 80051ea:	fa08 f800 	lsl.w	r8, r8, r0
 80051ee:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80051f2:	fa23 f000 	lsr.w	r0, r3, r0
 80051f6:	ea48 0000 	orr.w	r0, r8, r0
 80051fa:	f7fb f8f3 	bl	80003e4 <__aeabi_ui2d>
 80051fe:	2301      	movs	r3, #1
 8005200:	4680      	mov	r8, r0
 8005202:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8005206:	3d01      	subs	r5, #1
 8005208:	9310      	str	r3, [sp, #64]	; 0x40
 800520a:	e771      	b.n	80050f0 <_dtoa_r+0x100>
 800520c:	9b02      	ldr	r3, [sp, #8]
 800520e:	f1c0 0020 	rsb	r0, r0, #32
 8005212:	fa03 f000 	lsl.w	r0, r3, r0
 8005216:	e7f0      	b.n	80051fa <_dtoa_r+0x20a>
 8005218:	2301      	movs	r3, #1
 800521a:	e7b0      	b.n	800517e <_dtoa_r+0x18e>
 800521c:	900d      	str	r0, [sp, #52]	; 0x34
 800521e:	e7af      	b.n	8005180 <_dtoa_r+0x190>
 8005220:	f1ca 0300 	rsb	r3, sl, #0
 8005224:	9308      	str	r3, [sp, #32]
 8005226:	2300      	movs	r3, #0
 8005228:	eba9 090a 	sub.w	r9, r9, sl
 800522c:	930c      	str	r3, [sp, #48]	; 0x30
 800522e:	e7bc      	b.n	80051aa <_dtoa_r+0x1ba>
 8005230:	2301      	movs	r3, #1
 8005232:	9309      	str	r3, [sp, #36]	; 0x24
 8005234:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005236:	2b00      	cmp	r3, #0
 8005238:	dd74      	ble.n	8005324 <_dtoa_r+0x334>
 800523a:	4698      	mov	r8, r3
 800523c:	9304      	str	r3, [sp, #16]
 800523e:	2200      	movs	r2, #0
 8005240:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005242:	6072      	str	r2, [r6, #4]
 8005244:	2204      	movs	r2, #4
 8005246:	f102 0014 	add.w	r0, r2, #20
 800524a:	4298      	cmp	r0, r3
 800524c:	6871      	ldr	r1, [r6, #4]
 800524e:	d96e      	bls.n	800532e <_dtoa_r+0x33e>
 8005250:	4620      	mov	r0, r4
 8005252:	f000 fff0 	bl	8006236 <_Balloc>
 8005256:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005258:	6030      	str	r0, [r6, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f1b8 0f0e 	cmp.w	r8, #14
 8005260:	9306      	str	r3, [sp, #24]
 8005262:	f200 80ed 	bhi.w	8005440 <_dtoa_r+0x450>
 8005266:	2d00      	cmp	r5, #0
 8005268:	f000 80ea 	beq.w	8005440 <_dtoa_r+0x450>
 800526c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005270:	f1ba 0f00 	cmp.w	sl, #0
 8005274:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005278:	dd77      	ble.n	800536a <_dtoa_r+0x37a>
 800527a:	4a28      	ldr	r2, [pc, #160]	; (800531c <_dtoa_r+0x32c>)
 800527c:	f00a 030f 	and.w	r3, sl, #15
 8005280:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005284:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005288:	06f0      	lsls	r0, r6, #27
 800528a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005292:	d568      	bpl.n	8005366 <_dtoa_r+0x376>
 8005294:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005298:	4b21      	ldr	r3, [pc, #132]	; (8005320 <_dtoa_r+0x330>)
 800529a:	2503      	movs	r5, #3
 800529c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80052a0:	f7fb fa44 	bl	800072c <__aeabi_ddiv>
 80052a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052a8:	f006 060f 	and.w	r6, r6, #15
 80052ac:	4f1c      	ldr	r7, [pc, #112]	; (8005320 <_dtoa_r+0x330>)
 80052ae:	e04f      	b.n	8005350 <_dtoa_r+0x360>
 80052b0:	2301      	movs	r3, #1
 80052b2:	9309      	str	r3, [sp, #36]	; 0x24
 80052b4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80052b6:	4453      	add	r3, sl
 80052b8:	f103 0801 	add.w	r8, r3, #1
 80052bc:	9304      	str	r3, [sp, #16]
 80052be:	4643      	mov	r3, r8
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	bfb8      	it	lt
 80052c4:	2301      	movlt	r3, #1
 80052c6:	e7ba      	b.n	800523e <_dtoa_r+0x24e>
 80052c8:	2300      	movs	r3, #0
 80052ca:	e7b2      	b.n	8005232 <_dtoa_r+0x242>
 80052cc:	2300      	movs	r3, #0
 80052ce:	e7f0      	b.n	80052b2 <_dtoa_r+0x2c2>
 80052d0:	2501      	movs	r5, #1
 80052d2:	2300      	movs	r3, #0
 80052d4:	9509      	str	r5, [sp, #36]	; 0x24
 80052d6:	931e      	str	r3, [sp, #120]	; 0x78
 80052d8:	f04f 33ff 	mov.w	r3, #4294967295
 80052dc:	2200      	movs	r2, #0
 80052de:	9304      	str	r3, [sp, #16]
 80052e0:	4698      	mov	r8, r3
 80052e2:	2312      	movs	r3, #18
 80052e4:	921f      	str	r2, [sp, #124]	; 0x7c
 80052e6:	e7aa      	b.n	800523e <_dtoa_r+0x24e>
 80052e8:	2301      	movs	r3, #1
 80052ea:	9309      	str	r3, [sp, #36]	; 0x24
 80052ec:	e7f4      	b.n	80052d8 <_dtoa_r+0x2e8>
 80052ee:	bf00      	nop
 80052f0:	636f4361 	.word	0x636f4361
 80052f4:	3fd287a7 	.word	0x3fd287a7
 80052f8:	8b60c8b3 	.word	0x8b60c8b3
 80052fc:	3fc68a28 	.word	0x3fc68a28
 8005300:	509f79fb 	.word	0x509f79fb
 8005304:	3fd34413 	.word	0x3fd34413
 8005308:	7ff00000 	.word	0x7ff00000
 800530c:	08007019 	.word	0x08007019
 8005310:	08007010 	.word	0x08007010
 8005314:	08006f97 	.word	0x08006f97
 8005318:	3ff80000 	.word	0x3ff80000
 800531c:	08007050 	.word	0x08007050
 8005320:	08007028 	.word	0x08007028
 8005324:	2301      	movs	r3, #1
 8005326:	9304      	str	r3, [sp, #16]
 8005328:	4698      	mov	r8, r3
 800532a:	461a      	mov	r2, r3
 800532c:	e7da      	b.n	80052e4 <_dtoa_r+0x2f4>
 800532e:	3101      	adds	r1, #1
 8005330:	6071      	str	r1, [r6, #4]
 8005332:	0052      	lsls	r2, r2, #1
 8005334:	e787      	b.n	8005246 <_dtoa_r+0x256>
 8005336:	07f1      	lsls	r1, r6, #31
 8005338:	d508      	bpl.n	800534c <_dtoa_r+0x35c>
 800533a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800533e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005342:	f7fb f8c9 	bl	80004d8 <__aeabi_dmul>
 8005346:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800534a:	3501      	adds	r5, #1
 800534c:	1076      	asrs	r6, r6, #1
 800534e:	3708      	adds	r7, #8
 8005350:	2e00      	cmp	r6, #0
 8005352:	d1f0      	bne.n	8005336 <_dtoa_r+0x346>
 8005354:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005358:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800535c:	f7fb f9e6 	bl	800072c <__aeabi_ddiv>
 8005360:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005364:	e01b      	b.n	800539e <_dtoa_r+0x3ae>
 8005366:	2502      	movs	r5, #2
 8005368:	e7a0      	b.n	80052ac <_dtoa_r+0x2bc>
 800536a:	f000 80a4 	beq.w	80054b6 <_dtoa_r+0x4c6>
 800536e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005372:	f1ca 0600 	rsb	r6, sl, #0
 8005376:	4ba0      	ldr	r3, [pc, #640]	; (80055f8 <_dtoa_r+0x608>)
 8005378:	f006 020f 	and.w	r2, r6, #15
 800537c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005384:	f7fb f8a8 	bl	80004d8 <__aeabi_dmul>
 8005388:	2502      	movs	r5, #2
 800538a:	2300      	movs	r3, #0
 800538c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005390:	4f9a      	ldr	r7, [pc, #616]	; (80055fc <_dtoa_r+0x60c>)
 8005392:	1136      	asrs	r6, r6, #4
 8005394:	2e00      	cmp	r6, #0
 8005396:	f040 8083 	bne.w	80054a0 <_dtoa_r+0x4b0>
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1e0      	bne.n	8005360 <_dtoa_r+0x370>
 800539e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f000 808a 	beq.w	80054ba <_dtoa_r+0x4ca>
 80053a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053aa:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80053ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80053b2:	2200      	movs	r2, #0
 80053b4:	4b92      	ldr	r3, [pc, #584]	; (8005600 <_dtoa_r+0x610>)
 80053b6:	f7fb fb01 	bl	80009bc <__aeabi_dcmplt>
 80053ba:	2800      	cmp	r0, #0
 80053bc:	d07d      	beq.n	80054ba <_dtoa_r+0x4ca>
 80053be:	f1b8 0f00 	cmp.w	r8, #0
 80053c2:	d07a      	beq.n	80054ba <_dtoa_r+0x4ca>
 80053c4:	9b04      	ldr	r3, [sp, #16]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	dd36      	ble.n	8005438 <_dtoa_r+0x448>
 80053ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80053ce:	2200      	movs	r2, #0
 80053d0:	4b8c      	ldr	r3, [pc, #560]	; (8005604 <_dtoa_r+0x614>)
 80053d2:	f7fb f881 	bl	80004d8 <__aeabi_dmul>
 80053d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053da:	9e04      	ldr	r6, [sp, #16]
 80053dc:	f10a 37ff 	add.w	r7, sl, #4294967295
 80053e0:	3501      	adds	r5, #1
 80053e2:	4628      	mov	r0, r5
 80053e4:	f7fb f80e 	bl	8000404 <__aeabi_i2d>
 80053e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053ec:	f7fb f874 	bl	80004d8 <__aeabi_dmul>
 80053f0:	2200      	movs	r2, #0
 80053f2:	4b85      	ldr	r3, [pc, #532]	; (8005608 <_dtoa_r+0x618>)
 80053f4:	f7fa feba 	bl	800016c <__adddf3>
 80053f8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80053fc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005400:	950b      	str	r5, [sp, #44]	; 0x2c
 8005402:	2e00      	cmp	r6, #0
 8005404:	d15c      	bne.n	80054c0 <_dtoa_r+0x4d0>
 8005406:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800540a:	2200      	movs	r2, #0
 800540c:	4b7f      	ldr	r3, [pc, #508]	; (800560c <_dtoa_r+0x61c>)
 800540e:	f7fa feab 	bl	8000168 <__aeabi_dsub>
 8005412:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005414:	462b      	mov	r3, r5
 8005416:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800541a:	f7fb faed 	bl	80009f8 <__aeabi_dcmpgt>
 800541e:	2800      	cmp	r0, #0
 8005420:	f040 8281 	bne.w	8005926 <_dtoa_r+0x936>
 8005424:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005428:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800542a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800542e:	f7fb fac5 	bl	80009bc <__aeabi_dcmplt>
 8005432:	2800      	cmp	r0, #0
 8005434:	f040 8275 	bne.w	8005922 <_dtoa_r+0x932>
 8005438:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800543c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005440:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005442:	2b00      	cmp	r3, #0
 8005444:	f2c0 814b 	blt.w	80056de <_dtoa_r+0x6ee>
 8005448:	f1ba 0f0e 	cmp.w	sl, #14
 800544c:	f300 8147 	bgt.w	80056de <_dtoa_r+0x6ee>
 8005450:	4b69      	ldr	r3, [pc, #420]	; (80055f8 <_dtoa_r+0x608>)
 8005452:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800545e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005460:	2b00      	cmp	r3, #0
 8005462:	f280 80d7 	bge.w	8005614 <_dtoa_r+0x624>
 8005466:	f1b8 0f00 	cmp.w	r8, #0
 800546a:	f300 80d3 	bgt.w	8005614 <_dtoa_r+0x624>
 800546e:	f040 8257 	bne.w	8005920 <_dtoa_r+0x930>
 8005472:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005476:	2200      	movs	r2, #0
 8005478:	4b64      	ldr	r3, [pc, #400]	; (800560c <_dtoa_r+0x61c>)
 800547a:	f7fb f82d 	bl	80004d8 <__aeabi_dmul>
 800547e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005482:	f7fb faaf 	bl	80009e4 <__aeabi_dcmpge>
 8005486:	4646      	mov	r6, r8
 8005488:	4647      	mov	r7, r8
 800548a:	2800      	cmp	r0, #0
 800548c:	f040 822d 	bne.w	80058ea <_dtoa_r+0x8fa>
 8005490:	9b06      	ldr	r3, [sp, #24]
 8005492:	9a06      	ldr	r2, [sp, #24]
 8005494:	1c5d      	adds	r5, r3, #1
 8005496:	2331      	movs	r3, #49	; 0x31
 8005498:	f10a 0a01 	add.w	sl, sl, #1
 800549c:	7013      	strb	r3, [r2, #0]
 800549e:	e228      	b.n	80058f2 <_dtoa_r+0x902>
 80054a0:	07f2      	lsls	r2, r6, #31
 80054a2:	d505      	bpl.n	80054b0 <_dtoa_r+0x4c0>
 80054a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054a8:	f7fb f816 	bl	80004d8 <__aeabi_dmul>
 80054ac:	2301      	movs	r3, #1
 80054ae:	3501      	adds	r5, #1
 80054b0:	1076      	asrs	r6, r6, #1
 80054b2:	3708      	adds	r7, #8
 80054b4:	e76e      	b.n	8005394 <_dtoa_r+0x3a4>
 80054b6:	2502      	movs	r5, #2
 80054b8:	e771      	b.n	800539e <_dtoa_r+0x3ae>
 80054ba:	4657      	mov	r7, sl
 80054bc:	4646      	mov	r6, r8
 80054be:	e790      	b.n	80053e2 <_dtoa_r+0x3f2>
 80054c0:	4b4d      	ldr	r3, [pc, #308]	; (80055f8 <_dtoa_r+0x608>)
 80054c2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80054c6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80054ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d048      	beq.n	8005562 <_dtoa_r+0x572>
 80054d0:	4602      	mov	r2, r0
 80054d2:	460b      	mov	r3, r1
 80054d4:	2000      	movs	r0, #0
 80054d6:	494e      	ldr	r1, [pc, #312]	; (8005610 <_dtoa_r+0x620>)
 80054d8:	f7fb f928 	bl	800072c <__aeabi_ddiv>
 80054dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80054e0:	f7fa fe42 	bl	8000168 <__aeabi_dsub>
 80054e4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80054e8:	9d06      	ldr	r5, [sp, #24]
 80054ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054ee:	f7fb faa3 	bl	8000a38 <__aeabi_d2iz>
 80054f2:	9011      	str	r0, [sp, #68]	; 0x44
 80054f4:	f7fa ff86 	bl	8000404 <__aeabi_i2d>
 80054f8:	4602      	mov	r2, r0
 80054fa:	460b      	mov	r3, r1
 80054fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005500:	f7fa fe32 	bl	8000168 <__aeabi_dsub>
 8005504:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005506:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800550a:	3330      	adds	r3, #48	; 0x30
 800550c:	f805 3b01 	strb.w	r3, [r5], #1
 8005510:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005514:	f7fb fa52 	bl	80009bc <__aeabi_dcmplt>
 8005518:	2800      	cmp	r0, #0
 800551a:	d163      	bne.n	80055e4 <_dtoa_r+0x5f4>
 800551c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005520:	2000      	movs	r0, #0
 8005522:	4937      	ldr	r1, [pc, #220]	; (8005600 <_dtoa_r+0x610>)
 8005524:	f7fa fe20 	bl	8000168 <__aeabi_dsub>
 8005528:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800552c:	f7fb fa46 	bl	80009bc <__aeabi_dcmplt>
 8005530:	2800      	cmp	r0, #0
 8005532:	f040 80b5 	bne.w	80056a0 <_dtoa_r+0x6b0>
 8005536:	9b06      	ldr	r3, [sp, #24]
 8005538:	1aeb      	subs	r3, r5, r3
 800553a:	429e      	cmp	r6, r3
 800553c:	f77f af7c 	ble.w	8005438 <_dtoa_r+0x448>
 8005540:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005544:	2200      	movs	r2, #0
 8005546:	4b2f      	ldr	r3, [pc, #188]	; (8005604 <_dtoa_r+0x614>)
 8005548:	f7fa ffc6 	bl	80004d8 <__aeabi_dmul>
 800554c:	2200      	movs	r2, #0
 800554e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005552:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005556:	4b2b      	ldr	r3, [pc, #172]	; (8005604 <_dtoa_r+0x614>)
 8005558:	f7fa ffbe 	bl	80004d8 <__aeabi_dmul>
 800555c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005560:	e7c3      	b.n	80054ea <_dtoa_r+0x4fa>
 8005562:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005566:	f7fa ffb7 	bl	80004d8 <__aeabi_dmul>
 800556a:	9b06      	ldr	r3, [sp, #24]
 800556c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005570:	199d      	adds	r5, r3, r6
 8005572:	461e      	mov	r6, r3
 8005574:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005578:	f7fb fa5e 	bl	8000a38 <__aeabi_d2iz>
 800557c:	9011      	str	r0, [sp, #68]	; 0x44
 800557e:	f7fa ff41 	bl	8000404 <__aeabi_i2d>
 8005582:	4602      	mov	r2, r0
 8005584:	460b      	mov	r3, r1
 8005586:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800558a:	f7fa fded 	bl	8000168 <__aeabi_dsub>
 800558e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005590:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005594:	3330      	adds	r3, #48	; 0x30
 8005596:	f806 3b01 	strb.w	r3, [r6], #1
 800559a:	42ae      	cmp	r6, r5
 800559c:	f04f 0200 	mov.w	r2, #0
 80055a0:	d124      	bne.n	80055ec <_dtoa_r+0x5fc>
 80055a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80055a6:	4b1a      	ldr	r3, [pc, #104]	; (8005610 <_dtoa_r+0x620>)
 80055a8:	f7fa fde0 	bl	800016c <__adddf3>
 80055ac:	4602      	mov	r2, r0
 80055ae:	460b      	mov	r3, r1
 80055b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055b4:	f7fb fa20 	bl	80009f8 <__aeabi_dcmpgt>
 80055b8:	2800      	cmp	r0, #0
 80055ba:	d171      	bne.n	80056a0 <_dtoa_r+0x6b0>
 80055bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80055c0:	2000      	movs	r0, #0
 80055c2:	4913      	ldr	r1, [pc, #76]	; (8005610 <_dtoa_r+0x620>)
 80055c4:	f7fa fdd0 	bl	8000168 <__aeabi_dsub>
 80055c8:	4602      	mov	r2, r0
 80055ca:	460b      	mov	r3, r1
 80055cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055d0:	f7fb f9f4 	bl	80009bc <__aeabi_dcmplt>
 80055d4:	2800      	cmp	r0, #0
 80055d6:	f43f af2f 	beq.w	8005438 <_dtoa_r+0x448>
 80055da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80055de:	1e6a      	subs	r2, r5, #1
 80055e0:	2b30      	cmp	r3, #48	; 0x30
 80055e2:	d001      	beq.n	80055e8 <_dtoa_r+0x5f8>
 80055e4:	46ba      	mov	sl, r7
 80055e6:	e04a      	b.n	800567e <_dtoa_r+0x68e>
 80055e8:	4615      	mov	r5, r2
 80055ea:	e7f6      	b.n	80055da <_dtoa_r+0x5ea>
 80055ec:	4b05      	ldr	r3, [pc, #20]	; (8005604 <_dtoa_r+0x614>)
 80055ee:	f7fa ff73 	bl	80004d8 <__aeabi_dmul>
 80055f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055f6:	e7bd      	b.n	8005574 <_dtoa_r+0x584>
 80055f8:	08007050 	.word	0x08007050
 80055fc:	08007028 	.word	0x08007028
 8005600:	3ff00000 	.word	0x3ff00000
 8005604:	40240000 	.word	0x40240000
 8005608:	401c0000 	.word	0x401c0000
 800560c:	40140000 	.word	0x40140000
 8005610:	3fe00000 	.word	0x3fe00000
 8005614:	9d06      	ldr	r5, [sp, #24]
 8005616:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800561a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800561e:	4630      	mov	r0, r6
 8005620:	4639      	mov	r1, r7
 8005622:	f7fb f883 	bl	800072c <__aeabi_ddiv>
 8005626:	f7fb fa07 	bl	8000a38 <__aeabi_d2iz>
 800562a:	4681      	mov	r9, r0
 800562c:	f7fa feea 	bl	8000404 <__aeabi_i2d>
 8005630:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005634:	f7fa ff50 	bl	80004d8 <__aeabi_dmul>
 8005638:	4602      	mov	r2, r0
 800563a:	460b      	mov	r3, r1
 800563c:	4630      	mov	r0, r6
 800563e:	4639      	mov	r1, r7
 8005640:	f7fa fd92 	bl	8000168 <__aeabi_dsub>
 8005644:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005648:	f805 6b01 	strb.w	r6, [r5], #1
 800564c:	9e06      	ldr	r6, [sp, #24]
 800564e:	4602      	mov	r2, r0
 8005650:	1bae      	subs	r6, r5, r6
 8005652:	45b0      	cmp	r8, r6
 8005654:	460b      	mov	r3, r1
 8005656:	d135      	bne.n	80056c4 <_dtoa_r+0x6d4>
 8005658:	f7fa fd88 	bl	800016c <__adddf3>
 800565c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005660:	4606      	mov	r6, r0
 8005662:	460f      	mov	r7, r1
 8005664:	f7fb f9c8 	bl	80009f8 <__aeabi_dcmpgt>
 8005668:	b9c8      	cbnz	r0, 800569e <_dtoa_r+0x6ae>
 800566a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800566e:	4630      	mov	r0, r6
 8005670:	4639      	mov	r1, r7
 8005672:	f7fb f999 	bl	80009a8 <__aeabi_dcmpeq>
 8005676:	b110      	cbz	r0, 800567e <_dtoa_r+0x68e>
 8005678:	f019 0f01 	tst.w	r9, #1
 800567c:	d10f      	bne.n	800569e <_dtoa_r+0x6ae>
 800567e:	4659      	mov	r1, fp
 8005680:	4620      	mov	r0, r4
 8005682:	f000 fe0c 	bl	800629e <_Bfree>
 8005686:	2300      	movs	r3, #0
 8005688:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800568a:	702b      	strb	r3, [r5, #0]
 800568c:	f10a 0301 	add.w	r3, sl, #1
 8005690:	6013      	str	r3, [r2, #0]
 8005692:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005694:	2b00      	cmp	r3, #0
 8005696:	f43f acf3 	beq.w	8005080 <_dtoa_r+0x90>
 800569a:	601d      	str	r5, [r3, #0]
 800569c:	e4f0      	b.n	8005080 <_dtoa_r+0x90>
 800569e:	4657      	mov	r7, sl
 80056a0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80056a4:	1e6b      	subs	r3, r5, #1
 80056a6:	2a39      	cmp	r2, #57	; 0x39
 80056a8:	d106      	bne.n	80056b8 <_dtoa_r+0x6c8>
 80056aa:	9a06      	ldr	r2, [sp, #24]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d107      	bne.n	80056c0 <_dtoa_r+0x6d0>
 80056b0:	2330      	movs	r3, #48	; 0x30
 80056b2:	7013      	strb	r3, [r2, #0]
 80056b4:	4613      	mov	r3, r2
 80056b6:	3701      	adds	r7, #1
 80056b8:	781a      	ldrb	r2, [r3, #0]
 80056ba:	3201      	adds	r2, #1
 80056bc:	701a      	strb	r2, [r3, #0]
 80056be:	e791      	b.n	80055e4 <_dtoa_r+0x5f4>
 80056c0:	461d      	mov	r5, r3
 80056c2:	e7ed      	b.n	80056a0 <_dtoa_r+0x6b0>
 80056c4:	2200      	movs	r2, #0
 80056c6:	4b99      	ldr	r3, [pc, #612]	; (800592c <_dtoa_r+0x93c>)
 80056c8:	f7fa ff06 	bl	80004d8 <__aeabi_dmul>
 80056cc:	2200      	movs	r2, #0
 80056ce:	2300      	movs	r3, #0
 80056d0:	4606      	mov	r6, r0
 80056d2:	460f      	mov	r7, r1
 80056d4:	f7fb f968 	bl	80009a8 <__aeabi_dcmpeq>
 80056d8:	2800      	cmp	r0, #0
 80056da:	d09e      	beq.n	800561a <_dtoa_r+0x62a>
 80056dc:	e7cf      	b.n	800567e <_dtoa_r+0x68e>
 80056de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056e0:	2a00      	cmp	r2, #0
 80056e2:	f000 8088 	beq.w	80057f6 <_dtoa_r+0x806>
 80056e6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80056e8:	2a01      	cmp	r2, #1
 80056ea:	dc6d      	bgt.n	80057c8 <_dtoa_r+0x7d8>
 80056ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80056ee:	2a00      	cmp	r2, #0
 80056f0:	d066      	beq.n	80057c0 <_dtoa_r+0x7d0>
 80056f2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80056f6:	464d      	mov	r5, r9
 80056f8:	9e08      	ldr	r6, [sp, #32]
 80056fa:	9a07      	ldr	r2, [sp, #28]
 80056fc:	2101      	movs	r1, #1
 80056fe:	441a      	add	r2, r3
 8005700:	4620      	mov	r0, r4
 8005702:	4499      	add	r9, r3
 8005704:	9207      	str	r2, [sp, #28]
 8005706:	f000 fea8 	bl	800645a <__i2b>
 800570a:	4607      	mov	r7, r0
 800570c:	2d00      	cmp	r5, #0
 800570e:	dd0b      	ble.n	8005728 <_dtoa_r+0x738>
 8005710:	9b07      	ldr	r3, [sp, #28]
 8005712:	2b00      	cmp	r3, #0
 8005714:	dd08      	ble.n	8005728 <_dtoa_r+0x738>
 8005716:	42ab      	cmp	r3, r5
 8005718:	bfa8      	it	ge
 800571a:	462b      	movge	r3, r5
 800571c:	9a07      	ldr	r2, [sp, #28]
 800571e:	eba9 0903 	sub.w	r9, r9, r3
 8005722:	1aed      	subs	r5, r5, r3
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	9307      	str	r3, [sp, #28]
 8005728:	9b08      	ldr	r3, [sp, #32]
 800572a:	b1eb      	cbz	r3, 8005768 <_dtoa_r+0x778>
 800572c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800572e:	2b00      	cmp	r3, #0
 8005730:	d065      	beq.n	80057fe <_dtoa_r+0x80e>
 8005732:	b18e      	cbz	r6, 8005758 <_dtoa_r+0x768>
 8005734:	4639      	mov	r1, r7
 8005736:	4632      	mov	r2, r6
 8005738:	4620      	mov	r0, r4
 800573a:	f000 ff2d 	bl	8006598 <__pow5mult>
 800573e:	465a      	mov	r2, fp
 8005740:	4601      	mov	r1, r0
 8005742:	4607      	mov	r7, r0
 8005744:	4620      	mov	r0, r4
 8005746:	f000 fe91 	bl	800646c <__multiply>
 800574a:	4659      	mov	r1, fp
 800574c:	900a      	str	r0, [sp, #40]	; 0x28
 800574e:	4620      	mov	r0, r4
 8005750:	f000 fda5 	bl	800629e <_Bfree>
 8005754:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005756:	469b      	mov	fp, r3
 8005758:	9b08      	ldr	r3, [sp, #32]
 800575a:	1b9a      	subs	r2, r3, r6
 800575c:	d004      	beq.n	8005768 <_dtoa_r+0x778>
 800575e:	4659      	mov	r1, fp
 8005760:	4620      	mov	r0, r4
 8005762:	f000 ff19 	bl	8006598 <__pow5mult>
 8005766:	4683      	mov	fp, r0
 8005768:	2101      	movs	r1, #1
 800576a:	4620      	mov	r0, r4
 800576c:	f000 fe75 	bl	800645a <__i2b>
 8005770:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005772:	4606      	mov	r6, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 81c6 	beq.w	8005b06 <_dtoa_r+0xb16>
 800577a:	461a      	mov	r2, r3
 800577c:	4601      	mov	r1, r0
 800577e:	4620      	mov	r0, r4
 8005780:	f000 ff0a 	bl	8006598 <__pow5mult>
 8005784:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005786:	4606      	mov	r6, r0
 8005788:	2b01      	cmp	r3, #1
 800578a:	dc3e      	bgt.n	800580a <_dtoa_r+0x81a>
 800578c:	9b02      	ldr	r3, [sp, #8]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d137      	bne.n	8005802 <_dtoa_r+0x812>
 8005792:	9b03      	ldr	r3, [sp, #12]
 8005794:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005798:	2b00      	cmp	r3, #0
 800579a:	d134      	bne.n	8005806 <_dtoa_r+0x816>
 800579c:	9b03      	ldr	r3, [sp, #12]
 800579e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80057a2:	0d1b      	lsrs	r3, r3, #20
 80057a4:	051b      	lsls	r3, r3, #20
 80057a6:	b12b      	cbz	r3, 80057b4 <_dtoa_r+0x7c4>
 80057a8:	9b07      	ldr	r3, [sp, #28]
 80057aa:	f109 0901 	add.w	r9, r9, #1
 80057ae:	3301      	adds	r3, #1
 80057b0:	9307      	str	r3, [sp, #28]
 80057b2:	2301      	movs	r3, #1
 80057b4:	9308      	str	r3, [sp, #32]
 80057b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d128      	bne.n	800580e <_dtoa_r+0x81e>
 80057bc:	2001      	movs	r0, #1
 80057be:	e02e      	b.n	800581e <_dtoa_r+0x82e>
 80057c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80057c2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80057c6:	e796      	b.n	80056f6 <_dtoa_r+0x706>
 80057c8:	9b08      	ldr	r3, [sp, #32]
 80057ca:	f108 36ff 	add.w	r6, r8, #4294967295
 80057ce:	42b3      	cmp	r3, r6
 80057d0:	bfb7      	itett	lt
 80057d2:	9b08      	ldrlt	r3, [sp, #32]
 80057d4:	1b9e      	subge	r6, r3, r6
 80057d6:	1af2      	sublt	r2, r6, r3
 80057d8:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80057da:	bfbf      	itttt	lt
 80057dc:	9608      	strlt	r6, [sp, #32]
 80057de:	189b      	addlt	r3, r3, r2
 80057e0:	930c      	strlt	r3, [sp, #48]	; 0x30
 80057e2:	2600      	movlt	r6, #0
 80057e4:	f1b8 0f00 	cmp.w	r8, #0
 80057e8:	bfb9      	ittee	lt
 80057ea:	eba9 0508 	sublt.w	r5, r9, r8
 80057ee:	2300      	movlt	r3, #0
 80057f0:	464d      	movge	r5, r9
 80057f2:	4643      	movge	r3, r8
 80057f4:	e781      	b.n	80056fa <_dtoa_r+0x70a>
 80057f6:	9e08      	ldr	r6, [sp, #32]
 80057f8:	464d      	mov	r5, r9
 80057fa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80057fc:	e786      	b.n	800570c <_dtoa_r+0x71c>
 80057fe:	9a08      	ldr	r2, [sp, #32]
 8005800:	e7ad      	b.n	800575e <_dtoa_r+0x76e>
 8005802:	2300      	movs	r3, #0
 8005804:	e7d6      	b.n	80057b4 <_dtoa_r+0x7c4>
 8005806:	9b02      	ldr	r3, [sp, #8]
 8005808:	e7d4      	b.n	80057b4 <_dtoa_r+0x7c4>
 800580a:	2300      	movs	r3, #0
 800580c:	9308      	str	r3, [sp, #32]
 800580e:	6933      	ldr	r3, [r6, #16]
 8005810:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005814:	6918      	ldr	r0, [r3, #16]
 8005816:	f000 fdd2 	bl	80063be <__hi0bits>
 800581a:	f1c0 0020 	rsb	r0, r0, #32
 800581e:	9b07      	ldr	r3, [sp, #28]
 8005820:	4418      	add	r0, r3
 8005822:	f010 001f 	ands.w	r0, r0, #31
 8005826:	d047      	beq.n	80058b8 <_dtoa_r+0x8c8>
 8005828:	f1c0 0320 	rsb	r3, r0, #32
 800582c:	2b04      	cmp	r3, #4
 800582e:	dd3b      	ble.n	80058a8 <_dtoa_r+0x8b8>
 8005830:	9b07      	ldr	r3, [sp, #28]
 8005832:	f1c0 001c 	rsb	r0, r0, #28
 8005836:	4481      	add	r9, r0
 8005838:	4405      	add	r5, r0
 800583a:	4403      	add	r3, r0
 800583c:	9307      	str	r3, [sp, #28]
 800583e:	f1b9 0f00 	cmp.w	r9, #0
 8005842:	dd05      	ble.n	8005850 <_dtoa_r+0x860>
 8005844:	4659      	mov	r1, fp
 8005846:	464a      	mov	r2, r9
 8005848:	4620      	mov	r0, r4
 800584a:	f000 fef3 	bl	8006634 <__lshift>
 800584e:	4683      	mov	fp, r0
 8005850:	9b07      	ldr	r3, [sp, #28]
 8005852:	2b00      	cmp	r3, #0
 8005854:	dd05      	ble.n	8005862 <_dtoa_r+0x872>
 8005856:	4631      	mov	r1, r6
 8005858:	461a      	mov	r2, r3
 800585a:	4620      	mov	r0, r4
 800585c:	f000 feea 	bl	8006634 <__lshift>
 8005860:	4606      	mov	r6, r0
 8005862:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005864:	b353      	cbz	r3, 80058bc <_dtoa_r+0x8cc>
 8005866:	4631      	mov	r1, r6
 8005868:	4658      	mov	r0, fp
 800586a:	f000 ff37 	bl	80066dc <__mcmp>
 800586e:	2800      	cmp	r0, #0
 8005870:	da24      	bge.n	80058bc <_dtoa_r+0x8cc>
 8005872:	2300      	movs	r3, #0
 8005874:	4659      	mov	r1, fp
 8005876:	220a      	movs	r2, #10
 8005878:	4620      	mov	r0, r4
 800587a:	f000 fd27 	bl	80062cc <__multadd>
 800587e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005880:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005884:	4683      	mov	fp, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	f000 8144 	beq.w	8005b14 <_dtoa_r+0xb24>
 800588c:	2300      	movs	r3, #0
 800588e:	4639      	mov	r1, r7
 8005890:	220a      	movs	r2, #10
 8005892:	4620      	mov	r0, r4
 8005894:	f000 fd1a 	bl	80062cc <__multadd>
 8005898:	9b04      	ldr	r3, [sp, #16]
 800589a:	4607      	mov	r7, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	dc4d      	bgt.n	800593c <_dtoa_r+0x94c>
 80058a0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	dd4a      	ble.n	800593c <_dtoa_r+0x94c>
 80058a6:	e011      	b.n	80058cc <_dtoa_r+0x8dc>
 80058a8:	d0c9      	beq.n	800583e <_dtoa_r+0x84e>
 80058aa:	9a07      	ldr	r2, [sp, #28]
 80058ac:	331c      	adds	r3, #28
 80058ae:	441a      	add	r2, r3
 80058b0:	4499      	add	r9, r3
 80058b2:	441d      	add	r5, r3
 80058b4:	4613      	mov	r3, r2
 80058b6:	e7c1      	b.n	800583c <_dtoa_r+0x84c>
 80058b8:	4603      	mov	r3, r0
 80058ba:	e7f6      	b.n	80058aa <_dtoa_r+0x8ba>
 80058bc:	f1b8 0f00 	cmp.w	r8, #0
 80058c0:	dc36      	bgt.n	8005930 <_dtoa_r+0x940>
 80058c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	dd33      	ble.n	8005930 <_dtoa_r+0x940>
 80058c8:	f8cd 8010 	str.w	r8, [sp, #16]
 80058cc:	9b04      	ldr	r3, [sp, #16]
 80058ce:	b963      	cbnz	r3, 80058ea <_dtoa_r+0x8fa>
 80058d0:	4631      	mov	r1, r6
 80058d2:	2205      	movs	r2, #5
 80058d4:	4620      	mov	r0, r4
 80058d6:	f000 fcf9 	bl	80062cc <__multadd>
 80058da:	4601      	mov	r1, r0
 80058dc:	4606      	mov	r6, r0
 80058de:	4658      	mov	r0, fp
 80058e0:	f000 fefc 	bl	80066dc <__mcmp>
 80058e4:	2800      	cmp	r0, #0
 80058e6:	f73f add3 	bgt.w	8005490 <_dtoa_r+0x4a0>
 80058ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80058ec:	9d06      	ldr	r5, [sp, #24]
 80058ee:	ea6f 0a03 	mvn.w	sl, r3
 80058f2:	f04f 0900 	mov.w	r9, #0
 80058f6:	4631      	mov	r1, r6
 80058f8:	4620      	mov	r0, r4
 80058fa:	f000 fcd0 	bl	800629e <_Bfree>
 80058fe:	2f00      	cmp	r7, #0
 8005900:	f43f aebd 	beq.w	800567e <_dtoa_r+0x68e>
 8005904:	f1b9 0f00 	cmp.w	r9, #0
 8005908:	d005      	beq.n	8005916 <_dtoa_r+0x926>
 800590a:	45b9      	cmp	r9, r7
 800590c:	d003      	beq.n	8005916 <_dtoa_r+0x926>
 800590e:	4649      	mov	r1, r9
 8005910:	4620      	mov	r0, r4
 8005912:	f000 fcc4 	bl	800629e <_Bfree>
 8005916:	4639      	mov	r1, r7
 8005918:	4620      	mov	r0, r4
 800591a:	f000 fcc0 	bl	800629e <_Bfree>
 800591e:	e6ae      	b.n	800567e <_dtoa_r+0x68e>
 8005920:	2600      	movs	r6, #0
 8005922:	4637      	mov	r7, r6
 8005924:	e7e1      	b.n	80058ea <_dtoa_r+0x8fa>
 8005926:	46ba      	mov	sl, r7
 8005928:	4637      	mov	r7, r6
 800592a:	e5b1      	b.n	8005490 <_dtoa_r+0x4a0>
 800592c:	40240000 	.word	0x40240000
 8005930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005932:	f8cd 8010 	str.w	r8, [sp, #16]
 8005936:	2b00      	cmp	r3, #0
 8005938:	f000 80f3 	beq.w	8005b22 <_dtoa_r+0xb32>
 800593c:	2d00      	cmp	r5, #0
 800593e:	dd05      	ble.n	800594c <_dtoa_r+0x95c>
 8005940:	4639      	mov	r1, r7
 8005942:	462a      	mov	r2, r5
 8005944:	4620      	mov	r0, r4
 8005946:	f000 fe75 	bl	8006634 <__lshift>
 800594a:	4607      	mov	r7, r0
 800594c:	9b08      	ldr	r3, [sp, #32]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d04c      	beq.n	80059ec <_dtoa_r+0x9fc>
 8005952:	6879      	ldr	r1, [r7, #4]
 8005954:	4620      	mov	r0, r4
 8005956:	f000 fc6e 	bl	8006236 <_Balloc>
 800595a:	4605      	mov	r5, r0
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	f107 010c 	add.w	r1, r7, #12
 8005962:	3202      	adds	r2, #2
 8005964:	0092      	lsls	r2, r2, #2
 8005966:	300c      	adds	r0, #12
 8005968:	f000 fc5a 	bl	8006220 <memcpy>
 800596c:	2201      	movs	r2, #1
 800596e:	4629      	mov	r1, r5
 8005970:	4620      	mov	r0, r4
 8005972:	f000 fe5f 	bl	8006634 <__lshift>
 8005976:	46b9      	mov	r9, r7
 8005978:	4607      	mov	r7, r0
 800597a:	9b06      	ldr	r3, [sp, #24]
 800597c:	9307      	str	r3, [sp, #28]
 800597e:	9b02      	ldr	r3, [sp, #8]
 8005980:	f003 0301 	and.w	r3, r3, #1
 8005984:	9308      	str	r3, [sp, #32]
 8005986:	4631      	mov	r1, r6
 8005988:	4658      	mov	r0, fp
 800598a:	f7ff faa3 	bl	8004ed4 <quorem>
 800598e:	4649      	mov	r1, r9
 8005990:	4605      	mov	r5, r0
 8005992:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005996:	4658      	mov	r0, fp
 8005998:	f000 fea0 	bl	80066dc <__mcmp>
 800599c:	463a      	mov	r2, r7
 800599e:	9002      	str	r0, [sp, #8]
 80059a0:	4631      	mov	r1, r6
 80059a2:	4620      	mov	r0, r4
 80059a4:	f000 feb4 	bl	8006710 <__mdiff>
 80059a8:	68c3      	ldr	r3, [r0, #12]
 80059aa:	4602      	mov	r2, r0
 80059ac:	bb03      	cbnz	r3, 80059f0 <_dtoa_r+0xa00>
 80059ae:	4601      	mov	r1, r0
 80059b0:	9009      	str	r0, [sp, #36]	; 0x24
 80059b2:	4658      	mov	r0, fp
 80059b4:	f000 fe92 	bl	80066dc <__mcmp>
 80059b8:	4603      	mov	r3, r0
 80059ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059bc:	4611      	mov	r1, r2
 80059be:	4620      	mov	r0, r4
 80059c0:	9309      	str	r3, [sp, #36]	; 0x24
 80059c2:	f000 fc6c 	bl	800629e <_Bfree>
 80059c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059c8:	b9a3      	cbnz	r3, 80059f4 <_dtoa_r+0xa04>
 80059ca:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80059cc:	b992      	cbnz	r2, 80059f4 <_dtoa_r+0xa04>
 80059ce:	9a08      	ldr	r2, [sp, #32]
 80059d0:	b982      	cbnz	r2, 80059f4 <_dtoa_r+0xa04>
 80059d2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80059d6:	d029      	beq.n	8005a2c <_dtoa_r+0xa3c>
 80059d8:	9b02      	ldr	r3, [sp, #8]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	dd01      	ble.n	80059e2 <_dtoa_r+0x9f2>
 80059de:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80059e2:	9b07      	ldr	r3, [sp, #28]
 80059e4:	1c5d      	adds	r5, r3, #1
 80059e6:	f883 8000 	strb.w	r8, [r3]
 80059ea:	e784      	b.n	80058f6 <_dtoa_r+0x906>
 80059ec:	4638      	mov	r0, r7
 80059ee:	e7c2      	b.n	8005976 <_dtoa_r+0x986>
 80059f0:	2301      	movs	r3, #1
 80059f2:	e7e3      	b.n	80059bc <_dtoa_r+0x9cc>
 80059f4:	9a02      	ldr	r2, [sp, #8]
 80059f6:	2a00      	cmp	r2, #0
 80059f8:	db04      	blt.n	8005a04 <_dtoa_r+0xa14>
 80059fa:	d123      	bne.n	8005a44 <_dtoa_r+0xa54>
 80059fc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80059fe:	bb0a      	cbnz	r2, 8005a44 <_dtoa_r+0xa54>
 8005a00:	9a08      	ldr	r2, [sp, #32]
 8005a02:	b9fa      	cbnz	r2, 8005a44 <_dtoa_r+0xa54>
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	ddec      	ble.n	80059e2 <_dtoa_r+0x9f2>
 8005a08:	4659      	mov	r1, fp
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	4620      	mov	r0, r4
 8005a0e:	f000 fe11 	bl	8006634 <__lshift>
 8005a12:	4631      	mov	r1, r6
 8005a14:	4683      	mov	fp, r0
 8005a16:	f000 fe61 	bl	80066dc <__mcmp>
 8005a1a:	2800      	cmp	r0, #0
 8005a1c:	dc03      	bgt.n	8005a26 <_dtoa_r+0xa36>
 8005a1e:	d1e0      	bne.n	80059e2 <_dtoa_r+0x9f2>
 8005a20:	f018 0f01 	tst.w	r8, #1
 8005a24:	d0dd      	beq.n	80059e2 <_dtoa_r+0x9f2>
 8005a26:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005a2a:	d1d8      	bne.n	80059de <_dtoa_r+0x9ee>
 8005a2c:	9b07      	ldr	r3, [sp, #28]
 8005a2e:	9a07      	ldr	r2, [sp, #28]
 8005a30:	1c5d      	adds	r5, r3, #1
 8005a32:	2339      	movs	r3, #57	; 0x39
 8005a34:	7013      	strb	r3, [r2, #0]
 8005a36:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005a3a:	1e6a      	subs	r2, r5, #1
 8005a3c:	2b39      	cmp	r3, #57	; 0x39
 8005a3e:	d04d      	beq.n	8005adc <_dtoa_r+0xaec>
 8005a40:	3301      	adds	r3, #1
 8005a42:	e052      	b.n	8005aea <_dtoa_r+0xafa>
 8005a44:	9a07      	ldr	r2, [sp, #28]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	f102 0501 	add.w	r5, r2, #1
 8005a4c:	dd06      	ble.n	8005a5c <_dtoa_r+0xa6c>
 8005a4e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005a52:	d0eb      	beq.n	8005a2c <_dtoa_r+0xa3c>
 8005a54:	f108 0801 	add.w	r8, r8, #1
 8005a58:	9b07      	ldr	r3, [sp, #28]
 8005a5a:	e7c4      	b.n	80059e6 <_dtoa_r+0x9f6>
 8005a5c:	9b06      	ldr	r3, [sp, #24]
 8005a5e:	9a04      	ldr	r2, [sp, #16]
 8005a60:	1aeb      	subs	r3, r5, r3
 8005a62:	4293      	cmp	r3, r2
 8005a64:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005a68:	d021      	beq.n	8005aae <_dtoa_r+0xabe>
 8005a6a:	4659      	mov	r1, fp
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	220a      	movs	r2, #10
 8005a70:	4620      	mov	r0, r4
 8005a72:	f000 fc2b 	bl	80062cc <__multadd>
 8005a76:	45b9      	cmp	r9, r7
 8005a78:	4683      	mov	fp, r0
 8005a7a:	f04f 0300 	mov.w	r3, #0
 8005a7e:	f04f 020a 	mov.w	r2, #10
 8005a82:	4649      	mov	r1, r9
 8005a84:	4620      	mov	r0, r4
 8005a86:	d105      	bne.n	8005a94 <_dtoa_r+0xaa4>
 8005a88:	f000 fc20 	bl	80062cc <__multadd>
 8005a8c:	4681      	mov	r9, r0
 8005a8e:	4607      	mov	r7, r0
 8005a90:	9507      	str	r5, [sp, #28]
 8005a92:	e778      	b.n	8005986 <_dtoa_r+0x996>
 8005a94:	f000 fc1a 	bl	80062cc <__multadd>
 8005a98:	4639      	mov	r1, r7
 8005a9a:	4681      	mov	r9, r0
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	220a      	movs	r2, #10
 8005aa0:	4620      	mov	r0, r4
 8005aa2:	f000 fc13 	bl	80062cc <__multadd>
 8005aa6:	4607      	mov	r7, r0
 8005aa8:	e7f2      	b.n	8005a90 <_dtoa_r+0xaa0>
 8005aaa:	f04f 0900 	mov.w	r9, #0
 8005aae:	4659      	mov	r1, fp
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	f000 fdbe 	bl	8006634 <__lshift>
 8005ab8:	4631      	mov	r1, r6
 8005aba:	4683      	mov	fp, r0
 8005abc:	f000 fe0e 	bl	80066dc <__mcmp>
 8005ac0:	2800      	cmp	r0, #0
 8005ac2:	dcb8      	bgt.n	8005a36 <_dtoa_r+0xa46>
 8005ac4:	d102      	bne.n	8005acc <_dtoa_r+0xadc>
 8005ac6:	f018 0f01 	tst.w	r8, #1
 8005aca:	d1b4      	bne.n	8005a36 <_dtoa_r+0xa46>
 8005acc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005ad0:	1e6a      	subs	r2, r5, #1
 8005ad2:	2b30      	cmp	r3, #48	; 0x30
 8005ad4:	f47f af0f 	bne.w	80058f6 <_dtoa_r+0x906>
 8005ad8:	4615      	mov	r5, r2
 8005ada:	e7f7      	b.n	8005acc <_dtoa_r+0xadc>
 8005adc:	9b06      	ldr	r3, [sp, #24]
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d105      	bne.n	8005aee <_dtoa_r+0xafe>
 8005ae2:	2331      	movs	r3, #49	; 0x31
 8005ae4:	9a06      	ldr	r2, [sp, #24]
 8005ae6:	f10a 0a01 	add.w	sl, sl, #1
 8005aea:	7013      	strb	r3, [r2, #0]
 8005aec:	e703      	b.n	80058f6 <_dtoa_r+0x906>
 8005aee:	4615      	mov	r5, r2
 8005af0:	e7a1      	b.n	8005a36 <_dtoa_r+0xa46>
 8005af2:	4b17      	ldr	r3, [pc, #92]	; (8005b50 <_dtoa_r+0xb60>)
 8005af4:	f7ff bae1 	b.w	80050ba <_dtoa_r+0xca>
 8005af8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f47f aabb 	bne.w	8005076 <_dtoa_r+0x86>
 8005b00:	4b14      	ldr	r3, [pc, #80]	; (8005b54 <_dtoa_r+0xb64>)
 8005b02:	f7ff bada 	b.w	80050ba <_dtoa_r+0xca>
 8005b06:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	f77f ae3f 	ble.w	800578c <_dtoa_r+0x79c>
 8005b0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b10:	9308      	str	r3, [sp, #32]
 8005b12:	e653      	b.n	80057bc <_dtoa_r+0x7cc>
 8005b14:	9b04      	ldr	r3, [sp, #16]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	dc03      	bgt.n	8005b22 <_dtoa_r+0xb32>
 8005b1a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	f73f aed5 	bgt.w	80058cc <_dtoa_r+0x8dc>
 8005b22:	9d06      	ldr	r5, [sp, #24]
 8005b24:	4631      	mov	r1, r6
 8005b26:	4658      	mov	r0, fp
 8005b28:	f7ff f9d4 	bl	8004ed4 <quorem>
 8005b2c:	9b06      	ldr	r3, [sp, #24]
 8005b2e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005b32:	f805 8b01 	strb.w	r8, [r5], #1
 8005b36:	9a04      	ldr	r2, [sp, #16]
 8005b38:	1aeb      	subs	r3, r5, r3
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	ddb5      	ble.n	8005aaa <_dtoa_r+0xaba>
 8005b3e:	4659      	mov	r1, fp
 8005b40:	2300      	movs	r3, #0
 8005b42:	220a      	movs	r2, #10
 8005b44:	4620      	mov	r0, r4
 8005b46:	f000 fbc1 	bl	80062cc <__multadd>
 8005b4a:	4683      	mov	fp, r0
 8005b4c:	e7ea      	b.n	8005b24 <_dtoa_r+0xb34>
 8005b4e:	bf00      	nop
 8005b50:	08006f96 	.word	0x08006f96
 8005b54:	08007010 	.word	0x08007010

08005b58 <rshift>:
 8005b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b5a:	6906      	ldr	r6, [r0, #16]
 8005b5c:	114b      	asrs	r3, r1, #5
 8005b5e:	429e      	cmp	r6, r3
 8005b60:	f100 0414 	add.w	r4, r0, #20
 8005b64:	dd31      	ble.n	8005bca <rshift+0x72>
 8005b66:	f011 011f 	ands.w	r1, r1, #31
 8005b6a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8005b6e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8005b72:	d108      	bne.n	8005b86 <rshift+0x2e>
 8005b74:	4621      	mov	r1, r4
 8005b76:	42b2      	cmp	r2, r6
 8005b78:	460b      	mov	r3, r1
 8005b7a:	d211      	bcs.n	8005ba0 <rshift+0x48>
 8005b7c:	f852 3b04 	ldr.w	r3, [r2], #4
 8005b80:	f841 3b04 	str.w	r3, [r1], #4
 8005b84:	e7f7      	b.n	8005b76 <rshift+0x1e>
 8005b86:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8005b8a:	4623      	mov	r3, r4
 8005b8c:	f1c1 0c20 	rsb	ip, r1, #32
 8005b90:	40cd      	lsrs	r5, r1
 8005b92:	3204      	adds	r2, #4
 8005b94:	42b2      	cmp	r2, r6
 8005b96:	4617      	mov	r7, r2
 8005b98:	d30d      	bcc.n	8005bb6 <rshift+0x5e>
 8005b9a:	601d      	str	r5, [r3, #0]
 8005b9c:	b105      	cbz	r5, 8005ba0 <rshift+0x48>
 8005b9e:	3304      	adds	r3, #4
 8005ba0:	42a3      	cmp	r3, r4
 8005ba2:	eba3 0204 	sub.w	r2, r3, r4
 8005ba6:	bf08      	it	eq
 8005ba8:	2300      	moveq	r3, #0
 8005baa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005bae:	6102      	str	r2, [r0, #16]
 8005bb0:	bf08      	it	eq
 8005bb2:	6143      	streq	r3, [r0, #20]
 8005bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bb6:	683f      	ldr	r7, [r7, #0]
 8005bb8:	fa07 f70c 	lsl.w	r7, r7, ip
 8005bbc:	433d      	orrs	r5, r7
 8005bbe:	f843 5b04 	str.w	r5, [r3], #4
 8005bc2:	f852 5b04 	ldr.w	r5, [r2], #4
 8005bc6:	40cd      	lsrs	r5, r1
 8005bc8:	e7e4      	b.n	8005b94 <rshift+0x3c>
 8005bca:	4623      	mov	r3, r4
 8005bcc:	e7e8      	b.n	8005ba0 <rshift+0x48>

08005bce <__hexdig_fun>:
 8005bce:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005bd2:	2b09      	cmp	r3, #9
 8005bd4:	d802      	bhi.n	8005bdc <__hexdig_fun+0xe>
 8005bd6:	3820      	subs	r0, #32
 8005bd8:	b2c0      	uxtb	r0, r0
 8005bda:	4770      	bx	lr
 8005bdc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005be0:	2b05      	cmp	r3, #5
 8005be2:	d801      	bhi.n	8005be8 <__hexdig_fun+0x1a>
 8005be4:	3847      	subs	r0, #71	; 0x47
 8005be6:	e7f7      	b.n	8005bd8 <__hexdig_fun+0xa>
 8005be8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005bec:	2b05      	cmp	r3, #5
 8005bee:	d801      	bhi.n	8005bf4 <__hexdig_fun+0x26>
 8005bf0:	3827      	subs	r0, #39	; 0x27
 8005bf2:	e7f1      	b.n	8005bd8 <__hexdig_fun+0xa>
 8005bf4:	2000      	movs	r0, #0
 8005bf6:	4770      	bx	lr

08005bf8 <__gethex>:
 8005bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bfc:	b08b      	sub	sp, #44	; 0x2c
 8005bfe:	9002      	str	r0, [sp, #8]
 8005c00:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005c02:	468a      	mov	sl, r1
 8005c04:	4690      	mov	r8, r2
 8005c06:	9306      	str	r3, [sp, #24]
 8005c08:	f000 fad1 	bl	80061ae <__localeconv_l>
 8005c0c:	6803      	ldr	r3, [r0, #0]
 8005c0e:	f04f 0b00 	mov.w	fp, #0
 8005c12:	4618      	mov	r0, r3
 8005c14:	9303      	str	r3, [sp, #12]
 8005c16:	f7fa fa9b 	bl	8000150 <strlen>
 8005c1a:	9b03      	ldr	r3, [sp, #12]
 8005c1c:	9001      	str	r0, [sp, #4]
 8005c1e:	4403      	add	r3, r0
 8005c20:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005c24:	9307      	str	r3, [sp, #28]
 8005c26:	f8da 3000 	ldr.w	r3, [sl]
 8005c2a:	3302      	adds	r3, #2
 8005c2c:	461f      	mov	r7, r3
 8005c2e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005c32:	2830      	cmp	r0, #48	; 0x30
 8005c34:	d06c      	beq.n	8005d10 <__gethex+0x118>
 8005c36:	f7ff ffca 	bl	8005bce <__hexdig_fun>
 8005c3a:	4604      	mov	r4, r0
 8005c3c:	2800      	cmp	r0, #0
 8005c3e:	d16a      	bne.n	8005d16 <__gethex+0x11e>
 8005c40:	9a01      	ldr	r2, [sp, #4]
 8005c42:	9903      	ldr	r1, [sp, #12]
 8005c44:	4638      	mov	r0, r7
 8005c46:	f001 f905 	bl	8006e54 <strncmp>
 8005c4a:	2800      	cmp	r0, #0
 8005c4c:	d166      	bne.n	8005d1c <__gethex+0x124>
 8005c4e:	9b01      	ldr	r3, [sp, #4]
 8005c50:	5cf8      	ldrb	r0, [r7, r3]
 8005c52:	18fe      	adds	r6, r7, r3
 8005c54:	f7ff ffbb 	bl	8005bce <__hexdig_fun>
 8005c58:	2800      	cmp	r0, #0
 8005c5a:	d062      	beq.n	8005d22 <__gethex+0x12a>
 8005c5c:	4633      	mov	r3, r6
 8005c5e:	7818      	ldrb	r0, [r3, #0]
 8005c60:	461f      	mov	r7, r3
 8005c62:	2830      	cmp	r0, #48	; 0x30
 8005c64:	f103 0301 	add.w	r3, r3, #1
 8005c68:	d0f9      	beq.n	8005c5e <__gethex+0x66>
 8005c6a:	f7ff ffb0 	bl	8005bce <__hexdig_fun>
 8005c6e:	fab0 f580 	clz	r5, r0
 8005c72:	4634      	mov	r4, r6
 8005c74:	f04f 0b01 	mov.w	fp, #1
 8005c78:	096d      	lsrs	r5, r5, #5
 8005c7a:	463a      	mov	r2, r7
 8005c7c:	4616      	mov	r6, r2
 8005c7e:	7830      	ldrb	r0, [r6, #0]
 8005c80:	3201      	adds	r2, #1
 8005c82:	f7ff ffa4 	bl	8005bce <__hexdig_fun>
 8005c86:	2800      	cmp	r0, #0
 8005c88:	d1f8      	bne.n	8005c7c <__gethex+0x84>
 8005c8a:	9a01      	ldr	r2, [sp, #4]
 8005c8c:	9903      	ldr	r1, [sp, #12]
 8005c8e:	4630      	mov	r0, r6
 8005c90:	f001 f8e0 	bl	8006e54 <strncmp>
 8005c94:	b950      	cbnz	r0, 8005cac <__gethex+0xb4>
 8005c96:	b954      	cbnz	r4, 8005cae <__gethex+0xb6>
 8005c98:	9b01      	ldr	r3, [sp, #4]
 8005c9a:	18f4      	adds	r4, r6, r3
 8005c9c:	4622      	mov	r2, r4
 8005c9e:	4616      	mov	r6, r2
 8005ca0:	7830      	ldrb	r0, [r6, #0]
 8005ca2:	3201      	adds	r2, #1
 8005ca4:	f7ff ff93 	bl	8005bce <__hexdig_fun>
 8005ca8:	2800      	cmp	r0, #0
 8005caa:	d1f8      	bne.n	8005c9e <__gethex+0xa6>
 8005cac:	b10c      	cbz	r4, 8005cb2 <__gethex+0xba>
 8005cae:	1ba4      	subs	r4, r4, r6
 8005cb0:	00a4      	lsls	r4, r4, #2
 8005cb2:	7833      	ldrb	r3, [r6, #0]
 8005cb4:	2b50      	cmp	r3, #80	; 0x50
 8005cb6:	d001      	beq.n	8005cbc <__gethex+0xc4>
 8005cb8:	2b70      	cmp	r3, #112	; 0x70
 8005cba:	d140      	bne.n	8005d3e <__gethex+0x146>
 8005cbc:	7873      	ldrb	r3, [r6, #1]
 8005cbe:	2b2b      	cmp	r3, #43	; 0x2b
 8005cc0:	d031      	beq.n	8005d26 <__gethex+0x12e>
 8005cc2:	2b2d      	cmp	r3, #45	; 0x2d
 8005cc4:	d033      	beq.n	8005d2e <__gethex+0x136>
 8005cc6:	f04f 0900 	mov.w	r9, #0
 8005cca:	1c71      	adds	r1, r6, #1
 8005ccc:	7808      	ldrb	r0, [r1, #0]
 8005cce:	f7ff ff7e 	bl	8005bce <__hexdig_fun>
 8005cd2:	1e43      	subs	r3, r0, #1
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	2b18      	cmp	r3, #24
 8005cd8:	d831      	bhi.n	8005d3e <__gethex+0x146>
 8005cda:	f1a0 0210 	sub.w	r2, r0, #16
 8005cde:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005ce2:	f7ff ff74 	bl	8005bce <__hexdig_fun>
 8005ce6:	1e43      	subs	r3, r0, #1
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b18      	cmp	r3, #24
 8005cec:	d922      	bls.n	8005d34 <__gethex+0x13c>
 8005cee:	f1b9 0f00 	cmp.w	r9, #0
 8005cf2:	d000      	beq.n	8005cf6 <__gethex+0xfe>
 8005cf4:	4252      	negs	r2, r2
 8005cf6:	4414      	add	r4, r2
 8005cf8:	f8ca 1000 	str.w	r1, [sl]
 8005cfc:	b30d      	cbz	r5, 8005d42 <__gethex+0x14a>
 8005cfe:	f1bb 0f00 	cmp.w	fp, #0
 8005d02:	bf0c      	ite	eq
 8005d04:	2706      	moveq	r7, #6
 8005d06:	2700      	movne	r7, #0
 8005d08:	4638      	mov	r0, r7
 8005d0a:	b00b      	add	sp, #44	; 0x2c
 8005d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d10:	f10b 0b01 	add.w	fp, fp, #1
 8005d14:	e78a      	b.n	8005c2c <__gethex+0x34>
 8005d16:	2500      	movs	r5, #0
 8005d18:	462c      	mov	r4, r5
 8005d1a:	e7ae      	b.n	8005c7a <__gethex+0x82>
 8005d1c:	463e      	mov	r6, r7
 8005d1e:	2501      	movs	r5, #1
 8005d20:	e7c7      	b.n	8005cb2 <__gethex+0xba>
 8005d22:	4604      	mov	r4, r0
 8005d24:	e7fb      	b.n	8005d1e <__gethex+0x126>
 8005d26:	f04f 0900 	mov.w	r9, #0
 8005d2a:	1cb1      	adds	r1, r6, #2
 8005d2c:	e7ce      	b.n	8005ccc <__gethex+0xd4>
 8005d2e:	f04f 0901 	mov.w	r9, #1
 8005d32:	e7fa      	b.n	8005d2a <__gethex+0x132>
 8005d34:	230a      	movs	r3, #10
 8005d36:	fb03 0202 	mla	r2, r3, r2, r0
 8005d3a:	3a10      	subs	r2, #16
 8005d3c:	e7cf      	b.n	8005cde <__gethex+0xe6>
 8005d3e:	4631      	mov	r1, r6
 8005d40:	e7da      	b.n	8005cf8 <__gethex+0x100>
 8005d42:	4629      	mov	r1, r5
 8005d44:	1bf3      	subs	r3, r6, r7
 8005d46:	3b01      	subs	r3, #1
 8005d48:	2b07      	cmp	r3, #7
 8005d4a:	dc49      	bgt.n	8005de0 <__gethex+0x1e8>
 8005d4c:	9802      	ldr	r0, [sp, #8]
 8005d4e:	f000 fa72 	bl	8006236 <_Balloc>
 8005d52:	f04f 0b00 	mov.w	fp, #0
 8005d56:	4605      	mov	r5, r0
 8005d58:	46da      	mov	sl, fp
 8005d5a:	9b01      	ldr	r3, [sp, #4]
 8005d5c:	f100 0914 	add.w	r9, r0, #20
 8005d60:	f1c3 0301 	rsb	r3, r3, #1
 8005d64:	f8cd 9010 	str.w	r9, [sp, #16]
 8005d68:	9308      	str	r3, [sp, #32]
 8005d6a:	42b7      	cmp	r7, r6
 8005d6c:	d33b      	bcc.n	8005de6 <__gethex+0x1ee>
 8005d6e:	9804      	ldr	r0, [sp, #16]
 8005d70:	f840 ab04 	str.w	sl, [r0], #4
 8005d74:	eba0 0009 	sub.w	r0, r0, r9
 8005d78:	1080      	asrs	r0, r0, #2
 8005d7a:	6128      	str	r0, [r5, #16]
 8005d7c:	0147      	lsls	r7, r0, #5
 8005d7e:	4650      	mov	r0, sl
 8005d80:	f000 fb1d 	bl	80063be <__hi0bits>
 8005d84:	f8d8 6000 	ldr.w	r6, [r8]
 8005d88:	1a3f      	subs	r7, r7, r0
 8005d8a:	42b7      	cmp	r7, r6
 8005d8c:	dd64      	ble.n	8005e58 <__gethex+0x260>
 8005d8e:	1bbf      	subs	r7, r7, r6
 8005d90:	4639      	mov	r1, r7
 8005d92:	4628      	mov	r0, r5
 8005d94:	f000 fe27 	bl	80069e6 <__any_on>
 8005d98:	4682      	mov	sl, r0
 8005d9a:	b178      	cbz	r0, 8005dbc <__gethex+0x1c4>
 8005d9c:	f04f 0a01 	mov.w	sl, #1
 8005da0:	1e7b      	subs	r3, r7, #1
 8005da2:	1159      	asrs	r1, r3, #5
 8005da4:	f003 021f 	and.w	r2, r3, #31
 8005da8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005dac:	fa0a f202 	lsl.w	r2, sl, r2
 8005db0:	420a      	tst	r2, r1
 8005db2:	d003      	beq.n	8005dbc <__gethex+0x1c4>
 8005db4:	4553      	cmp	r3, sl
 8005db6:	dc46      	bgt.n	8005e46 <__gethex+0x24e>
 8005db8:	f04f 0a02 	mov.w	sl, #2
 8005dbc:	4639      	mov	r1, r7
 8005dbe:	4628      	mov	r0, r5
 8005dc0:	f7ff feca 	bl	8005b58 <rshift>
 8005dc4:	443c      	add	r4, r7
 8005dc6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005dca:	42a3      	cmp	r3, r4
 8005dcc:	da52      	bge.n	8005e74 <__gethex+0x27c>
 8005dce:	4629      	mov	r1, r5
 8005dd0:	9802      	ldr	r0, [sp, #8]
 8005dd2:	f000 fa64 	bl	800629e <_Bfree>
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005dda:	27a3      	movs	r7, #163	; 0xa3
 8005ddc:	6013      	str	r3, [r2, #0]
 8005dde:	e793      	b.n	8005d08 <__gethex+0x110>
 8005de0:	3101      	adds	r1, #1
 8005de2:	105b      	asrs	r3, r3, #1
 8005de4:	e7b0      	b.n	8005d48 <__gethex+0x150>
 8005de6:	1e73      	subs	r3, r6, #1
 8005de8:	9305      	str	r3, [sp, #20]
 8005dea:	9a07      	ldr	r2, [sp, #28]
 8005dec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d018      	beq.n	8005e26 <__gethex+0x22e>
 8005df4:	f1bb 0f20 	cmp.w	fp, #32
 8005df8:	d107      	bne.n	8005e0a <__gethex+0x212>
 8005dfa:	9b04      	ldr	r3, [sp, #16]
 8005dfc:	f8c3 a000 	str.w	sl, [r3]
 8005e00:	f04f 0a00 	mov.w	sl, #0
 8005e04:	46d3      	mov	fp, sl
 8005e06:	3304      	adds	r3, #4
 8005e08:	9304      	str	r3, [sp, #16]
 8005e0a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005e0e:	f7ff fede 	bl	8005bce <__hexdig_fun>
 8005e12:	f000 000f 	and.w	r0, r0, #15
 8005e16:	fa00 f00b 	lsl.w	r0, r0, fp
 8005e1a:	ea4a 0a00 	orr.w	sl, sl, r0
 8005e1e:	f10b 0b04 	add.w	fp, fp, #4
 8005e22:	9b05      	ldr	r3, [sp, #20]
 8005e24:	e00d      	b.n	8005e42 <__gethex+0x24a>
 8005e26:	9b05      	ldr	r3, [sp, #20]
 8005e28:	9a08      	ldr	r2, [sp, #32]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	42bb      	cmp	r3, r7
 8005e2e:	d3e1      	bcc.n	8005df4 <__gethex+0x1fc>
 8005e30:	4618      	mov	r0, r3
 8005e32:	9a01      	ldr	r2, [sp, #4]
 8005e34:	9903      	ldr	r1, [sp, #12]
 8005e36:	9309      	str	r3, [sp, #36]	; 0x24
 8005e38:	f001 f80c 	bl	8006e54 <strncmp>
 8005e3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e3e:	2800      	cmp	r0, #0
 8005e40:	d1d8      	bne.n	8005df4 <__gethex+0x1fc>
 8005e42:	461e      	mov	r6, r3
 8005e44:	e791      	b.n	8005d6a <__gethex+0x172>
 8005e46:	1eb9      	subs	r1, r7, #2
 8005e48:	4628      	mov	r0, r5
 8005e4a:	f000 fdcc 	bl	80069e6 <__any_on>
 8005e4e:	2800      	cmp	r0, #0
 8005e50:	d0b2      	beq.n	8005db8 <__gethex+0x1c0>
 8005e52:	f04f 0a03 	mov.w	sl, #3
 8005e56:	e7b1      	b.n	8005dbc <__gethex+0x1c4>
 8005e58:	da09      	bge.n	8005e6e <__gethex+0x276>
 8005e5a:	1bf7      	subs	r7, r6, r7
 8005e5c:	4629      	mov	r1, r5
 8005e5e:	463a      	mov	r2, r7
 8005e60:	9802      	ldr	r0, [sp, #8]
 8005e62:	f000 fbe7 	bl	8006634 <__lshift>
 8005e66:	4605      	mov	r5, r0
 8005e68:	1be4      	subs	r4, r4, r7
 8005e6a:	f100 0914 	add.w	r9, r0, #20
 8005e6e:	f04f 0a00 	mov.w	sl, #0
 8005e72:	e7a8      	b.n	8005dc6 <__gethex+0x1ce>
 8005e74:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005e78:	42a0      	cmp	r0, r4
 8005e7a:	dd6b      	ble.n	8005f54 <__gethex+0x35c>
 8005e7c:	1b04      	subs	r4, r0, r4
 8005e7e:	42a6      	cmp	r6, r4
 8005e80:	dc2e      	bgt.n	8005ee0 <__gethex+0x2e8>
 8005e82:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d022      	beq.n	8005ed0 <__gethex+0x2d8>
 8005e8a:	2b03      	cmp	r3, #3
 8005e8c:	d024      	beq.n	8005ed8 <__gethex+0x2e0>
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d115      	bne.n	8005ebe <__gethex+0x2c6>
 8005e92:	42a6      	cmp	r6, r4
 8005e94:	d113      	bne.n	8005ebe <__gethex+0x2c6>
 8005e96:	2e01      	cmp	r6, #1
 8005e98:	dc0b      	bgt.n	8005eb2 <__gethex+0x2ba>
 8005e9a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005e9e:	9a06      	ldr	r2, [sp, #24]
 8005ea0:	2762      	movs	r7, #98	; 0x62
 8005ea2:	6013      	str	r3, [r2, #0]
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	612b      	str	r3, [r5, #16]
 8005ea8:	f8c9 3000 	str.w	r3, [r9]
 8005eac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005eae:	601d      	str	r5, [r3, #0]
 8005eb0:	e72a      	b.n	8005d08 <__gethex+0x110>
 8005eb2:	1e71      	subs	r1, r6, #1
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	f000 fd96 	bl	80069e6 <__any_on>
 8005eba:	2800      	cmp	r0, #0
 8005ebc:	d1ed      	bne.n	8005e9a <__gethex+0x2a2>
 8005ebe:	4629      	mov	r1, r5
 8005ec0:	9802      	ldr	r0, [sp, #8]
 8005ec2:	f000 f9ec 	bl	800629e <_Bfree>
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005eca:	2750      	movs	r7, #80	; 0x50
 8005ecc:	6013      	str	r3, [r2, #0]
 8005ece:	e71b      	b.n	8005d08 <__gethex+0x110>
 8005ed0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d0e1      	beq.n	8005e9a <__gethex+0x2a2>
 8005ed6:	e7f2      	b.n	8005ebe <__gethex+0x2c6>
 8005ed8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1dd      	bne.n	8005e9a <__gethex+0x2a2>
 8005ede:	e7ee      	b.n	8005ebe <__gethex+0x2c6>
 8005ee0:	1e67      	subs	r7, r4, #1
 8005ee2:	f1ba 0f00 	cmp.w	sl, #0
 8005ee6:	d132      	bne.n	8005f4e <__gethex+0x356>
 8005ee8:	b127      	cbz	r7, 8005ef4 <__gethex+0x2fc>
 8005eea:	4639      	mov	r1, r7
 8005eec:	4628      	mov	r0, r5
 8005eee:	f000 fd7a 	bl	80069e6 <__any_on>
 8005ef2:	4682      	mov	sl, r0
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	117a      	asrs	r2, r7, #5
 8005ef8:	f007 071f 	and.w	r7, r7, #31
 8005efc:	fa03 f707 	lsl.w	r7, r3, r7
 8005f00:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8005f04:	4621      	mov	r1, r4
 8005f06:	421f      	tst	r7, r3
 8005f08:	f04f 0702 	mov.w	r7, #2
 8005f0c:	4628      	mov	r0, r5
 8005f0e:	bf18      	it	ne
 8005f10:	f04a 0a02 	orrne.w	sl, sl, #2
 8005f14:	1b36      	subs	r6, r6, r4
 8005f16:	f7ff fe1f 	bl	8005b58 <rshift>
 8005f1a:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8005f1e:	f1ba 0f00 	cmp.w	sl, #0
 8005f22:	d048      	beq.n	8005fb6 <__gethex+0x3be>
 8005f24:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d015      	beq.n	8005f58 <__gethex+0x360>
 8005f2c:	2b03      	cmp	r3, #3
 8005f2e:	d017      	beq.n	8005f60 <__gethex+0x368>
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d109      	bne.n	8005f48 <__gethex+0x350>
 8005f34:	f01a 0f02 	tst.w	sl, #2
 8005f38:	d006      	beq.n	8005f48 <__gethex+0x350>
 8005f3a:	f8d9 3000 	ldr.w	r3, [r9]
 8005f3e:	ea4a 0a03 	orr.w	sl, sl, r3
 8005f42:	f01a 0f01 	tst.w	sl, #1
 8005f46:	d10e      	bne.n	8005f66 <__gethex+0x36e>
 8005f48:	f047 0710 	orr.w	r7, r7, #16
 8005f4c:	e033      	b.n	8005fb6 <__gethex+0x3be>
 8005f4e:	f04f 0a01 	mov.w	sl, #1
 8005f52:	e7cf      	b.n	8005ef4 <__gethex+0x2fc>
 8005f54:	2701      	movs	r7, #1
 8005f56:	e7e2      	b.n	8005f1e <__gethex+0x326>
 8005f58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005f5a:	f1c3 0301 	rsb	r3, r3, #1
 8005f5e:	9315      	str	r3, [sp, #84]	; 0x54
 8005f60:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d0f0      	beq.n	8005f48 <__gethex+0x350>
 8005f66:	f04f 0c00 	mov.w	ip, #0
 8005f6a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8005f6e:	f105 0314 	add.w	r3, r5, #20
 8005f72:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8005f76:	eb03 010a 	add.w	r1, r3, sl
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f80:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005f84:	d01c      	beq.n	8005fc0 <__gethex+0x3c8>
 8005f86:	3201      	adds	r2, #1
 8005f88:	6002      	str	r2, [r0, #0]
 8005f8a:	2f02      	cmp	r7, #2
 8005f8c:	f105 0314 	add.w	r3, r5, #20
 8005f90:	d138      	bne.n	8006004 <__gethex+0x40c>
 8005f92:	f8d8 2000 	ldr.w	r2, [r8]
 8005f96:	3a01      	subs	r2, #1
 8005f98:	42b2      	cmp	r2, r6
 8005f9a:	d10a      	bne.n	8005fb2 <__gethex+0x3ba>
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	1171      	asrs	r1, r6, #5
 8005fa0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005fa4:	f006 061f 	and.w	r6, r6, #31
 8005fa8:	fa02 f606 	lsl.w	r6, r2, r6
 8005fac:	421e      	tst	r6, r3
 8005fae:	bf18      	it	ne
 8005fb0:	4617      	movne	r7, r2
 8005fb2:	f047 0720 	orr.w	r7, r7, #32
 8005fb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005fb8:	601d      	str	r5, [r3, #0]
 8005fba:	9b06      	ldr	r3, [sp, #24]
 8005fbc:	601c      	str	r4, [r3, #0]
 8005fbe:	e6a3      	b.n	8005d08 <__gethex+0x110>
 8005fc0:	4299      	cmp	r1, r3
 8005fc2:	f843 cc04 	str.w	ip, [r3, #-4]
 8005fc6:	d8d8      	bhi.n	8005f7a <__gethex+0x382>
 8005fc8:	68ab      	ldr	r3, [r5, #8]
 8005fca:	4599      	cmp	r9, r3
 8005fcc:	db12      	blt.n	8005ff4 <__gethex+0x3fc>
 8005fce:	6869      	ldr	r1, [r5, #4]
 8005fd0:	9802      	ldr	r0, [sp, #8]
 8005fd2:	3101      	adds	r1, #1
 8005fd4:	f000 f92f 	bl	8006236 <_Balloc>
 8005fd8:	4683      	mov	fp, r0
 8005fda:	692a      	ldr	r2, [r5, #16]
 8005fdc:	f105 010c 	add.w	r1, r5, #12
 8005fe0:	3202      	adds	r2, #2
 8005fe2:	0092      	lsls	r2, r2, #2
 8005fe4:	300c      	adds	r0, #12
 8005fe6:	f000 f91b 	bl	8006220 <memcpy>
 8005fea:	4629      	mov	r1, r5
 8005fec:	9802      	ldr	r0, [sp, #8]
 8005fee:	f000 f956 	bl	800629e <_Bfree>
 8005ff2:	465d      	mov	r5, fp
 8005ff4:	692b      	ldr	r3, [r5, #16]
 8005ff6:	1c5a      	adds	r2, r3, #1
 8005ff8:	612a      	str	r2, [r5, #16]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006000:	615a      	str	r2, [r3, #20]
 8006002:	e7c2      	b.n	8005f8a <__gethex+0x392>
 8006004:	692a      	ldr	r2, [r5, #16]
 8006006:	454a      	cmp	r2, r9
 8006008:	dd0b      	ble.n	8006022 <__gethex+0x42a>
 800600a:	2101      	movs	r1, #1
 800600c:	4628      	mov	r0, r5
 800600e:	f7ff fda3 	bl	8005b58 <rshift>
 8006012:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006016:	3401      	adds	r4, #1
 8006018:	42a3      	cmp	r3, r4
 800601a:	f6ff aed8 	blt.w	8005dce <__gethex+0x1d6>
 800601e:	2701      	movs	r7, #1
 8006020:	e7c7      	b.n	8005fb2 <__gethex+0x3ba>
 8006022:	f016 061f 	ands.w	r6, r6, #31
 8006026:	d0fa      	beq.n	800601e <__gethex+0x426>
 8006028:	449a      	add	sl, r3
 800602a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800602e:	f000 f9c6 	bl	80063be <__hi0bits>
 8006032:	f1c6 0620 	rsb	r6, r6, #32
 8006036:	42b0      	cmp	r0, r6
 8006038:	dbe7      	blt.n	800600a <__gethex+0x412>
 800603a:	e7f0      	b.n	800601e <__gethex+0x426>

0800603c <L_shift>:
 800603c:	f1c2 0208 	rsb	r2, r2, #8
 8006040:	0092      	lsls	r2, r2, #2
 8006042:	b570      	push	{r4, r5, r6, lr}
 8006044:	f1c2 0620 	rsb	r6, r2, #32
 8006048:	6843      	ldr	r3, [r0, #4]
 800604a:	6804      	ldr	r4, [r0, #0]
 800604c:	fa03 f506 	lsl.w	r5, r3, r6
 8006050:	432c      	orrs	r4, r5
 8006052:	40d3      	lsrs	r3, r2
 8006054:	6004      	str	r4, [r0, #0]
 8006056:	f840 3f04 	str.w	r3, [r0, #4]!
 800605a:	4288      	cmp	r0, r1
 800605c:	d3f4      	bcc.n	8006048 <L_shift+0xc>
 800605e:	bd70      	pop	{r4, r5, r6, pc}

08006060 <__match>:
 8006060:	b530      	push	{r4, r5, lr}
 8006062:	6803      	ldr	r3, [r0, #0]
 8006064:	3301      	adds	r3, #1
 8006066:	f811 4b01 	ldrb.w	r4, [r1], #1
 800606a:	b914      	cbnz	r4, 8006072 <__match+0x12>
 800606c:	6003      	str	r3, [r0, #0]
 800606e:	2001      	movs	r0, #1
 8006070:	bd30      	pop	{r4, r5, pc}
 8006072:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006076:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800607a:	2d19      	cmp	r5, #25
 800607c:	bf98      	it	ls
 800607e:	3220      	addls	r2, #32
 8006080:	42a2      	cmp	r2, r4
 8006082:	d0f0      	beq.n	8006066 <__match+0x6>
 8006084:	2000      	movs	r0, #0
 8006086:	e7f3      	b.n	8006070 <__match+0x10>

08006088 <__hexnan>:
 8006088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800608c:	2500      	movs	r5, #0
 800608e:	680b      	ldr	r3, [r1, #0]
 8006090:	4682      	mov	sl, r0
 8006092:	115f      	asrs	r7, r3, #5
 8006094:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8006098:	f013 031f 	ands.w	r3, r3, #31
 800609c:	bf18      	it	ne
 800609e:	3704      	addne	r7, #4
 80060a0:	1f3e      	subs	r6, r7, #4
 80060a2:	4690      	mov	r8, r2
 80060a4:	46b1      	mov	r9, r6
 80060a6:	4634      	mov	r4, r6
 80060a8:	46ab      	mov	fp, r5
 80060aa:	b087      	sub	sp, #28
 80060ac:	6801      	ldr	r1, [r0, #0]
 80060ae:	9301      	str	r3, [sp, #4]
 80060b0:	f847 5c04 	str.w	r5, [r7, #-4]
 80060b4:	9502      	str	r5, [sp, #8]
 80060b6:	784a      	ldrb	r2, [r1, #1]
 80060b8:	1c4b      	adds	r3, r1, #1
 80060ba:	9303      	str	r3, [sp, #12]
 80060bc:	b342      	cbz	r2, 8006110 <__hexnan+0x88>
 80060be:	4610      	mov	r0, r2
 80060c0:	9105      	str	r1, [sp, #20]
 80060c2:	9204      	str	r2, [sp, #16]
 80060c4:	f7ff fd83 	bl	8005bce <__hexdig_fun>
 80060c8:	2800      	cmp	r0, #0
 80060ca:	d143      	bne.n	8006154 <__hexnan+0xcc>
 80060cc:	9a04      	ldr	r2, [sp, #16]
 80060ce:	9905      	ldr	r1, [sp, #20]
 80060d0:	2a20      	cmp	r2, #32
 80060d2:	d818      	bhi.n	8006106 <__hexnan+0x7e>
 80060d4:	9b02      	ldr	r3, [sp, #8]
 80060d6:	459b      	cmp	fp, r3
 80060d8:	dd13      	ble.n	8006102 <__hexnan+0x7a>
 80060da:	454c      	cmp	r4, r9
 80060dc:	d206      	bcs.n	80060ec <__hexnan+0x64>
 80060de:	2d07      	cmp	r5, #7
 80060e0:	dc04      	bgt.n	80060ec <__hexnan+0x64>
 80060e2:	462a      	mov	r2, r5
 80060e4:	4649      	mov	r1, r9
 80060e6:	4620      	mov	r0, r4
 80060e8:	f7ff ffa8 	bl	800603c <L_shift>
 80060ec:	4544      	cmp	r4, r8
 80060ee:	d944      	bls.n	800617a <__hexnan+0xf2>
 80060f0:	2300      	movs	r3, #0
 80060f2:	f1a4 0904 	sub.w	r9, r4, #4
 80060f6:	f844 3c04 	str.w	r3, [r4, #-4]
 80060fa:	461d      	mov	r5, r3
 80060fc:	464c      	mov	r4, r9
 80060fe:	f8cd b008 	str.w	fp, [sp, #8]
 8006102:	9903      	ldr	r1, [sp, #12]
 8006104:	e7d7      	b.n	80060b6 <__hexnan+0x2e>
 8006106:	2a29      	cmp	r2, #41	; 0x29
 8006108:	d14a      	bne.n	80061a0 <__hexnan+0x118>
 800610a:	3102      	adds	r1, #2
 800610c:	f8ca 1000 	str.w	r1, [sl]
 8006110:	f1bb 0f00 	cmp.w	fp, #0
 8006114:	d044      	beq.n	80061a0 <__hexnan+0x118>
 8006116:	454c      	cmp	r4, r9
 8006118:	d206      	bcs.n	8006128 <__hexnan+0xa0>
 800611a:	2d07      	cmp	r5, #7
 800611c:	dc04      	bgt.n	8006128 <__hexnan+0xa0>
 800611e:	462a      	mov	r2, r5
 8006120:	4649      	mov	r1, r9
 8006122:	4620      	mov	r0, r4
 8006124:	f7ff ff8a 	bl	800603c <L_shift>
 8006128:	4544      	cmp	r4, r8
 800612a:	d928      	bls.n	800617e <__hexnan+0xf6>
 800612c:	4643      	mov	r3, r8
 800612e:	f854 2b04 	ldr.w	r2, [r4], #4
 8006132:	42a6      	cmp	r6, r4
 8006134:	f843 2b04 	str.w	r2, [r3], #4
 8006138:	d2f9      	bcs.n	800612e <__hexnan+0xa6>
 800613a:	2200      	movs	r2, #0
 800613c:	f843 2b04 	str.w	r2, [r3], #4
 8006140:	429e      	cmp	r6, r3
 8006142:	d2fb      	bcs.n	800613c <__hexnan+0xb4>
 8006144:	6833      	ldr	r3, [r6, #0]
 8006146:	b91b      	cbnz	r3, 8006150 <__hexnan+0xc8>
 8006148:	4546      	cmp	r6, r8
 800614a:	d127      	bne.n	800619c <__hexnan+0x114>
 800614c:	2301      	movs	r3, #1
 800614e:	6033      	str	r3, [r6, #0]
 8006150:	2005      	movs	r0, #5
 8006152:	e026      	b.n	80061a2 <__hexnan+0x11a>
 8006154:	3501      	adds	r5, #1
 8006156:	2d08      	cmp	r5, #8
 8006158:	f10b 0b01 	add.w	fp, fp, #1
 800615c:	dd06      	ble.n	800616c <__hexnan+0xe4>
 800615e:	4544      	cmp	r4, r8
 8006160:	d9cf      	bls.n	8006102 <__hexnan+0x7a>
 8006162:	2300      	movs	r3, #0
 8006164:	2501      	movs	r5, #1
 8006166:	f844 3c04 	str.w	r3, [r4, #-4]
 800616a:	3c04      	subs	r4, #4
 800616c:	6822      	ldr	r2, [r4, #0]
 800616e:	f000 000f 	and.w	r0, r0, #15
 8006172:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8006176:	6020      	str	r0, [r4, #0]
 8006178:	e7c3      	b.n	8006102 <__hexnan+0x7a>
 800617a:	2508      	movs	r5, #8
 800617c:	e7c1      	b.n	8006102 <__hexnan+0x7a>
 800617e:	9b01      	ldr	r3, [sp, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d0df      	beq.n	8006144 <__hexnan+0xbc>
 8006184:	f04f 32ff 	mov.w	r2, #4294967295
 8006188:	f1c3 0320 	rsb	r3, r3, #32
 800618c:	fa22 f303 	lsr.w	r3, r2, r3
 8006190:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8006194:	401a      	ands	r2, r3
 8006196:	f847 2c04 	str.w	r2, [r7, #-4]
 800619a:	e7d3      	b.n	8006144 <__hexnan+0xbc>
 800619c:	3e04      	subs	r6, #4
 800619e:	e7d1      	b.n	8006144 <__hexnan+0xbc>
 80061a0:	2004      	movs	r0, #4
 80061a2:	b007      	add	sp, #28
 80061a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080061a8 <__locale_ctype_ptr_l>:
 80061a8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80061ac:	4770      	bx	lr

080061ae <__localeconv_l>:
 80061ae:	30f0      	adds	r0, #240	; 0xf0
 80061b0:	4770      	bx	lr
	...

080061b4 <_localeconv_r>:
 80061b4:	4b04      	ldr	r3, [pc, #16]	; (80061c8 <_localeconv_r+0x14>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	6a18      	ldr	r0, [r3, #32]
 80061ba:	4b04      	ldr	r3, [pc, #16]	; (80061cc <_localeconv_r+0x18>)
 80061bc:	2800      	cmp	r0, #0
 80061be:	bf08      	it	eq
 80061c0:	4618      	moveq	r0, r3
 80061c2:	30f0      	adds	r0, #240	; 0xf0
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	2000000c 	.word	0x2000000c
 80061cc:	20000070 	.word	0x20000070

080061d0 <malloc>:
 80061d0:	4b02      	ldr	r3, [pc, #8]	; (80061dc <malloc+0xc>)
 80061d2:	4601      	mov	r1, r0
 80061d4:	6818      	ldr	r0, [r3, #0]
 80061d6:	f000 bc81 	b.w	8006adc <_malloc_r>
 80061da:	bf00      	nop
 80061dc:	2000000c 	.word	0x2000000c

080061e0 <__ascii_mbtowc>:
 80061e0:	b082      	sub	sp, #8
 80061e2:	b901      	cbnz	r1, 80061e6 <__ascii_mbtowc+0x6>
 80061e4:	a901      	add	r1, sp, #4
 80061e6:	b142      	cbz	r2, 80061fa <__ascii_mbtowc+0x1a>
 80061e8:	b14b      	cbz	r3, 80061fe <__ascii_mbtowc+0x1e>
 80061ea:	7813      	ldrb	r3, [r2, #0]
 80061ec:	600b      	str	r3, [r1, #0]
 80061ee:	7812      	ldrb	r2, [r2, #0]
 80061f0:	1c10      	adds	r0, r2, #0
 80061f2:	bf18      	it	ne
 80061f4:	2001      	movne	r0, #1
 80061f6:	b002      	add	sp, #8
 80061f8:	4770      	bx	lr
 80061fa:	4610      	mov	r0, r2
 80061fc:	e7fb      	b.n	80061f6 <__ascii_mbtowc+0x16>
 80061fe:	f06f 0001 	mvn.w	r0, #1
 8006202:	e7f8      	b.n	80061f6 <__ascii_mbtowc+0x16>

08006204 <memchr>:
 8006204:	b510      	push	{r4, lr}
 8006206:	b2c9      	uxtb	r1, r1
 8006208:	4402      	add	r2, r0
 800620a:	4290      	cmp	r0, r2
 800620c:	4603      	mov	r3, r0
 800620e:	d101      	bne.n	8006214 <memchr+0x10>
 8006210:	2300      	movs	r3, #0
 8006212:	e003      	b.n	800621c <memchr+0x18>
 8006214:	781c      	ldrb	r4, [r3, #0]
 8006216:	3001      	adds	r0, #1
 8006218:	428c      	cmp	r4, r1
 800621a:	d1f6      	bne.n	800620a <memchr+0x6>
 800621c:	4618      	mov	r0, r3
 800621e:	bd10      	pop	{r4, pc}

08006220 <memcpy>:
 8006220:	b510      	push	{r4, lr}
 8006222:	1e43      	subs	r3, r0, #1
 8006224:	440a      	add	r2, r1
 8006226:	4291      	cmp	r1, r2
 8006228:	d100      	bne.n	800622c <memcpy+0xc>
 800622a:	bd10      	pop	{r4, pc}
 800622c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006230:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006234:	e7f7      	b.n	8006226 <memcpy+0x6>

08006236 <_Balloc>:
 8006236:	b570      	push	{r4, r5, r6, lr}
 8006238:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800623a:	4604      	mov	r4, r0
 800623c:	460e      	mov	r6, r1
 800623e:	b93d      	cbnz	r5, 8006250 <_Balloc+0x1a>
 8006240:	2010      	movs	r0, #16
 8006242:	f7ff ffc5 	bl	80061d0 <malloc>
 8006246:	6260      	str	r0, [r4, #36]	; 0x24
 8006248:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800624c:	6005      	str	r5, [r0, #0]
 800624e:	60c5      	str	r5, [r0, #12]
 8006250:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006252:	68eb      	ldr	r3, [r5, #12]
 8006254:	b183      	cbz	r3, 8006278 <_Balloc+0x42>
 8006256:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800625e:	b9b8      	cbnz	r0, 8006290 <_Balloc+0x5a>
 8006260:	2101      	movs	r1, #1
 8006262:	fa01 f506 	lsl.w	r5, r1, r6
 8006266:	1d6a      	adds	r2, r5, #5
 8006268:	0092      	lsls	r2, r2, #2
 800626a:	4620      	mov	r0, r4
 800626c:	f000 fbdc 	bl	8006a28 <_calloc_r>
 8006270:	b160      	cbz	r0, 800628c <_Balloc+0x56>
 8006272:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006276:	e00e      	b.n	8006296 <_Balloc+0x60>
 8006278:	2221      	movs	r2, #33	; 0x21
 800627a:	2104      	movs	r1, #4
 800627c:	4620      	mov	r0, r4
 800627e:	f000 fbd3 	bl	8006a28 <_calloc_r>
 8006282:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006284:	60e8      	str	r0, [r5, #12]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1e4      	bne.n	8006256 <_Balloc+0x20>
 800628c:	2000      	movs	r0, #0
 800628e:	bd70      	pop	{r4, r5, r6, pc}
 8006290:	6802      	ldr	r2, [r0, #0]
 8006292:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006296:	2300      	movs	r3, #0
 8006298:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800629c:	e7f7      	b.n	800628e <_Balloc+0x58>

0800629e <_Bfree>:
 800629e:	b570      	push	{r4, r5, r6, lr}
 80062a0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80062a2:	4606      	mov	r6, r0
 80062a4:	460d      	mov	r5, r1
 80062a6:	b93c      	cbnz	r4, 80062b8 <_Bfree+0x1a>
 80062a8:	2010      	movs	r0, #16
 80062aa:	f7ff ff91 	bl	80061d0 <malloc>
 80062ae:	6270      	str	r0, [r6, #36]	; 0x24
 80062b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80062b4:	6004      	str	r4, [r0, #0]
 80062b6:	60c4      	str	r4, [r0, #12]
 80062b8:	b13d      	cbz	r5, 80062ca <_Bfree+0x2c>
 80062ba:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80062bc:	686a      	ldr	r2, [r5, #4]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80062c4:	6029      	str	r1, [r5, #0]
 80062c6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80062ca:	bd70      	pop	{r4, r5, r6, pc}

080062cc <__multadd>:
 80062cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062d0:	461f      	mov	r7, r3
 80062d2:	4606      	mov	r6, r0
 80062d4:	460c      	mov	r4, r1
 80062d6:	2300      	movs	r3, #0
 80062d8:	690d      	ldr	r5, [r1, #16]
 80062da:	f101 0c14 	add.w	ip, r1, #20
 80062de:	f8dc 0000 	ldr.w	r0, [ip]
 80062e2:	3301      	adds	r3, #1
 80062e4:	b281      	uxth	r1, r0
 80062e6:	fb02 7101 	mla	r1, r2, r1, r7
 80062ea:	0c00      	lsrs	r0, r0, #16
 80062ec:	0c0f      	lsrs	r7, r1, #16
 80062ee:	fb02 7000 	mla	r0, r2, r0, r7
 80062f2:	b289      	uxth	r1, r1
 80062f4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80062f8:	429d      	cmp	r5, r3
 80062fa:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80062fe:	f84c 1b04 	str.w	r1, [ip], #4
 8006302:	dcec      	bgt.n	80062de <__multadd+0x12>
 8006304:	b1d7      	cbz	r7, 800633c <__multadd+0x70>
 8006306:	68a3      	ldr	r3, [r4, #8]
 8006308:	42ab      	cmp	r3, r5
 800630a:	dc12      	bgt.n	8006332 <__multadd+0x66>
 800630c:	6861      	ldr	r1, [r4, #4]
 800630e:	4630      	mov	r0, r6
 8006310:	3101      	adds	r1, #1
 8006312:	f7ff ff90 	bl	8006236 <_Balloc>
 8006316:	4680      	mov	r8, r0
 8006318:	6922      	ldr	r2, [r4, #16]
 800631a:	f104 010c 	add.w	r1, r4, #12
 800631e:	3202      	adds	r2, #2
 8006320:	0092      	lsls	r2, r2, #2
 8006322:	300c      	adds	r0, #12
 8006324:	f7ff ff7c 	bl	8006220 <memcpy>
 8006328:	4621      	mov	r1, r4
 800632a:	4630      	mov	r0, r6
 800632c:	f7ff ffb7 	bl	800629e <_Bfree>
 8006330:	4644      	mov	r4, r8
 8006332:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006336:	3501      	adds	r5, #1
 8006338:	615f      	str	r7, [r3, #20]
 800633a:	6125      	str	r5, [r4, #16]
 800633c:	4620      	mov	r0, r4
 800633e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006342 <__s2b>:
 8006342:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006346:	4615      	mov	r5, r2
 8006348:	2209      	movs	r2, #9
 800634a:	461f      	mov	r7, r3
 800634c:	3308      	adds	r3, #8
 800634e:	460c      	mov	r4, r1
 8006350:	fb93 f3f2 	sdiv	r3, r3, r2
 8006354:	4606      	mov	r6, r0
 8006356:	2201      	movs	r2, #1
 8006358:	2100      	movs	r1, #0
 800635a:	429a      	cmp	r2, r3
 800635c:	db20      	blt.n	80063a0 <__s2b+0x5e>
 800635e:	4630      	mov	r0, r6
 8006360:	f7ff ff69 	bl	8006236 <_Balloc>
 8006364:	9b08      	ldr	r3, [sp, #32]
 8006366:	2d09      	cmp	r5, #9
 8006368:	6143      	str	r3, [r0, #20]
 800636a:	f04f 0301 	mov.w	r3, #1
 800636e:	6103      	str	r3, [r0, #16]
 8006370:	dd19      	ble.n	80063a6 <__s2b+0x64>
 8006372:	f104 0809 	add.w	r8, r4, #9
 8006376:	46c1      	mov	r9, r8
 8006378:	442c      	add	r4, r5
 800637a:	f819 3b01 	ldrb.w	r3, [r9], #1
 800637e:	4601      	mov	r1, r0
 8006380:	3b30      	subs	r3, #48	; 0x30
 8006382:	220a      	movs	r2, #10
 8006384:	4630      	mov	r0, r6
 8006386:	f7ff ffa1 	bl	80062cc <__multadd>
 800638a:	45a1      	cmp	r9, r4
 800638c:	d1f5      	bne.n	800637a <__s2b+0x38>
 800638e:	eb08 0405 	add.w	r4, r8, r5
 8006392:	3c08      	subs	r4, #8
 8006394:	1b2d      	subs	r5, r5, r4
 8006396:	1963      	adds	r3, r4, r5
 8006398:	42bb      	cmp	r3, r7
 800639a:	db07      	blt.n	80063ac <__s2b+0x6a>
 800639c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063a0:	0052      	lsls	r2, r2, #1
 80063a2:	3101      	adds	r1, #1
 80063a4:	e7d9      	b.n	800635a <__s2b+0x18>
 80063a6:	340a      	adds	r4, #10
 80063a8:	2509      	movs	r5, #9
 80063aa:	e7f3      	b.n	8006394 <__s2b+0x52>
 80063ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80063b0:	4601      	mov	r1, r0
 80063b2:	3b30      	subs	r3, #48	; 0x30
 80063b4:	220a      	movs	r2, #10
 80063b6:	4630      	mov	r0, r6
 80063b8:	f7ff ff88 	bl	80062cc <__multadd>
 80063bc:	e7eb      	b.n	8006396 <__s2b+0x54>

080063be <__hi0bits>:
 80063be:	0c02      	lsrs	r2, r0, #16
 80063c0:	0412      	lsls	r2, r2, #16
 80063c2:	4603      	mov	r3, r0
 80063c4:	b9b2      	cbnz	r2, 80063f4 <__hi0bits+0x36>
 80063c6:	0403      	lsls	r3, r0, #16
 80063c8:	2010      	movs	r0, #16
 80063ca:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80063ce:	bf04      	itt	eq
 80063d0:	021b      	lsleq	r3, r3, #8
 80063d2:	3008      	addeq	r0, #8
 80063d4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80063d8:	bf04      	itt	eq
 80063da:	011b      	lsleq	r3, r3, #4
 80063dc:	3004      	addeq	r0, #4
 80063de:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80063e2:	bf04      	itt	eq
 80063e4:	009b      	lsleq	r3, r3, #2
 80063e6:	3002      	addeq	r0, #2
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	db06      	blt.n	80063fa <__hi0bits+0x3c>
 80063ec:	005b      	lsls	r3, r3, #1
 80063ee:	d503      	bpl.n	80063f8 <__hi0bits+0x3a>
 80063f0:	3001      	adds	r0, #1
 80063f2:	4770      	bx	lr
 80063f4:	2000      	movs	r0, #0
 80063f6:	e7e8      	b.n	80063ca <__hi0bits+0xc>
 80063f8:	2020      	movs	r0, #32
 80063fa:	4770      	bx	lr

080063fc <__lo0bits>:
 80063fc:	6803      	ldr	r3, [r0, #0]
 80063fe:	4601      	mov	r1, r0
 8006400:	f013 0207 	ands.w	r2, r3, #7
 8006404:	d00b      	beq.n	800641e <__lo0bits+0x22>
 8006406:	07da      	lsls	r2, r3, #31
 8006408:	d423      	bmi.n	8006452 <__lo0bits+0x56>
 800640a:	0798      	lsls	r0, r3, #30
 800640c:	bf49      	itett	mi
 800640e:	085b      	lsrmi	r3, r3, #1
 8006410:	089b      	lsrpl	r3, r3, #2
 8006412:	2001      	movmi	r0, #1
 8006414:	600b      	strmi	r3, [r1, #0]
 8006416:	bf5c      	itt	pl
 8006418:	600b      	strpl	r3, [r1, #0]
 800641a:	2002      	movpl	r0, #2
 800641c:	4770      	bx	lr
 800641e:	b298      	uxth	r0, r3
 8006420:	b9a8      	cbnz	r0, 800644e <__lo0bits+0x52>
 8006422:	2010      	movs	r0, #16
 8006424:	0c1b      	lsrs	r3, r3, #16
 8006426:	f013 0fff 	tst.w	r3, #255	; 0xff
 800642a:	bf04      	itt	eq
 800642c:	0a1b      	lsreq	r3, r3, #8
 800642e:	3008      	addeq	r0, #8
 8006430:	071a      	lsls	r2, r3, #28
 8006432:	bf04      	itt	eq
 8006434:	091b      	lsreq	r3, r3, #4
 8006436:	3004      	addeq	r0, #4
 8006438:	079a      	lsls	r2, r3, #30
 800643a:	bf04      	itt	eq
 800643c:	089b      	lsreq	r3, r3, #2
 800643e:	3002      	addeq	r0, #2
 8006440:	07da      	lsls	r2, r3, #31
 8006442:	d402      	bmi.n	800644a <__lo0bits+0x4e>
 8006444:	085b      	lsrs	r3, r3, #1
 8006446:	d006      	beq.n	8006456 <__lo0bits+0x5a>
 8006448:	3001      	adds	r0, #1
 800644a:	600b      	str	r3, [r1, #0]
 800644c:	4770      	bx	lr
 800644e:	4610      	mov	r0, r2
 8006450:	e7e9      	b.n	8006426 <__lo0bits+0x2a>
 8006452:	2000      	movs	r0, #0
 8006454:	4770      	bx	lr
 8006456:	2020      	movs	r0, #32
 8006458:	4770      	bx	lr

0800645a <__i2b>:
 800645a:	b510      	push	{r4, lr}
 800645c:	460c      	mov	r4, r1
 800645e:	2101      	movs	r1, #1
 8006460:	f7ff fee9 	bl	8006236 <_Balloc>
 8006464:	2201      	movs	r2, #1
 8006466:	6144      	str	r4, [r0, #20]
 8006468:	6102      	str	r2, [r0, #16]
 800646a:	bd10      	pop	{r4, pc}

0800646c <__multiply>:
 800646c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006470:	4614      	mov	r4, r2
 8006472:	690a      	ldr	r2, [r1, #16]
 8006474:	6923      	ldr	r3, [r4, #16]
 8006476:	4688      	mov	r8, r1
 8006478:	429a      	cmp	r2, r3
 800647a:	bfbe      	ittt	lt
 800647c:	460b      	movlt	r3, r1
 800647e:	46a0      	movlt	r8, r4
 8006480:	461c      	movlt	r4, r3
 8006482:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006486:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800648a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800648e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006492:	eb07 0609 	add.w	r6, r7, r9
 8006496:	42b3      	cmp	r3, r6
 8006498:	bfb8      	it	lt
 800649a:	3101      	addlt	r1, #1
 800649c:	f7ff fecb 	bl	8006236 <_Balloc>
 80064a0:	f100 0514 	add.w	r5, r0, #20
 80064a4:	462b      	mov	r3, r5
 80064a6:	2200      	movs	r2, #0
 80064a8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80064ac:	4573      	cmp	r3, lr
 80064ae:	d316      	bcc.n	80064de <__multiply+0x72>
 80064b0:	f104 0214 	add.w	r2, r4, #20
 80064b4:	f108 0114 	add.w	r1, r8, #20
 80064b8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80064bc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80064c0:	9300      	str	r3, [sp, #0]
 80064c2:	9b00      	ldr	r3, [sp, #0]
 80064c4:	9201      	str	r2, [sp, #4]
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d80c      	bhi.n	80064e4 <__multiply+0x78>
 80064ca:	2e00      	cmp	r6, #0
 80064cc:	dd03      	ble.n	80064d6 <__multiply+0x6a>
 80064ce:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d05d      	beq.n	8006592 <__multiply+0x126>
 80064d6:	6106      	str	r6, [r0, #16]
 80064d8:	b003      	add	sp, #12
 80064da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064de:	f843 2b04 	str.w	r2, [r3], #4
 80064e2:	e7e3      	b.n	80064ac <__multiply+0x40>
 80064e4:	f8b2 b000 	ldrh.w	fp, [r2]
 80064e8:	f1bb 0f00 	cmp.w	fp, #0
 80064ec:	d023      	beq.n	8006536 <__multiply+0xca>
 80064ee:	4689      	mov	r9, r1
 80064f0:	46ac      	mov	ip, r5
 80064f2:	f04f 0800 	mov.w	r8, #0
 80064f6:	f859 4b04 	ldr.w	r4, [r9], #4
 80064fa:	f8dc a000 	ldr.w	sl, [ip]
 80064fe:	b2a3      	uxth	r3, r4
 8006500:	fa1f fa8a 	uxth.w	sl, sl
 8006504:	fb0b a303 	mla	r3, fp, r3, sl
 8006508:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800650c:	f8dc 4000 	ldr.w	r4, [ip]
 8006510:	4443      	add	r3, r8
 8006512:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006516:	fb0b 840a 	mla	r4, fp, sl, r8
 800651a:	46e2      	mov	sl, ip
 800651c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006520:	b29b      	uxth	r3, r3
 8006522:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006526:	454f      	cmp	r7, r9
 8006528:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800652c:	f84a 3b04 	str.w	r3, [sl], #4
 8006530:	d82b      	bhi.n	800658a <__multiply+0x11e>
 8006532:	f8cc 8004 	str.w	r8, [ip, #4]
 8006536:	9b01      	ldr	r3, [sp, #4]
 8006538:	3204      	adds	r2, #4
 800653a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800653e:	f1ba 0f00 	cmp.w	sl, #0
 8006542:	d020      	beq.n	8006586 <__multiply+0x11a>
 8006544:	4689      	mov	r9, r1
 8006546:	46a8      	mov	r8, r5
 8006548:	f04f 0b00 	mov.w	fp, #0
 800654c:	682b      	ldr	r3, [r5, #0]
 800654e:	f8b9 c000 	ldrh.w	ip, [r9]
 8006552:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006556:	b29b      	uxth	r3, r3
 8006558:	fb0a 440c 	mla	r4, sl, ip, r4
 800655c:	46c4      	mov	ip, r8
 800655e:	445c      	add	r4, fp
 8006560:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006564:	f84c 3b04 	str.w	r3, [ip], #4
 8006568:	f859 3b04 	ldr.w	r3, [r9], #4
 800656c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006570:	0c1b      	lsrs	r3, r3, #16
 8006572:	fb0a b303 	mla	r3, sl, r3, fp
 8006576:	454f      	cmp	r7, r9
 8006578:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800657c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006580:	d805      	bhi.n	800658e <__multiply+0x122>
 8006582:	f8c8 3004 	str.w	r3, [r8, #4]
 8006586:	3504      	adds	r5, #4
 8006588:	e79b      	b.n	80064c2 <__multiply+0x56>
 800658a:	46d4      	mov	ip, sl
 800658c:	e7b3      	b.n	80064f6 <__multiply+0x8a>
 800658e:	46e0      	mov	r8, ip
 8006590:	e7dd      	b.n	800654e <__multiply+0xe2>
 8006592:	3e01      	subs	r6, #1
 8006594:	e799      	b.n	80064ca <__multiply+0x5e>
	...

08006598 <__pow5mult>:
 8006598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800659c:	4615      	mov	r5, r2
 800659e:	f012 0203 	ands.w	r2, r2, #3
 80065a2:	4606      	mov	r6, r0
 80065a4:	460f      	mov	r7, r1
 80065a6:	d007      	beq.n	80065b8 <__pow5mult+0x20>
 80065a8:	4c21      	ldr	r4, [pc, #132]	; (8006630 <__pow5mult+0x98>)
 80065aa:	3a01      	subs	r2, #1
 80065ac:	2300      	movs	r3, #0
 80065ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80065b2:	f7ff fe8b 	bl	80062cc <__multadd>
 80065b6:	4607      	mov	r7, r0
 80065b8:	10ad      	asrs	r5, r5, #2
 80065ba:	d035      	beq.n	8006628 <__pow5mult+0x90>
 80065bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80065be:	b93c      	cbnz	r4, 80065d0 <__pow5mult+0x38>
 80065c0:	2010      	movs	r0, #16
 80065c2:	f7ff fe05 	bl	80061d0 <malloc>
 80065c6:	6270      	str	r0, [r6, #36]	; 0x24
 80065c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80065cc:	6004      	str	r4, [r0, #0]
 80065ce:	60c4      	str	r4, [r0, #12]
 80065d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80065d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80065d8:	b94c      	cbnz	r4, 80065ee <__pow5mult+0x56>
 80065da:	f240 2171 	movw	r1, #625	; 0x271
 80065de:	4630      	mov	r0, r6
 80065e0:	f7ff ff3b 	bl	800645a <__i2b>
 80065e4:	2300      	movs	r3, #0
 80065e6:	4604      	mov	r4, r0
 80065e8:	f8c8 0008 	str.w	r0, [r8, #8]
 80065ec:	6003      	str	r3, [r0, #0]
 80065ee:	f04f 0800 	mov.w	r8, #0
 80065f2:	07eb      	lsls	r3, r5, #31
 80065f4:	d50a      	bpl.n	800660c <__pow5mult+0x74>
 80065f6:	4639      	mov	r1, r7
 80065f8:	4622      	mov	r2, r4
 80065fa:	4630      	mov	r0, r6
 80065fc:	f7ff ff36 	bl	800646c <__multiply>
 8006600:	4681      	mov	r9, r0
 8006602:	4639      	mov	r1, r7
 8006604:	4630      	mov	r0, r6
 8006606:	f7ff fe4a 	bl	800629e <_Bfree>
 800660a:	464f      	mov	r7, r9
 800660c:	106d      	asrs	r5, r5, #1
 800660e:	d00b      	beq.n	8006628 <__pow5mult+0x90>
 8006610:	6820      	ldr	r0, [r4, #0]
 8006612:	b938      	cbnz	r0, 8006624 <__pow5mult+0x8c>
 8006614:	4622      	mov	r2, r4
 8006616:	4621      	mov	r1, r4
 8006618:	4630      	mov	r0, r6
 800661a:	f7ff ff27 	bl	800646c <__multiply>
 800661e:	6020      	str	r0, [r4, #0]
 8006620:	f8c0 8000 	str.w	r8, [r0]
 8006624:	4604      	mov	r4, r0
 8006626:	e7e4      	b.n	80065f2 <__pow5mult+0x5a>
 8006628:	4638      	mov	r0, r7
 800662a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800662e:	bf00      	nop
 8006630:	08007118 	.word	0x08007118

08006634 <__lshift>:
 8006634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006638:	460c      	mov	r4, r1
 800663a:	4607      	mov	r7, r0
 800663c:	4616      	mov	r6, r2
 800663e:	6923      	ldr	r3, [r4, #16]
 8006640:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006644:	eb0a 0903 	add.w	r9, sl, r3
 8006648:	6849      	ldr	r1, [r1, #4]
 800664a:	68a3      	ldr	r3, [r4, #8]
 800664c:	f109 0501 	add.w	r5, r9, #1
 8006650:	42ab      	cmp	r3, r5
 8006652:	db32      	blt.n	80066ba <__lshift+0x86>
 8006654:	4638      	mov	r0, r7
 8006656:	f7ff fdee 	bl	8006236 <_Balloc>
 800665a:	2300      	movs	r3, #0
 800665c:	4680      	mov	r8, r0
 800665e:	461a      	mov	r2, r3
 8006660:	f100 0114 	add.w	r1, r0, #20
 8006664:	4553      	cmp	r3, sl
 8006666:	db2b      	blt.n	80066c0 <__lshift+0x8c>
 8006668:	6920      	ldr	r0, [r4, #16]
 800666a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800666e:	f104 0314 	add.w	r3, r4, #20
 8006672:	f016 021f 	ands.w	r2, r6, #31
 8006676:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800667a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800667e:	d025      	beq.n	80066cc <__lshift+0x98>
 8006680:	2000      	movs	r0, #0
 8006682:	f1c2 0e20 	rsb	lr, r2, #32
 8006686:	468a      	mov	sl, r1
 8006688:	681e      	ldr	r6, [r3, #0]
 800668a:	4096      	lsls	r6, r2
 800668c:	4330      	orrs	r0, r6
 800668e:	f84a 0b04 	str.w	r0, [sl], #4
 8006692:	f853 0b04 	ldr.w	r0, [r3], #4
 8006696:	459c      	cmp	ip, r3
 8006698:	fa20 f00e 	lsr.w	r0, r0, lr
 800669c:	d814      	bhi.n	80066c8 <__lshift+0x94>
 800669e:	6048      	str	r0, [r1, #4]
 80066a0:	b108      	cbz	r0, 80066a6 <__lshift+0x72>
 80066a2:	f109 0502 	add.w	r5, r9, #2
 80066a6:	3d01      	subs	r5, #1
 80066a8:	4638      	mov	r0, r7
 80066aa:	f8c8 5010 	str.w	r5, [r8, #16]
 80066ae:	4621      	mov	r1, r4
 80066b0:	f7ff fdf5 	bl	800629e <_Bfree>
 80066b4:	4640      	mov	r0, r8
 80066b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ba:	3101      	adds	r1, #1
 80066bc:	005b      	lsls	r3, r3, #1
 80066be:	e7c7      	b.n	8006650 <__lshift+0x1c>
 80066c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80066c4:	3301      	adds	r3, #1
 80066c6:	e7cd      	b.n	8006664 <__lshift+0x30>
 80066c8:	4651      	mov	r1, sl
 80066ca:	e7dc      	b.n	8006686 <__lshift+0x52>
 80066cc:	3904      	subs	r1, #4
 80066ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80066d2:	459c      	cmp	ip, r3
 80066d4:	f841 2f04 	str.w	r2, [r1, #4]!
 80066d8:	d8f9      	bhi.n	80066ce <__lshift+0x9a>
 80066da:	e7e4      	b.n	80066a6 <__lshift+0x72>

080066dc <__mcmp>:
 80066dc:	6903      	ldr	r3, [r0, #16]
 80066de:	690a      	ldr	r2, [r1, #16]
 80066e0:	b530      	push	{r4, r5, lr}
 80066e2:	1a9b      	subs	r3, r3, r2
 80066e4:	d10c      	bne.n	8006700 <__mcmp+0x24>
 80066e6:	0092      	lsls	r2, r2, #2
 80066e8:	3014      	adds	r0, #20
 80066ea:	3114      	adds	r1, #20
 80066ec:	1884      	adds	r4, r0, r2
 80066ee:	4411      	add	r1, r2
 80066f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80066f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80066f8:	4295      	cmp	r5, r2
 80066fa:	d003      	beq.n	8006704 <__mcmp+0x28>
 80066fc:	d305      	bcc.n	800670a <__mcmp+0x2e>
 80066fe:	2301      	movs	r3, #1
 8006700:	4618      	mov	r0, r3
 8006702:	bd30      	pop	{r4, r5, pc}
 8006704:	42a0      	cmp	r0, r4
 8006706:	d3f3      	bcc.n	80066f0 <__mcmp+0x14>
 8006708:	e7fa      	b.n	8006700 <__mcmp+0x24>
 800670a:	f04f 33ff 	mov.w	r3, #4294967295
 800670e:	e7f7      	b.n	8006700 <__mcmp+0x24>

08006710 <__mdiff>:
 8006710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006714:	460d      	mov	r5, r1
 8006716:	4607      	mov	r7, r0
 8006718:	4611      	mov	r1, r2
 800671a:	4628      	mov	r0, r5
 800671c:	4614      	mov	r4, r2
 800671e:	f7ff ffdd 	bl	80066dc <__mcmp>
 8006722:	1e06      	subs	r6, r0, #0
 8006724:	d108      	bne.n	8006738 <__mdiff+0x28>
 8006726:	4631      	mov	r1, r6
 8006728:	4638      	mov	r0, r7
 800672a:	f7ff fd84 	bl	8006236 <_Balloc>
 800672e:	2301      	movs	r3, #1
 8006730:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006738:	bfa4      	itt	ge
 800673a:	4623      	movge	r3, r4
 800673c:	462c      	movge	r4, r5
 800673e:	4638      	mov	r0, r7
 8006740:	6861      	ldr	r1, [r4, #4]
 8006742:	bfa6      	itte	ge
 8006744:	461d      	movge	r5, r3
 8006746:	2600      	movge	r6, #0
 8006748:	2601      	movlt	r6, #1
 800674a:	f7ff fd74 	bl	8006236 <_Balloc>
 800674e:	f04f 0e00 	mov.w	lr, #0
 8006752:	60c6      	str	r6, [r0, #12]
 8006754:	692b      	ldr	r3, [r5, #16]
 8006756:	6926      	ldr	r6, [r4, #16]
 8006758:	f104 0214 	add.w	r2, r4, #20
 800675c:	f105 0914 	add.w	r9, r5, #20
 8006760:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006764:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006768:	f100 0114 	add.w	r1, r0, #20
 800676c:	f852 ab04 	ldr.w	sl, [r2], #4
 8006770:	f859 5b04 	ldr.w	r5, [r9], #4
 8006774:	fa1f f38a 	uxth.w	r3, sl
 8006778:	4473      	add	r3, lr
 800677a:	b2ac      	uxth	r4, r5
 800677c:	1b1b      	subs	r3, r3, r4
 800677e:	0c2c      	lsrs	r4, r5, #16
 8006780:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8006784:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8006788:	b29b      	uxth	r3, r3
 800678a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800678e:	45c8      	cmp	r8, r9
 8006790:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8006794:	4694      	mov	ip, r2
 8006796:	f841 4b04 	str.w	r4, [r1], #4
 800679a:	d8e7      	bhi.n	800676c <__mdiff+0x5c>
 800679c:	45bc      	cmp	ip, r7
 800679e:	d304      	bcc.n	80067aa <__mdiff+0x9a>
 80067a0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80067a4:	b183      	cbz	r3, 80067c8 <__mdiff+0xb8>
 80067a6:	6106      	str	r6, [r0, #16]
 80067a8:	e7c4      	b.n	8006734 <__mdiff+0x24>
 80067aa:	f85c 4b04 	ldr.w	r4, [ip], #4
 80067ae:	b2a2      	uxth	r2, r4
 80067b0:	4472      	add	r2, lr
 80067b2:	1413      	asrs	r3, r2, #16
 80067b4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80067b8:	b292      	uxth	r2, r2
 80067ba:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80067be:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80067c2:	f841 2b04 	str.w	r2, [r1], #4
 80067c6:	e7e9      	b.n	800679c <__mdiff+0x8c>
 80067c8:	3e01      	subs	r6, #1
 80067ca:	e7e9      	b.n	80067a0 <__mdiff+0x90>

080067cc <__ulp>:
 80067cc:	4b10      	ldr	r3, [pc, #64]	; (8006810 <__ulp+0x44>)
 80067ce:	400b      	ands	r3, r1
 80067d0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	dd02      	ble.n	80067de <__ulp+0x12>
 80067d8:	2000      	movs	r0, #0
 80067da:	4619      	mov	r1, r3
 80067dc:	4770      	bx	lr
 80067de:	425b      	negs	r3, r3
 80067e0:	151b      	asrs	r3, r3, #20
 80067e2:	2b13      	cmp	r3, #19
 80067e4:	f04f 0000 	mov.w	r0, #0
 80067e8:	f04f 0100 	mov.w	r1, #0
 80067ec:	dc04      	bgt.n	80067f8 <__ulp+0x2c>
 80067ee:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80067f2:	fa42 f103 	asr.w	r1, r2, r3
 80067f6:	4770      	bx	lr
 80067f8:	2201      	movs	r2, #1
 80067fa:	3b14      	subs	r3, #20
 80067fc:	2b1e      	cmp	r3, #30
 80067fe:	bfce      	itee	gt
 8006800:	4613      	movgt	r3, r2
 8006802:	f1c3 031f 	rsble	r3, r3, #31
 8006806:	fa02 f303 	lslle.w	r3, r2, r3
 800680a:	4618      	mov	r0, r3
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	7ff00000 	.word	0x7ff00000

08006814 <__b2d>:
 8006814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006818:	6907      	ldr	r7, [r0, #16]
 800681a:	f100 0914 	add.w	r9, r0, #20
 800681e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8006822:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8006826:	f1a7 0804 	sub.w	r8, r7, #4
 800682a:	4630      	mov	r0, r6
 800682c:	f7ff fdc7 	bl	80063be <__hi0bits>
 8006830:	f1c0 0320 	rsb	r3, r0, #32
 8006834:	280a      	cmp	r0, #10
 8006836:	600b      	str	r3, [r1, #0]
 8006838:	491e      	ldr	r1, [pc, #120]	; (80068b4 <__b2d+0xa0>)
 800683a:	dc17      	bgt.n	800686c <__b2d+0x58>
 800683c:	45c1      	cmp	r9, r8
 800683e:	bf28      	it	cs
 8006840:	2200      	movcs	r2, #0
 8006842:	f1c0 0c0b 	rsb	ip, r0, #11
 8006846:	fa26 f30c 	lsr.w	r3, r6, ip
 800684a:	bf38      	it	cc
 800684c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006850:	ea43 0501 	orr.w	r5, r3, r1
 8006854:	f100 0315 	add.w	r3, r0, #21
 8006858:	fa06 f303 	lsl.w	r3, r6, r3
 800685c:	fa22 f20c 	lsr.w	r2, r2, ip
 8006860:	ea43 0402 	orr.w	r4, r3, r2
 8006864:	4620      	mov	r0, r4
 8006866:	4629      	mov	r1, r5
 8006868:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800686c:	45c1      	cmp	r9, r8
 800686e:	bf3a      	itte	cc
 8006870:	f1a7 0808 	subcc.w	r8, r7, #8
 8006874:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006878:	2200      	movcs	r2, #0
 800687a:	f1b0 030b 	subs.w	r3, r0, #11
 800687e:	d015      	beq.n	80068ac <__b2d+0x98>
 8006880:	409e      	lsls	r6, r3
 8006882:	f1c3 0720 	rsb	r7, r3, #32
 8006886:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800688a:	fa22 f107 	lsr.w	r1, r2, r7
 800688e:	45c8      	cmp	r8, r9
 8006890:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8006894:	ea46 0501 	orr.w	r5, r6, r1
 8006898:	bf94      	ite	ls
 800689a:	2100      	movls	r1, #0
 800689c:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80068a0:	fa02 f003 	lsl.w	r0, r2, r3
 80068a4:	40f9      	lsrs	r1, r7
 80068a6:	ea40 0401 	orr.w	r4, r0, r1
 80068aa:	e7db      	b.n	8006864 <__b2d+0x50>
 80068ac:	ea46 0501 	orr.w	r5, r6, r1
 80068b0:	4614      	mov	r4, r2
 80068b2:	e7d7      	b.n	8006864 <__b2d+0x50>
 80068b4:	3ff00000 	.word	0x3ff00000

080068b8 <__d2b>:
 80068b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80068bc:	461c      	mov	r4, r3
 80068be:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80068c2:	2101      	movs	r1, #1
 80068c4:	4690      	mov	r8, r2
 80068c6:	f7ff fcb6 	bl	8006236 <_Balloc>
 80068ca:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80068ce:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80068d2:	4607      	mov	r7, r0
 80068d4:	bb34      	cbnz	r4, 8006924 <__d2b+0x6c>
 80068d6:	9201      	str	r2, [sp, #4]
 80068d8:	f1b8 0200 	subs.w	r2, r8, #0
 80068dc:	d027      	beq.n	800692e <__d2b+0x76>
 80068de:	a802      	add	r0, sp, #8
 80068e0:	f840 2d08 	str.w	r2, [r0, #-8]!
 80068e4:	f7ff fd8a 	bl	80063fc <__lo0bits>
 80068e8:	9900      	ldr	r1, [sp, #0]
 80068ea:	b1f0      	cbz	r0, 800692a <__d2b+0x72>
 80068ec:	9a01      	ldr	r2, [sp, #4]
 80068ee:	f1c0 0320 	rsb	r3, r0, #32
 80068f2:	fa02 f303 	lsl.w	r3, r2, r3
 80068f6:	430b      	orrs	r3, r1
 80068f8:	40c2      	lsrs	r2, r0
 80068fa:	617b      	str	r3, [r7, #20]
 80068fc:	9201      	str	r2, [sp, #4]
 80068fe:	9b01      	ldr	r3, [sp, #4]
 8006900:	2b00      	cmp	r3, #0
 8006902:	bf14      	ite	ne
 8006904:	2102      	movne	r1, #2
 8006906:	2101      	moveq	r1, #1
 8006908:	61bb      	str	r3, [r7, #24]
 800690a:	6139      	str	r1, [r7, #16]
 800690c:	b1c4      	cbz	r4, 8006940 <__d2b+0x88>
 800690e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006912:	4404      	add	r4, r0
 8006914:	6034      	str	r4, [r6, #0]
 8006916:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800691a:	6028      	str	r0, [r5, #0]
 800691c:	4638      	mov	r0, r7
 800691e:	b002      	add	sp, #8
 8006920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006924:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006928:	e7d5      	b.n	80068d6 <__d2b+0x1e>
 800692a:	6179      	str	r1, [r7, #20]
 800692c:	e7e7      	b.n	80068fe <__d2b+0x46>
 800692e:	a801      	add	r0, sp, #4
 8006930:	f7ff fd64 	bl	80063fc <__lo0bits>
 8006934:	2101      	movs	r1, #1
 8006936:	9b01      	ldr	r3, [sp, #4]
 8006938:	6139      	str	r1, [r7, #16]
 800693a:	617b      	str	r3, [r7, #20]
 800693c:	3020      	adds	r0, #32
 800693e:	e7e5      	b.n	800690c <__d2b+0x54>
 8006940:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006944:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006948:	6030      	str	r0, [r6, #0]
 800694a:	6918      	ldr	r0, [r3, #16]
 800694c:	f7ff fd37 	bl	80063be <__hi0bits>
 8006950:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006954:	e7e1      	b.n	800691a <__d2b+0x62>

08006956 <__ratio>:
 8006956:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800695a:	4688      	mov	r8, r1
 800695c:	4669      	mov	r1, sp
 800695e:	4681      	mov	r9, r0
 8006960:	f7ff ff58 	bl	8006814 <__b2d>
 8006964:	468b      	mov	fp, r1
 8006966:	4606      	mov	r6, r0
 8006968:	460f      	mov	r7, r1
 800696a:	4640      	mov	r0, r8
 800696c:	a901      	add	r1, sp, #4
 800696e:	f7ff ff51 	bl	8006814 <__b2d>
 8006972:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006976:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800697a:	460d      	mov	r5, r1
 800697c:	eba3 0c02 	sub.w	ip, r3, r2
 8006980:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006984:	1a9b      	subs	r3, r3, r2
 8006986:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800698a:	2b00      	cmp	r3, #0
 800698c:	bfd5      	itete	le
 800698e:	460a      	movle	r2, r1
 8006990:	463a      	movgt	r2, r7
 8006992:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006996:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800699a:	bfd8      	it	le
 800699c:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 80069a0:	462b      	mov	r3, r5
 80069a2:	4602      	mov	r2, r0
 80069a4:	4659      	mov	r1, fp
 80069a6:	4630      	mov	r0, r6
 80069a8:	f7f9 fec0 	bl	800072c <__aeabi_ddiv>
 80069ac:	b003      	add	sp, #12
 80069ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080069b2 <__copybits>:
 80069b2:	3901      	subs	r1, #1
 80069b4:	b510      	push	{r4, lr}
 80069b6:	1149      	asrs	r1, r1, #5
 80069b8:	6914      	ldr	r4, [r2, #16]
 80069ba:	3101      	adds	r1, #1
 80069bc:	f102 0314 	add.w	r3, r2, #20
 80069c0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80069c4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80069c8:	42a3      	cmp	r3, r4
 80069ca:	4602      	mov	r2, r0
 80069cc:	d303      	bcc.n	80069d6 <__copybits+0x24>
 80069ce:	2300      	movs	r3, #0
 80069d0:	428a      	cmp	r2, r1
 80069d2:	d305      	bcc.n	80069e0 <__copybits+0x2e>
 80069d4:	bd10      	pop	{r4, pc}
 80069d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80069da:	f840 2b04 	str.w	r2, [r0], #4
 80069de:	e7f3      	b.n	80069c8 <__copybits+0x16>
 80069e0:	f842 3b04 	str.w	r3, [r2], #4
 80069e4:	e7f4      	b.n	80069d0 <__copybits+0x1e>

080069e6 <__any_on>:
 80069e6:	f100 0214 	add.w	r2, r0, #20
 80069ea:	6900      	ldr	r0, [r0, #16]
 80069ec:	114b      	asrs	r3, r1, #5
 80069ee:	4298      	cmp	r0, r3
 80069f0:	b510      	push	{r4, lr}
 80069f2:	db11      	blt.n	8006a18 <__any_on+0x32>
 80069f4:	dd0a      	ble.n	8006a0c <__any_on+0x26>
 80069f6:	f011 011f 	ands.w	r1, r1, #31
 80069fa:	d007      	beq.n	8006a0c <__any_on+0x26>
 80069fc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006a00:	fa24 f001 	lsr.w	r0, r4, r1
 8006a04:	fa00 f101 	lsl.w	r1, r0, r1
 8006a08:	428c      	cmp	r4, r1
 8006a0a:	d10b      	bne.n	8006a24 <__any_on+0x3e>
 8006a0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d803      	bhi.n	8006a1c <__any_on+0x36>
 8006a14:	2000      	movs	r0, #0
 8006a16:	bd10      	pop	{r4, pc}
 8006a18:	4603      	mov	r3, r0
 8006a1a:	e7f7      	b.n	8006a0c <__any_on+0x26>
 8006a1c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006a20:	2900      	cmp	r1, #0
 8006a22:	d0f5      	beq.n	8006a10 <__any_on+0x2a>
 8006a24:	2001      	movs	r0, #1
 8006a26:	e7f6      	b.n	8006a16 <__any_on+0x30>

08006a28 <_calloc_r>:
 8006a28:	b538      	push	{r3, r4, r5, lr}
 8006a2a:	fb02 f401 	mul.w	r4, r2, r1
 8006a2e:	4621      	mov	r1, r4
 8006a30:	f000 f854 	bl	8006adc <_malloc_r>
 8006a34:	4605      	mov	r5, r0
 8006a36:	b118      	cbz	r0, 8006a40 <_calloc_r+0x18>
 8006a38:	4622      	mov	r2, r4
 8006a3a:	2100      	movs	r1, #0
 8006a3c:	f7fc fd2e 	bl	800349c <memset>
 8006a40:	4628      	mov	r0, r5
 8006a42:	bd38      	pop	{r3, r4, r5, pc}

08006a44 <_free_r>:
 8006a44:	b538      	push	{r3, r4, r5, lr}
 8006a46:	4605      	mov	r5, r0
 8006a48:	2900      	cmp	r1, #0
 8006a4a:	d043      	beq.n	8006ad4 <_free_r+0x90>
 8006a4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a50:	1f0c      	subs	r4, r1, #4
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	bfb8      	it	lt
 8006a56:	18e4      	addlt	r4, r4, r3
 8006a58:	f000 fa34 	bl	8006ec4 <__malloc_lock>
 8006a5c:	4a1e      	ldr	r2, [pc, #120]	; (8006ad8 <_free_r+0x94>)
 8006a5e:	6813      	ldr	r3, [r2, #0]
 8006a60:	4610      	mov	r0, r2
 8006a62:	b933      	cbnz	r3, 8006a72 <_free_r+0x2e>
 8006a64:	6063      	str	r3, [r4, #4]
 8006a66:	6014      	str	r4, [r2, #0]
 8006a68:	4628      	mov	r0, r5
 8006a6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a6e:	f000 ba2a 	b.w	8006ec6 <__malloc_unlock>
 8006a72:	42a3      	cmp	r3, r4
 8006a74:	d90b      	bls.n	8006a8e <_free_r+0x4a>
 8006a76:	6821      	ldr	r1, [r4, #0]
 8006a78:	1862      	adds	r2, r4, r1
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	bf01      	itttt	eq
 8006a7e:	681a      	ldreq	r2, [r3, #0]
 8006a80:	685b      	ldreq	r3, [r3, #4]
 8006a82:	1852      	addeq	r2, r2, r1
 8006a84:	6022      	streq	r2, [r4, #0]
 8006a86:	6063      	str	r3, [r4, #4]
 8006a88:	6004      	str	r4, [r0, #0]
 8006a8a:	e7ed      	b.n	8006a68 <_free_r+0x24>
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	685a      	ldr	r2, [r3, #4]
 8006a90:	b10a      	cbz	r2, 8006a96 <_free_r+0x52>
 8006a92:	42a2      	cmp	r2, r4
 8006a94:	d9fa      	bls.n	8006a8c <_free_r+0x48>
 8006a96:	6819      	ldr	r1, [r3, #0]
 8006a98:	1858      	adds	r0, r3, r1
 8006a9a:	42a0      	cmp	r0, r4
 8006a9c:	d10b      	bne.n	8006ab6 <_free_r+0x72>
 8006a9e:	6820      	ldr	r0, [r4, #0]
 8006aa0:	4401      	add	r1, r0
 8006aa2:	1858      	adds	r0, r3, r1
 8006aa4:	4282      	cmp	r2, r0
 8006aa6:	6019      	str	r1, [r3, #0]
 8006aa8:	d1de      	bne.n	8006a68 <_free_r+0x24>
 8006aaa:	6810      	ldr	r0, [r2, #0]
 8006aac:	6852      	ldr	r2, [r2, #4]
 8006aae:	4401      	add	r1, r0
 8006ab0:	6019      	str	r1, [r3, #0]
 8006ab2:	605a      	str	r2, [r3, #4]
 8006ab4:	e7d8      	b.n	8006a68 <_free_r+0x24>
 8006ab6:	d902      	bls.n	8006abe <_free_r+0x7a>
 8006ab8:	230c      	movs	r3, #12
 8006aba:	602b      	str	r3, [r5, #0]
 8006abc:	e7d4      	b.n	8006a68 <_free_r+0x24>
 8006abe:	6820      	ldr	r0, [r4, #0]
 8006ac0:	1821      	adds	r1, r4, r0
 8006ac2:	428a      	cmp	r2, r1
 8006ac4:	bf01      	itttt	eq
 8006ac6:	6811      	ldreq	r1, [r2, #0]
 8006ac8:	6852      	ldreq	r2, [r2, #4]
 8006aca:	1809      	addeq	r1, r1, r0
 8006acc:	6021      	streq	r1, [r4, #0]
 8006ace:	6062      	str	r2, [r4, #4]
 8006ad0:	605c      	str	r4, [r3, #4]
 8006ad2:	e7c9      	b.n	8006a68 <_free_r+0x24>
 8006ad4:	bd38      	pop	{r3, r4, r5, pc}
 8006ad6:	bf00      	nop
 8006ad8:	20000204 	.word	0x20000204

08006adc <_malloc_r>:
 8006adc:	b570      	push	{r4, r5, r6, lr}
 8006ade:	1ccd      	adds	r5, r1, #3
 8006ae0:	f025 0503 	bic.w	r5, r5, #3
 8006ae4:	3508      	adds	r5, #8
 8006ae6:	2d0c      	cmp	r5, #12
 8006ae8:	bf38      	it	cc
 8006aea:	250c      	movcc	r5, #12
 8006aec:	2d00      	cmp	r5, #0
 8006aee:	4606      	mov	r6, r0
 8006af0:	db01      	blt.n	8006af6 <_malloc_r+0x1a>
 8006af2:	42a9      	cmp	r1, r5
 8006af4:	d903      	bls.n	8006afe <_malloc_r+0x22>
 8006af6:	230c      	movs	r3, #12
 8006af8:	6033      	str	r3, [r6, #0]
 8006afa:	2000      	movs	r0, #0
 8006afc:	bd70      	pop	{r4, r5, r6, pc}
 8006afe:	f000 f9e1 	bl	8006ec4 <__malloc_lock>
 8006b02:	4a21      	ldr	r2, [pc, #132]	; (8006b88 <_malloc_r+0xac>)
 8006b04:	6814      	ldr	r4, [r2, #0]
 8006b06:	4621      	mov	r1, r4
 8006b08:	b991      	cbnz	r1, 8006b30 <_malloc_r+0x54>
 8006b0a:	4c20      	ldr	r4, [pc, #128]	; (8006b8c <_malloc_r+0xb0>)
 8006b0c:	6823      	ldr	r3, [r4, #0]
 8006b0e:	b91b      	cbnz	r3, 8006b18 <_malloc_r+0x3c>
 8006b10:	4630      	mov	r0, r6
 8006b12:	f000 f98f 	bl	8006e34 <_sbrk_r>
 8006b16:	6020      	str	r0, [r4, #0]
 8006b18:	4629      	mov	r1, r5
 8006b1a:	4630      	mov	r0, r6
 8006b1c:	f000 f98a 	bl	8006e34 <_sbrk_r>
 8006b20:	1c43      	adds	r3, r0, #1
 8006b22:	d124      	bne.n	8006b6e <_malloc_r+0x92>
 8006b24:	230c      	movs	r3, #12
 8006b26:	4630      	mov	r0, r6
 8006b28:	6033      	str	r3, [r6, #0]
 8006b2a:	f000 f9cc 	bl	8006ec6 <__malloc_unlock>
 8006b2e:	e7e4      	b.n	8006afa <_malloc_r+0x1e>
 8006b30:	680b      	ldr	r3, [r1, #0]
 8006b32:	1b5b      	subs	r3, r3, r5
 8006b34:	d418      	bmi.n	8006b68 <_malloc_r+0x8c>
 8006b36:	2b0b      	cmp	r3, #11
 8006b38:	d90f      	bls.n	8006b5a <_malloc_r+0x7e>
 8006b3a:	600b      	str	r3, [r1, #0]
 8006b3c:	18cc      	adds	r4, r1, r3
 8006b3e:	50cd      	str	r5, [r1, r3]
 8006b40:	4630      	mov	r0, r6
 8006b42:	f000 f9c0 	bl	8006ec6 <__malloc_unlock>
 8006b46:	f104 000b 	add.w	r0, r4, #11
 8006b4a:	1d23      	adds	r3, r4, #4
 8006b4c:	f020 0007 	bic.w	r0, r0, #7
 8006b50:	1ac3      	subs	r3, r0, r3
 8006b52:	d0d3      	beq.n	8006afc <_malloc_r+0x20>
 8006b54:	425a      	negs	r2, r3
 8006b56:	50e2      	str	r2, [r4, r3]
 8006b58:	e7d0      	b.n	8006afc <_malloc_r+0x20>
 8006b5a:	684b      	ldr	r3, [r1, #4]
 8006b5c:	428c      	cmp	r4, r1
 8006b5e:	bf16      	itet	ne
 8006b60:	6063      	strne	r3, [r4, #4]
 8006b62:	6013      	streq	r3, [r2, #0]
 8006b64:	460c      	movne	r4, r1
 8006b66:	e7eb      	b.n	8006b40 <_malloc_r+0x64>
 8006b68:	460c      	mov	r4, r1
 8006b6a:	6849      	ldr	r1, [r1, #4]
 8006b6c:	e7cc      	b.n	8006b08 <_malloc_r+0x2c>
 8006b6e:	1cc4      	adds	r4, r0, #3
 8006b70:	f024 0403 	bic.w	r4, r4, #3
 8006b74:	42a0      	cmp	r0, r4
 8006b76:	d005      	beq.n	8006b84 <_malloc_r+0xa8>
 8006b78:	1a21      	subs	r1, r4, r0
 8006b7a:	4630      	mov	r0, r6
 8006b7c:	f000 f95a 	bl	8006e34 <_sbrk_r>
 8006b80:	3001      	adds	r0, #1
 8006b82:	d0cf      	beq.n	8006b24 <_malloc_r+0x48>
 8006b84:	6025      	str	r5, [r4, #0]
 8006b86:	e7db      	b.n	8006b40 <_malloc_r+0x64>
 8006b88:	20000204 	.word	0x20000204
 8006b8c:	20000208 	.word	0x20000208

08006b90 <__ssputs_r>:
 8006b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b94:	688e      	ldr	r6, [r1, #8]
 8006b96:	4682      	mov	sl, r0
 8006b98:	429e      	cmp	r6, r3
 8006b9a:	460c      	mov	r4, r1
 8006b9c:	4690      	mov	r8, r2
 8006b9e:	4699      	mov	r9, r3
 8006ba0:	d837      	bhi.n	8006c12 <__ssputs_r+0x82>
 8006ba2:	898a      	ldrh	r2, [r1, #12]
 8006ba4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006ba8:	d031      	beq.n	8006c0e <__ssputs_r+0x7e>
 8006baa:	2302      	movs	r3, #2
 8006bac:	6825      	ldr	r5, [r4, #0]
 8006bae:	6909      	ldr	r1, [r1, #16]
 8006bb0:	1a6f      	subs	r7, r5, r1
 8006bb2:	6965      	ldr	r5, [r4, #20]
 8006bb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006bb8:	fb95 f5f3 	sdiv	r5, r5, r3
 8006bbc:	f109 0301 	add.w	r3, r9, #1
 8006bc0:	443b      	add	r3, r7
 8006bc2:	429d      	cmp	r5, r3
 8006bc4:	bf38      	it	cc
 8006bc6:	461d      	movcc	r5, r3
 8006bc8:	0553      	lsls	r3, r2, #21
 8006bca:	d530      	bpl.n	8006c2e <__ssputs_r+0x9e>
 8006bcc:	4629      	mov	r1, r5
 8006bce:	f7ff ff85 	bl	8006adc <_malloc_r>
 8006bd2:	4606      	mov	r6, r0
 8006bd4:	b950      	cbnz	r0, 8006bec <__ssputs_r+0x5c>
 8006bd6:	230c      	movs	r3, #12
 8006bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bdc:	f8ca 3000 	str.w	r3, [sl]
 8006be0:	89a3      	ldrh	r3, [r4, #12]
 8006be2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006be6:	81a3      	strh	r3, [r4, #12]
 8006be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bec:	463a      	mov	r2, r7
 8006bee:	6921      	ldr	r1, [r4, #16]
 8006bf0:	f7ff fb16 	bl	8006220 <memcpy>
 8006bf4:	89a3      	ldrh	r3, [r4, #12]
 8006bf6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bfe:	81a3      	strh	r3, [r4, #12]
 8006c00:	6126      	str	r6, [r4, #16]
 8006c02:	443e      	add	r6, r7
 8006c04:	6026      	str	r6, [r4, #0]
 8006c06:	464e      	mov	r6, r9
 8006c08:	6165      	str	r5, [r4, #20]
 8006c0a:	1bed      	subs	r5, r5, r7
 8006c0c:	60a5      	str	r5, [r4, #8]
 8006c0e:	454e      	cmp	r6, r9
 8006c10:	d900      	bls.n	8006c14 <__ssputs_r+0x84>
 8006c12:	464e      	mov	r6, r9
 8006c14:	4632      	mov	r2, r6
 8006c16:	4641      	mov	r1, r8
 8006c18:	6820      	ldr	r0, [r4, #0]
 8006c1a:	f000 f93a 	bl	8006e92 <memmove>
 8006c1e:	68a3      	ldr	r3, [r4, #8]
 8006c20:	2000      	movs	r0, #0
 8006c22:	1b9b      	subs	r3, r3, r6
 8006c24:	60a3      	str	r3, [r4, #8]
 8006c26:	6823      	ldr	r3, [r4, #0]
 8006c28:	441e      	add	r6, r3
 8006c2a:	6026      	str	r6, [r4, #0]
 8006c2c:	e7dc      	b.n	8006be8 <__ssputs_r+0x58>
 8006c2e:	462a      	mov	r2, r5
 8006c30:	f000 f94a 	bl	8006ec8 <_realloc_r>
 8006c34:	4606      	mov	r6, r0
 8006c36:	2800      	cmp	r0, #0
 8006c38:	d1e2      	bne.n	8006c00 <__ssputs_r+0x70>
 8006c3a:	6921      	ldr	r1, [r4, #16]
 8006c3c:	4650      	mov	r0, sl
 8006c3e:	f7ff ff01 	bl	8006a44 <_free_r>
 8006c42:	e7c8      	b.n	8006bd6 <__ssputs_r+0x46>

08006c44 <_svfiprintf_r>:
 8006c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c48:	461d      	mov	r5, r3
 8006c4a:	898b      	ldrh	r3, [r1, #12]
 8006c4c:	b09d      	sub	sp, #116	; 0x74
 8006c4e:	061f      	lsls	r7, r3, #24
 8006c50:	4680      	mov	r8, r0
 8006c52:	460c      	mov	r4, r1
 8006c54:	4616      	mov	r6, r2
 8006c56:	d50f      	bpl.n	8006c78 <_svfiprintf_r+0x34>
 8006c58:	690b      	ldr	r3, [r1, #16]
 8006c5a:	b96b      	cbnz	r3, 8006c78 <_svfiprintf_r+0x34>
 8006c5c:	2140      	movs	r1, #64	; 0x40
 8006c5e:	f7ff ff3d 	bl	8006adc <_malloc_r>
 8006c62:	6020      	str	r0, [r4, #0]
 8006c64:	6120      	str	r0, [r4, #16]
 8006c66:	b928      	cbnz	r0, 8006c74 <_svfiprintf_r+0x30>
 8006c68:	230c      	movs	r3, #12
 8006c6a:	f8c8 3000 	str.w	r3, [r8]
 8006c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c72:	e0c8      	b.n	8006e06 <_svfiprintf_r+0x1c2>
 8006c74:	2340      	movs	r3, #64	; 0x40
 8006c76:	6163      	str	r3, [r4, #20]
 8006c78:	2300      	movs	r3, #0
 8006c7a:	9309      	str	r3, [sp, #36]	; 0x24
 8006c7c:	2320      	movs	r3, #32
 8006c7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c82:	2330      	movs	r3, #48	; 0x30
 8006c84:	f04f 0b01 	mov.w	fp, #1
 8006c88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c8c:	9503      	str	r5, [sp, #12]
 8006c8e:	4637      	mov	r7, r6
 8006c90:	463d      	mov	r5, r7
 8006c92:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006c96:	b10b      	cbz	r3, 8006c9c <_svfiprintf_r+0x58>
 8006c98:	2b25      	cmp	r3, #37	; 0x25
 8006c9a:	d13e      	bne.n	8006d1a <_svfiprintf_r+0xd6>
 8006c9c:	ebb7 0a06 	subs.w	sl, r7, r6
 8006ca0:	d00b      	beq.n	8006cba <_svfiprintf_r+0x76>
 8006ca2:	4653      	mov	r3, sl
 8006ca4:	4632      	mov	r2, r6
 8006ca6:	4621      	mov	r1, r4
 8006ca8:	4640      	mov	r0, r8
 8006caa:	f7ff ff71 	bl	8006b90 <__ssputs_r>
 8006cae:	3001      	adds	r0, #1
 8006cb0:	f000 80a4 	beq.w	8006dfc <_svfiprintf_r+0x1b8>
 8006cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cb6:	4453      	add	r3, sl
 8006cb8:	9309      	str	r3, [sp, #36]	; 0x24
 8006cba:	783b      	ldrb	r3, [r7, #0]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f000 809d 	beq.w	8006dfc <_svfiprintf_r+0x1b8>
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8006cc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ccc:	9304      	str	r3, [sp, #16]
 8006cce:	9307      	str	r3, [sp, #28]
 8006cd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cd4:	931a      	str	r3, [sp, #104]	; 0x68
 8006cd6:	462f      	mov	r7, r5
 8006cd8:	2205      	movs	r2, #5
 8006cda:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006cde:	4850      	ldr	r0, [pc, #320]	; (8006e20 <_svfiprintf_r+0x1dc>)
 8006ce0:	f7ff fa90 	bl	8006204 <memchr>
 8006ce4:	9b04      	ldr	r3, [sp, #16]
 8006ce6:	b9d0      	cbnz	r0, 8006d1e <_svfiprintf_r+0xda>
 8006ce8:	06d9      	lsls	r1, r3, #27
 8006cea:	bf44      	itt	mi
 8006cec:	2220      	movmi	r2, #32
 8006cee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006cf2:	071a      	lsls	r2, r3, #28
 8006cf4:	bf44      	itt	mi
 8006cf6:	222b      	movmi	r2, #43	; 0x2b
 8006cf8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006cfc:	782a      	ldrb	r2, [r5, #0]
 8006cfe:	2a2a      	cmp	r2, #42	; 0x2a
 8006d00:	d015      	beq.n	8006d2e <_svfiprintf_r+0xea>
 8006d02:	462f      	mov	r7, r5
 8006d04:	2000      	movs	r0, #0
 8006d06:	250a      	movs	r5, #10
 8006d08:	9a07      	ldr	r2, [sp, #28]
 8006d0a:	4639      	mov	r1, r7
 8006d0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d10:	3b30      	subs	r3, #48	; 0x30
 8006d12:	2b09      	cmp	r3, #9
 8006d14:	d94d      	bls.n	8006db2 <_svfiprintf_r+0x16e>
 8006d16:	b1b8      	cbz	r0, 8006d48 <_svfiprintf_r+0x104>
 8006d18:	e00f      	b.n	8006d3a <_svfiprintf_r+0xf6>
 8006d1a:	462f      	mov	r7, r5
 8006d1c:	e7b8      	b.n	8006c90 <_svfiprintf_r+0x4c>
 8006d1e:	4a40      	ldr	r2, [pc, #256]	; (8006e20 <_svfiprintf_r+0x1dc>)
 8006d20:	463d      	mov	r5, r7
 8006d22:	1a80      	subs	r0, r0, r2
 8006d24:	fa0b f000 	lsl.w	r0, fp, r0
 8006d28:	4318      	orrs	r0, r3
 8006d2a:	9004      	str	r0, [sp, #16]
 8006d2c:	e7d3      	b.n	8006cd6 <_svfiprintf_r+0x92>
 8006d2e:	9a03      	ldr	r2, [sp, #12]
 8006d30:	1d11      	adds	r1, r2, #4
 8006d32:	6812      	ldr	r2, [r2, #0]
 8006d34:	9103      	str	r1, [sp, #12]
 8006d36:	2a00      	cmp	r2, #0
 8006d38:	db01      	blt.n	8006d3e <_svfiprintf_r+0xfa>
 8006d3a:	9207      	str	r2, [sp, #28]
 8006d3c:	e004      	b.n	8006d48 <_svfiprintf_r+0x104>
 8006d3e:	4252      	negs	r2, r2
 8006d40:	f043 0302 	orr.w	r3, r3, #2
 8006d44:	9207      	str	r2, [sp, #28]
 8006d46:	9304      	str	r3, [sp, #16]
 8006d48:	783b      	ldrb	r3, [r7, #0]
 8006d4a:	2b2e      	cmp	r3, #46	; 0x2e
 8006d4c:	d10c      	bne.n	8006d68 <_svfiprintf_r+0x124>
 8006d4e:	787b      	ldrb	r3, [r7, #1]
 8006d50:	2b2a      	cmp	r3, #42	; 0x2a
 8006d52:	d133      	bne.n	8006dbc <_svfiprintf_r+0x178>
 8006d54:	9b03      	ldr	r3, [sp, #12]
 8006d56:	3702      	adds	r7, #2
 8006d58:	1d1a      	adds	r2, r3, #4
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	9203      	str	r2, [sp, #12]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	bfb8      	it	lt
 8006d62:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d66:	9305      	str	r3, [sp, #20]
 8006d68:	4d2e      	ldr	r5, [pc, #184]	; (8006e24 <_svfiprintf_r+0x1e0>)
 8006d6a:	2203      	movs	r2, #3
 8006d6c:	7839      	ldrb	r1, [r7, #0]
 8006d6e:	4628      	mov	r0, r5
 8006d70:	f7ff fa48 	bl	8006204 <memchr>
 8006d74:	b138      	cbz	r0, 8006d86 <_svfiprintf_r+0x142>
 8006d76:	2340      	movs	r3, #64	; 0x40
 8006d78:	1b40      	subs	r0, r0, r5
 8006d7a:	fa03 f000 	lsl.w	r0, r3, r0
 8006d7e:	9b04      	ldr	r3, [sp, #16]
 8006d80:	3701      	adds	r7, #1
 8006d82:	4303      	orrs	r3, r0
 8006d84:	9304      	str	r3, [sp, #16]
 8006d86:	7839      	ldrb	r1, [r7, #0]
 8006d88:	2206      	movs	r2, #6
 8006d8a:	4827      	ldr	r0, [pc, #156]	; (8006e28 <_svfiprintf_r+0x1e4>)
 8006d8c:	1c7e      	adds	r6, r7, #1
 8006d8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d92:	f7ff fa37 	bl	8006204 <memchr>
 8006d96:	2800      	cmp	r0, #0
 8006d98:	d038      	beq.n	8006e0c <_svfiprintf_r+0x1c8>
 8006d9a:	4b24      	ldr	r3, [pc, #144]	; (8006e2c <_svfiprintf_r+0x1e8>)
 8006d9c:	bb13      	cbnz	r3, 8006de4 <_svfiprintf_r+0x1a0>
 8006d9e:	9b03      	ldr	r3, [sp, #12]
 8006da0:	3307      	adds	r3, #7
 8006da2:	f023 0307 	bic.w	r3, r3, #7
 8006da6:	3308      	adds	r3, #8
 8006da8:	9303      	str	r3, [sp, #12]
 8006daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dac:	444b      	add	r3, r9
 8006dae:	9309      	str	r3, [sp, #36]	; 0x24
 8006db0:	e76d      	b.n	8006c8e <_svfiprintf_r+0x4a>
 8006db2:	fb05 3202 	mla	r2, r5, r2, r3
 8006db6:	2001      	movs	r0, #1
 8006db8:	460f      	mov	r7, r1
 8006dba:	e7a6      	b.n	8006d0a <_svfiprintf_r+0xc6>
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	250a      	movs	r5, #10
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	3701      	adds	r7, #1
 8006dc4:	9305      	str	r3, [sp, #20]
 8006dc6:	4638      	mov	r0, r7
 8006dc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dcc:	3a30      	subs	r2, #48	; 0x30
 8006dce:	2a09      	cmp	r2, #9
 8006dd0:	d903      	bls.n	8006dda <_svfiprintf_r+0x196>
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d0c8      	beq.n	8006d68 <_svfiprintf_r+0x124>
 8006dd6:	9105      	str	r1, [sp, #20]
 8006dd8:	e7c6      	b.n	8006d68 <_svfiprintf_r+0x124>
 8006dda:	fb05 2101 	mla	r1, r5, r1, r2
 8006dde:	2301      	movs	r3, #1
 8006de0:	4607      	mov	r7, r0
 8006de2:	e7f0      	b.n	8006dc6 <_svfiprintf_r+0x182>
 8006de4:	ab03      	add	r3, sp, #12
 8006de6:	9300      	str	r3, [sp, #0]
 8006de8:	4622      	mov	r2, r4
 8006dea:	4b11      	ldr	r3, [pc, #68]	; (8006e30 <_svfiprintf_r+0x1ec>)
 8006dec:	a904      	add	r1, sp, #16
 8006dee:	4640      	mov	r0, r8
 8006df0:	f7fc fbee 	bl	80035d0 <_printf_float>
 8006df4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006df8:	4681      	mov	r9, r0
 8006dfa:	d1d6      	bne.n	8006daa <_svfiprintf_r+0x166>
 8006dfc:	89a3      	ldrh	r3, [r4, #12]
 8006dfe:	065b      	lsls	r3, r3, #25
 8006e00:	f53f af35 	bmi.w	8006c6e <_svfiprintf_r+0x2a>
 8006e04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e06:	b01d      	add	sp, #116	; 0x74
 8006e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e0c:	ab03      	add	r3, sp, #12
 8006e0e:	9300      	str	r3, [sp, #0]
 8006e10:	4622      	mov	r2, r4
 8006e12:	4b07      	ldr	r3, [pc, #28]	; (8006e30 <_svfiprintf_r+0x1ec>)
 8006e14:	a904      	add	r1, sp, #16
 8006e16:	4640      	mov	r0, r8
 8006e18:	f7fc fe86 	bl	8003b28 <_printf_i>
 8006e1c:	e7ea      	b.n	8006df4 <_svfiprintf_r+0x1b0>
 8006e1e:	bf00      	nop
 8006e20:	08007124 	.word	0x08007124
 8006e24:	0800712a 	.word	0x0800712a
 8006e28:	0800712e 	.word	0x0800712e
 8006e2c:	080035d1 	.word	0x080035d1
 8006e30:	08006b91 	.word	0x08006b91

08006e34 <_sbrk_r>:
 8006e34:	b538      	push	{r3, r4, r5, lr}
 8006e36:	2300      	movs	r3, #0
 8006e38:	4c05      	ldr	r4, [pc, #20]	; (8006e50 <_sbrk_r+0x1c>)
 8006e3a:	4605      	mov	r5, r0
 8006e3c:	4608      	mov	r0, r1
 8006e3e:	6023      	str	r3, [r4, #0]
 8006e40:	f7fa ff24 	bl	8001c8c <_sbrk>
 8006e44:	1c43      	adds	r3, r0, #1
 8006e46:	d102      	bne.n	8006e4e <_sbrk_r+0x1a>
 8006e48:	6823      	ldr	r3, [r4, #0]
 8006e4a:	b103      	cbz	r3, 8006e4e <_sbrk_r+0x1a>
 8006e4c:	602b      	str	r3, [r5, #0]
 8006e4e:	bd38      	pop	{r3, r4, r5, pc}
 8006e50:	20000284 	.word	0x20000284

08006e54 <strncmp>:
 8006e54:	b510      	push	{r4, lr}
 8006e56:	b16a      	cbz	r2, 8006e74 <strncmp+0x20>
 8006e58:	3901      	subs	r1, #1
 8006e5a:	1884      	adds	r4, r0, r2
 8006e5c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006e60:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d103      	bne.n	8006e70 <strncmp+0x1c>
 8006e68:	42a0      	cmp	r0, r4
 8006e6a:	d001      	beq.n	8006e70 <strncmp+0x1c>
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1f5      	bne.n	8006e5c <strncmp+0x8>
 8006e70:	1a98      	subs	r0, r3, r2
 8006e72:	bd10      	pop	{r4, pc}
 8006e74:	4610      	mov	r0, r2
 8006e76:	e7fc      	b.n	8006e72 <strncmp+0x1e>

08006e78 <__ascii_wctomb>:
 8006e78:	b149      	cbz	r1, 8006e8e <__ascii_wctomb+0x16>
 8006e7a:	2aff      	cmp	r2, #255	; 0xff
 8006e7c:	bf8b      	itete	hi
 8006e7e:	238a      	movhi	r3, #138	; 0x8a
 8006e80:	700a      	strbls	r2, [r1, #0]
 8006e82:	6003      	strhi	r3, [r0, #0]
 8006e84:	2001      	movls	r0, #1
 8006e86:	bf88      	it	hi
 8006e88:	f04f 30ff 	movhi.w	r0, #4294967295
 8006e8c:	4770      	bx	lr
 8006e8e:	4608      	mov	r0, r1
 8006e90:	4770      	bx	lr

08006e92 <memmove>:
 8006e92:	4288      	cmp	r0, r1
 8006e94:	b510      	push	{r4, lr}
 8006e96:	eb01 0302 	add.w	r3, r1, r2
 8006e9a:	d807      	bhi.n	8006eac <memmove+0x1a>
 8006e9c:	1e42      	subs	r2, r0, #1
 8006e9e:	4299      	cmp	r1, r3
 8006ea0:	d00a      	beq.n	8006eb8 <memmove+0x26>
 8006ea2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ea6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006eaa:	e7f8      	b.n	8006e9e <memmove+0xc>
 8006eac:	4283      	cmp	r3, r0
 8006eae:	d9f5      	bls.n	8006e9c <memmove+0xa>
 8006eb0:	1881      	adds	r1, r0, r2
 8006eb2:	1ad2      	subs	r2, r2, r3
 8006eb4:	42d3      	cmn	r3, r2
 8006eb6:	d100      	bne.n	8006eba <memmove+0x28>
 8006eb8:	bd10      	pop	{r4, pc}
 8006eba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ebe:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006ec2:	e7f7      	b.n	8006eb4 <memmove+0x22>

08006ec4 <__malloc_lock>:
 8006ec4:	4770      	bx	lr

08006ec6 <__malloc_unlock>:
 8006ec6:	4770      	bx	lr

08006ec8 <_realloc_r>:
 8006ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eca:	4607      	mov	r7, r0
 8006ecc:	4614      	mov	r4, r2
 8006ece:	460e      	mov	r6, r1
 8006ed0:	b921      	cbnz	r1, 8006edc <_realloc_r+0x14>
 8006ed2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006ed6:	4611      	mov	r1, r2
 8006ed8:	f7ff be00 	b.w	8006adc <_malloc_r>
 8006edc:	b922      	cbnz	r2, 8006ee8 <_realloc_r+0x20>
 8006ede:	f7ff fdb1 	bl	8006a44 <_free_r>
 8006ee2:	4625      	mov	r5, r4
 8006ee4:	4628      	mov	r0, r5
 8006ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ee8:	f000 f814 	bl	8006f14 <_malloc_usable_size_r>
 8006eec:	42a0      	cmp	r0, r4
 8006eee:	d20f      	bcs.n	8006f10 <_realloc_r+0x48>
 8006ef0:	4621      	mov	r1, r4
 8006ef2:	4638      	mov	r0, r7
 8006ef4:	f7ff fdf2 	bl	8006adc <_malloc_r>
 8006ef8:	4605      	mov	r5, r0
 8006efa:	2800      	cmp	r0, #0
 8006efc:	d0f2      	beq.n	8006ee4 <_realloc_r+0x1c>
 8006efe:	4631      	mov	r1, r6
 8006f00:	4622      	mov	r2, r4
 8006f02:	f7ff f98d 	bl	8006220 <memcpy>
 8006f06:	4631      	mov	r1, r6
 8006f08:	4638      	mov	r0, r7
 8006f0a:	f7ff fd9b 	bl	8006a44 <_free_r>
 8006f0e:	e7e9      	b.n	8006ee4 <_realloc_r+0x1c>
 8006f10:	4635      	mov	r5, r6
 8006f12:	e7e7      	b.n	8006ee4 <_realloc_r+0x1c>

08006f14 <_malloc_usable_size_r>:
 8006f14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f18:	1f18      	subs	r0, r3, #4
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	bfbc      	itt	lt
 8006f1e:	580b      	ldrlt	r3, [r1, r0]
 8006f20:	18c0      	addlt	r0, r0, r3
 8006f22:	4770      	bx	lr

08006f24 <_init>:
 8006f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f26:	bf00      	nop
 8006f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f2a:	bc08      	pop	{r3}
 8006f2c:	469e      	mov	lr, r3
 8006f2e:	4770      	bx	lr

08006f30 <_fini>:
 8006f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f32:	bf00      	nop
 8006f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f36:	bc08      	pop	{r3}
 8006f38:	469e      	mov	lr, r3
 8006f3a:	4770      	bx	lr
