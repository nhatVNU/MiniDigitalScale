
MiniDigitalScale.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007074  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  08007188  08007188  00017188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074a0  080074a0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080074a0  080074a0  000174a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074a8  080074a8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074a8  080074a8  000174a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074ac  080074ac  000174ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080074b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  200001dc  0800768c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  0800768c  00020288  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007fe6  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001629  00000000  00000000  000281eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000790  00000000  00000000  00029818  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006e0  00000000  00000000  00029fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001702c  00000000  00000000  0002a688  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006fd8  00000000  00000000  000416b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00082b99  00000000  00000000  0004868c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cb225  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cc0  00000000  00000000  000cb2a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800716c 	.word	0x0800716c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	0800716c 	.word	0x0800716c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_ldivmod>:
 8001110:	b97b      	cbnz	r3, 8001132 <__aeabi_ldivmod+0x22>
 8001112:	b972      	cbnz	r2, 8001132 <__aeabi_ldivmod+0x22>
 8001114:	2900      	cmp	r1, #0
 8001116:	bfbe      	ittt	lt
 8001118:	2000      	movlt	r0, #0
 800111a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800111e:	e006      	blt.n	800112e <__aeabi_ldivmod+0x1e>
 8001120:	bf08      	it	eq
 8001122:	2800      	cmpeq	r0, #0
 8001124:	bf1c      	itt	ne
 8001126:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800112a:	f04f 30ff 	movne.w	r0, #4294967295
 800112e:	f000 b9a7 	b.w	8001480 <__aeabi_idiv0>
 8001132:	f1ad 0c08 	sub.w	ip, sp, #8
 8001136:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800113a:	2900      	cmp	r1, #0
 800113c:	db09      	blt.n	8001152 <__aeabi_ldivmod+0x42>
 800113e:	2b00      	cmp	r3, #0
 8001140:	db1a      	blt.n	8001178 <__aeabi_ldivmod+0x68>
 8001142:	f000 f835 	bl	80011b0 <__udivmoddi4>
 8001146:	f8dd e004 	ldr.w	lr, [sp, #4]
 800114a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800114e:	b004      	add	sp, #16
 8001150:	4770      	bx	lr
 8001152:	4240      	negs	r0, r0
 8001154:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001158:	2b00      	cmp	r3, #0
 800115a:	db1b      	blt.n	8001194 <__aeabi_ldivmod+0x84>
 800115c:	f000 f828 	bl	80011b0 <__udivmoddi4>
 8001160:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001164:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001168:	b004      	add	sp, #16
 800116a:	4240      	negs	r0, r0
 800116c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001170:	4252      	negs	r2, r2
 8001172:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001176:	4770      	bx	lr
 8001178:	4252      	negs	r2, r2
 800117a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800117e:	f000 f817 	bl	80011b0 <__udivmoddi4>
 8001182:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001186:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800118a:	b004      	add	sp, #16
 800118c:	4240      	negs	r0, r0
 800118e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001192:	4770      	bx	lr
 8001194:	4252      	negs	r2, r2
 8001196:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800119a:	f000 f809 	bl	80011b0 <__udivmoddi4>
 800119e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011a6:	b004      	add	sp, #16
 80011a8:	4252      	negs	r2, r2
 80011aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80011ae:	4770      	bx	lr

080011b0 <__udivmoddi4>:
 80011b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011b4:	468c      	mov	ip, r1
 80011b6:	4604      	mov	r4, r0
 80011b8:	9e08      	ldr	r6, [sp, #32]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d14b      	bne.n	8001256 <__udivmoddi4+0xa6>
 80011be:	428a      	cmp	r2, r1
 80011c0:	4615      	mov	r5, r2
 80011c2:	d967      	bls.n	8001294 <__udivmoddi4+0xe4>
 80011c4:	fab2 f282 	clz	r2, r2
 80011c8:	b14a      	cbz	r2, 80011de <__udivmoddi4+0x2e>
 80011ca:	f1c2 0720 	rsb	r7, r2, #32
 80011ce:	fa01 f302 	lsl.w	r3, r1, r2
 80011d2:	fa20 f707 	lsr.w	r7, r0, r7
 80011d6:	4095      	lsls	r5, r2
 80011d8:	ea47 0c03 	orr.w	ip, r7, r3
 80011dc:	4094      	lsls	r4, r2
 80011de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80011e2:	fbbc f7fe 	udiv	r7, ip, lr
 80011e6:	fa1f f885 	uxth.w	r8, r5
 80011ea:	fb0e c317 	mls	r3, lr, r7, ip
 80011ee:	fb07 f908 	mul.w	r9, r7, r8
 80011f2:	0c21      	lsrs	r1, r4, #16
 80011f4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80011f8:	4599      	cmp	r9, r3
 80011fa:	d909      	bls.n	8001210 <__udivmoddi4+0x60>
 80011fc:	18eb      	adds	r3, r5, r3
 80011fe:	f107 31ff 	add.w	r1, r7, #4294967295
 8001202:	f080 811c 	bcs.w	800143e <__udivmoddi4+0x28e>
 8001206:	4599      	cmp	r9, r3
 8001208:	f240 8119 	bls.w	800143e <__udivmoddi4+0x28e>
 800120c:	3f02      	subs	r7, #2
 800120e:	442b      	add	r3, r5
 8001210:	eba3 0309 	sub.w	r3, r3, r9
 8001214:	fbb3 f0fe 	udiv	r0, r3, lr
 8001218:	fb0e 3310 	mls	r3, lr, r0, r3
 800121c:	fb00 f108 	mul.w	r1, r0, r8
 8001220:	b2a4      	uxth	r4, r4
 8001222:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001226:	42a1      	cmp	r1, r4
 8001228:	d909      	bls.n	800123e <__udivmoddi4+0x8e>
 800122a:	192c      	adds	r4, r5, r4
 800122c:	f100 33ff 	add.w	r3, r0, #4294967295
 8001230:	f080 8107 	bcs.w	8001442 <__udivmoddi4+0x292>
 8001234:	42a1      	cmp	r1, r4
 8001236:	f240 8104 	bls.w	8001442 <__udivmoddi4+0x292>
 800123a:	3802      	subs	r0, #2
 800123c:	442c      	add	r4, r5
 800123e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8001242:	2700      	movs	r7, #0
 8001244:	1a64      	subs	r4, r4, r1
 8001246:	b11e      	cbz	r6, 8001250 <__udivmoddi4+0xa0>
 8001248:	2300      	movs	r3, #0
 800124a:	40d4      	lsrs	r4, r2
 800124c:	e9c6 4300 	strd	r4, r3, [r6]
 8001250:	4639      	mov	r1, r7
 8001252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001256:	428b      	cmp	r3, r1
 8001258:	d909      	bls.n	800126e <__udivmoddi4+0xbe>
 800125a:	2e00      	cmp	r6, #0
 800125c:	f000 80ec 	beq.w	8001438 <__udivmoddi4+0x288>
 8001260:	2700      	movs	r7, #0
 8001262:	e9c6 0100 	strd	r0, r1, [r6]
 8001266:	4638      	mov	r0, r7
 8001268:	4639      	mov	r1, r7
 800126a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800126e:	fab3 f783 	clz	r7, r3
 8001272:	2f00      	cmp	r7, #0
 8001274:	d148      	bne.n	8001308 <__udivmoddi4+0x158>
 8001276:	428b      	cmp	r3, r1
 8001278:	d302      	bcc.n	8001280 <__udivmoddi4+0xd0>
 800127a:	4282      	cmp	r2, r0
 800127c:	f200 80fb 	bhi.w	8001476 <__udivmoddi4+0x2c6>
 8001280:	1a84      	subs	r4, r0, r2
 8001282:	eb61 0303 	sbc.w	r3, r1, r3
 8001286:	2001      	movs	r0, #1
 8001288:	469c      	mov	ip, r3
 800128a:	2e00      	cmp	r6, #0
 800128c:	d0e0      	beq.n	8001250 <__udivmoddi4+0xa0>
 800128e:	e9c6 4c00 	strd	r4, ip, [r6]
 8001292:	e7dd      	b.n	8001250 <__udivmoddi4+0xa0>
 8001294:	b902      	cbnz	r2, 8001298 <__udivmoddi4+0xe8>
 8001296:	deff      	udf	#255	; 0xff
 8001298:	fab2 f282 	clz	r2, r2
 800129c:	2a00      	cmp	r2, #0
 800129e:	f040 808f 	bne.w	80013c0 <__udivmoddi4+0x210>
 80012a2:	2701      	movs	r7, #1
 80012a4:	1b49      	subs	r1, r1, r5
 80012a6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80012aa:	fa1f f985 	uxth.w	r9, r5
 80012ae:	fbb1 fef8 	udiv	lr, r1, r8
 80012b2:	fb08 111e 	mls	r1, r8, lr, r1
 80012b6:	fb09 f00e 	mul.w	r0, r9, lr
 80012ba:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80012be:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80012c2:	4298      	cmp	r0, r3
 80012c4:	d907      	bls.n	80012d6 <__udivmoddi4+0x126>
 80012c6:	18eb      	adds	r3, r5, r3
 80012c8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80012cc:	d202      	bcs.n	80012d4 <__udivmoddi4+0x124>
 80012ce:	4298      	cmp	r0, r3
 80012d0:	f200 80cd 	bhi.w	800146e <__udivmoddi4+0x2be>
 80012d4:	468e      	mov	lr, r1
 80012d6:	1a1b      	subs	r3, r3, r0
 80012d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80012dc:	fb08 3310 	mls	r3, r8, r0, r3
 80012e0:	fb09 f900 	mul.w	r9, r9, r0
 80012e4:	b2a4      	uxth	r4, r4
 80012e6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80012ea:	45a1      	cmp	r9, r4
 80012ec:	d907      	bls.n	80012fe <__udivmoddi4+0x14e>
 80012ee:	192c      	adds	r4, r5, r4
 80012f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80012f4:	d202      	bcs.n	80012fc <__udivmoddi4+0x14c>
 80012f6:	45a1      	cmp	r9, r4
 80012f8:	f200 80b6 	bhi.w	8001468 <__udivmoddi4+0x2b8>
 80012fc:	4618      	mov	r0, r3
 80012fe:	eba4 0409 	sub.w	r4, r4, r9
 8001302:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8001306:	e79e      	b.n	8001246 <__udivmoddi4+0x96>
 8001308:	f1c7 0520 	rsb	r5, r7, #32
 800130c:	40bb      	lsls	r3, r7
 800130e:	fa22 fc05 	lsr.w	ip, r2, r5
 8001312:	ea4c 0c03 	orr.w	ip, ip, r3
 8001316:	fa21 f405 	lsr.w	r4, r1, r5
 800131a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800131e:	fbb4 f9fe 	udiv	r9, r4, lr
 8001322:	fa1f f88c 	uxth.w	r8, ip
 8001326:	fb0e 4419 	mls	r4, lr, r9, r4
 800132a:	fa20 f305 	lsr.w	r3, r0, r5
 800132e:	40b9      	lsls	r1, r7
 8001330:	fb09 fa08 	mul.w	sl, r9, r8
 8001334:	4319      	orrs	r1, r3
 8001336:	0c0b      	lsrs	r3, r1, #16
 8001338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800133c:	45a2      	cmp	sl, r4
 800133e:	fa02 f207 	lsl.w	r2, r2, r7
 8001342:	fa00 f307 	lsl.w	r3, r0, r7
 8001346:	d90b      	bls.n	8001360 <__udivmoddi4+0x1b0>
 8001348:	eb1c 0404 	adds.w	r4, ip, r4
 800134c:	f109 30ff 	add.w	r0, r9, #4294967295
 8001350:	f080 8088 	bcs.w	8001464 <__udivmoddi4+0x2b4>
 8001354:	45a2      	cmp	sl, r4
 8001356:	f240 8085 	bls.w	8001464 <__udivmoddi4+0x2b4>
 800135a:	f1a9 0902 	sub.w	r9, r9, #2
 800135e:	4464      	add	r4, ip
 8001360:	eba4 040a 	sub.w	r4, r4, sl
 8001364:	fbb4 f0fe 	udiv	r0, r4, lr
 8001368:	fb0e 4410 	mls	r4, lr, r0, r4
 800136c:	fb00 fa08 	mul.w	sl, r0, r8
 8001370:	b289      	uxth	r1, r1
 8001372:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8001376:	45a2      	cmp	sl, r4
 8001378:	d908      	bls.n	800138c <__udivmoddi4+0x1dc>
 800137a:	eb1c 0404 	adds.w	r4, ip, r4
 800137e:	f100 31ff 	add.w	r1, r0, #4294967295
 8001382:	d26b      	bcs.n	800145c <__udivmoddi4+0x2ac>
 8001384:	45a2      	cmp	sl, r4
 8001386:	d969      	bls.n	800145c <__udivmoddi4+0x2ac>
 8001388:	3802      	subs	r0, #2
 800138a:	4464      	add	r4, ip
 800138c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001390:	fba0 8902 	umull	r8, r9, r0, r2
 8001394:	eba4 040a 	sub.w	r4, r4, sl
 8001398:	454c      	cmp	r4, r9
 800139a:	4641      	mov	r1, r8
 800139c:	46ce      	mov	lr, r9
 800139e:	d354      	bcc.n	800144a <__udivmoddi4+0x29a>
 80013a0:	d051      	beq.n	8001446 <__udivmoddi4+0x296>
 80013a2:	2e00      	cmp	r6, #0
 80013a4:	d069      	beq.n	800147a <__udivmoddi4+0x2ca>
 80013a6:	1a5a      	subs	r2, r3, r1
 80013a8:	eb64 040e 	sbc.w	r4, r4, lr
 80013ac:	fa04 f505 	lsl.w	r5, r4, r5
 80013b0:	fa22 f307 	lsr.w	r3, r2, r7
 80013b4:	40fc      	lsrs	r4, r7
 80013b6:	431d      	orrs	r5, r3
 80013b8:	e9c6 5400 	strd	r5, r4, [r6]
 80013bc:	2700      	movs	r7, #0
 80013be:	e747      	b.n	8001250 <__udivmoddi4+0xa0>
 80013c0:	4095      	lsls	r5, r2
 80013c2:	f1c2 0320 	rsb	r3, r2, #32
 80013c6:	fa21 f003 	lsr.w	r0, r1, r3
 80013ca:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80013ce:	fbb0 f7f8 	udiv	r7, r0, r8
 80013d2:	fa1f f985 	uxth.w	r9, r5
 80013d6:	fb08 0017 	mls	r0, r8, r7, r0
 80013da:	fa24 f303 	lsr.w	r3, r4, r3
 80013de:	4091      	lsls	r1, r2
 80013e0:	fb07 fc09 	mul.w	ip, r7, r9
 80013e4:	430b      	orrs	r3, r1
 80013e6:	0c19      	lsrs	r1, r3, #16
 80013e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80013ec:	458c      	cmp	ip, r1
 80013ee:	fa04 f402 	lsl.w	r4, r4, r2
 80013f2:	d907      	bls.n	8001404 <__udivmoddi4+0x254>
 80013f4:	1869      	adds	r1, r5, r1
 80013f6:	f107 30ff 	add.w	r0, r7, #4294967295
 80013fa:	d231      	bcs.n	8001460 <__udivmoddi4+0x2b0>
 80013fc:	458c      	cmp	ip, r1
 80013fe:	d92f      	bls.n	8001460 <__udivmoddi4+0x2b0>
 8001400:	3f02      	subs	r7, #2
 8001402:	4429      	add	r1, r5
 8001404:	eba1 010c 	sub.w	r1, r1, ip
 8001408:	fbb1 f0f8 	udiv	r0, r1, r8
 800140c:	fb08 1c10 	mls	ip, r8, r0, r1
 8001410:	fb00 fe09 	mul.w	lr, r0, r9
 8001414:	b299      	uxth	r1, r3
 8001416:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800141a:	458e      	cmp	lr, r1
 800141c:	d907      	bls.n	800142e <__udivmoddi4+0x27e>
 800141e:	1869      	adds	r1, r5, r1
 8001420:	f100 33ff 	add.w	r3, r0, #4294967295
 8001424:	d218      	bcs.n	8001458 <__udivmoddi4+0x2a8>
 8001426:	458e      	cmp	lr, r1
 8001428:	d916      	bls.n	8001458 <__udivmoddi4+0x2a8>
 800142a:	3802      	subs	r0, #2
 800142c:	4429      	add	r1, r5
 800142e:	eba1 010e 	sub.w	r1, r1, lr
 8001432:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8001436:	e73a      	b.n	80012ae <__udivmoddi4+0xfe>
 8001438:	4637      	mov	r7, r6
 800143a:	4630      	mov	r0, r6
 800143c:	e708      	b.n	8001250 <__udivmoddi4+0xa0>
 800143e:	460f      	mov	r7, r1
 8001440:	e6e6      	b.n	8001210 <__udivmoddi4+0x60>
 8001442:	4618      	mov	r0, r3
 8001444:	e6fb      	b.n	800123e <__udivmoddi4+0x8e>
 8001446:	4543      	cmp	r3, r8
 8001448:	d2ab      	bcs.n	80013a2 <__udivmoddi4+0x1f2>
 800144a:	ebb8 0102 	subs.w	r1, r8, r2
 800144e:	eb69 020c 	sbc.w	r2, r9, ip
 8001452:	3801      	subs	r0, #1
 8001454:	4696      	mov	lr, r2
 8001456:	e7a4      	b.n	80013a2 <__udivmoddi4+0x1f2>
 8001458:	4618      	mov	r0, r3
 800145a:	e7e8      	b.n	800142e <__udivmoddi4+0x27e>
 800145c:	4608      	mov	r0, r1
 800145e:	e795      	b.n	800138c <__udivmoddi4+0x1dc>
 8001460:	4607      	mov	r7, r0
 8001462:	e7cf      	b.n	8001404 <__udivmoddi4+0x254>
 8001464:	4681      	mov	r9, r0
 8001466:	e77b      	b.n	8001360 <__udivmoddi4+0x1b0>
 8001468:	3802      	subs	r0, #2
 800146a:	442c      	add	r4, r5
 800146c:	e747      	b.n	80012fe <__udivmoddi4+0x14e>
 800146e:	f1ae 0e02 	sub.w	lr, lr, #2
 8001472:	442b      	add	r3, r5
 8001474:	e72f      	b.n	80012d6 <__udivmoddi4+0x126>
 8001476:	4638      	mov	r0, r7
 8001478:	e707      	b.n	800128a <__udivmoddi4+0xda>
 800147a:	4637      	mov	r7, r6
 800147c:	e6e8      	b.n	8001250 <__udivmoddi4+0xa0>
 800147e:	bf00      	nop

08001480 <__aeabi_idiv0>:
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop

08001484 <hx711_delay_us>:
#else
#define hx711_delay(x)    HAL_Delay(x)
#endif

void hx711_delay_us(void)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
  uint32_t delay = _HX711_DELAY_US_LOOP;
 800148a:	2304      	movs	r3, #4
 800148c:	607b      	str	r3, [r7, #4]
  while (delay > 0)
 800148e:	e006      	b.n	800149e <hx711_delay_us+0x1a>
  {
    delay--;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3b01      	subs	r3, #1
 8001494:	607b      	str	r3, [r7, #4]
    __nop(); __nop(); __nop(); __nop();
 8001496:	bf00      	nop
 8001498:	bf00      	nop
 800149a:	bf00      	nop
 800149c:	bf00      	nop
  while (delay > 0)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1f5      	bne.n	8001490 <hx711_delay_us+0xc>
  }
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr

080014ae <hx711_lock>:

void hx711_lock(hx711_t *hx711)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  while (hx711->lock)
 80014b6:	e002      	b.n	80014be <hx711_lock+0x10>
    hx711_delay(1);
 80014b8:	2001      	movs	r0, #1
 80014ba:	f000 fd8d 	bl	8001fd8 <HAL_Delay>
  while (hx711->lock)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	7d1b      	ldrb	r3, [r3, #20]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1f8      	bne.n	80014b8 <hx711_lock+0xa>
  hx711->lock = 1;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2201      	movs	r2, #1
 80014ca:	751a      	strb	r2, [r3, #20]
}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <hx711_unlock>:

void hx711_unlock(hx711_t *hx711)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  hx711->lock = 0;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	751a      	strb	r2, [r3, #20]
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr

080014ec <hx711_init>:

void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b088      	sub	sp, #32
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	4613      	mov	r3, r2
 80014fa:	80fb      	strh	r3, [r7, #6]
  hx711_lock(hx711);
 80014fc:	68f8      	ldr	r0, [r7, #12]
 80014fe:	f7ff ffd6 	bl	80014ae <hx711_lock>
  hx711->clk_gpio = clk_gpio;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	68ba      	ldr	r2, [r7, #8]
 8001506:	601a      	str	r2, [r3, #0]
  hx711->clk_pin = clk_pin;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	88fa      	ldrh	r2, [r7, #6]
 800150c:	811a      	strh	r2, [r3, #8]
  hx711->dat_gpio = dat_gpio;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	605a      	str	r2, [r3, #4]
  hx711->dat_pin = dat_pin;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001518:	815a      	strh	r2, [r3, #10]

  GPIO_InitTypeDef  gpio = {0};
 800151a:	f107 0310 	add.w	r3, r7, #16
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8001528:	2301      	movs	r3, #1
 800152a:	617b      	str	r3, [r7, #20]
  gpio.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	61bb      	str	r3, [r7, #24]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8001530:	2303      	movs	r3, #3
 8001532:	61fb      	str	r3, [r7, #28]
  gpio.Pin = clk_pin;
 8001534:	88fb      	ldrh	r3, [r7, #6]
 8001536:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(clk_gpio, &gpio);
 8001538:	f107 0310 	add.w	r3, r7, #16
 800153c:	4619      	mov	r1, r3
 800153e:	68b8      	ldr	r0, [r7, #8]
 8001540:	f000 fe7a 	bl	8002238 <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
  gpio.Pull = GPIO_PULLUP;
 8001548:	2301      	movs	r3, #1
 800154a:	61bb      	str	r3, [r7, #24]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 800154c:	2303      	movs	r3, #3
 800154e:	61fb      	str	r3, [r7, #28]
  gpio.Pin = dat_pin;
 8001550:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001552:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(dat_gpio, &gpio);
 8001554:	f107 0310 	add.w	r3, r7, #16
 8001558:	4619      	mov	r1, r3
 800155a:	6838      	ldr	r0, [r7, #0]
 800155c:	f000 fe6c 	bl	8002238 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	6818      	ldr	r0, [r3, #0]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	891b      	ldrh	r3, [r3, #8]
 8001568:	2201      	movs	r2, #1
 800156a:	4619      	mov	r1, r3
 800156c:	f000 ffd5 	bl	800251a <HAL_GPIO_WritePin>
  hx711_delay(10);
 8001570:	200a      	movs	r0, #10
 8001572:	f000 fd31 	bl	8001fd8 <HAL_Delay>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6818      	ldr	r0, [r3, #0]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	891b      	ldrh	r3, [r3, #8]
 800157e:	2200      	movs	r2, #0
 8001580:	4619      	mov	r1, r3
 8001582:	f000 ffca 	bl	800251a <HAL_GPIO_WritePin>
  hx711_delay(10);
 8001586:	200a      	movs	r0, #10
 8001588:	f000 fd26 	bl	8001fd8 <HAL_Delay>
  hx711_value(hx711);
 800158c:	68f8      	ldr	r0, [r7, #12]
 800158e:	f000 f80a 	bl	80015a6 <hx711_value>
  hx711_value(hx711);
 8001592:	68f8      	ldr	r0, [r7, #12]
 8001594:	f000 f807 	bl	80015a6 <hx711_value>
  hx711_unlock(hx711);
 8001598:	68f8      	ldr	r0, [r7, #12]
 800159a:	f7ff ff9b 	bl	80014d4 <hx711_unlock>
}
 800159e:	bf00      	nop
 80015a0:	3720      	adds	r7, #32
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <hx711_value>:

int32_t hx711_value(hx711_t *hx711)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b086      	sub	sp, #24
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  uint32_t data = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
  uint32_t  startTime = HAL_GetTick();
 80015b2:	f000 fd07 	bl	8001fc4 <HAL_GetTick>
 80015b6:	60f8      	str	r0, [r7, #12]
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 80015b8:	e00b      	b.n	80015d2 <hx711_value+0x2c>
  {
    hx711_delay(1);
 80015ba:	2001      	movs	r0, #1
 80015bc:	f000 fd0c 	bl	8001fd8 <HAL_Delay>
    if(HAL_GetTick() - startTime > 150)
 80015c0:	f000 fd00 	bl	8001fc4 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b96      	cmp	r3, #150	; 0x96
 80015cc:	d901      	bls.n	80015d2 <hx711_value+0x2c>
      return 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	e055      	b.n	800167e <hx711_value+0xd8>
  while(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685a      	ldr	r2, [r3, #4]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	895b      	ldrh	r3, [r3, #10]
 80015da:	4619      	mov	r1, r3
 80015dc:	4610      	mov	r0, r2
 80015de:	f000 ff85 	bl	80024ec <HAL_GPIO_ReadPin>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d0e8      	beq.n	80015ba <hx711_value+0x14>
  }
  for(int8_t i=0; i < 24 ; i++)
 80015e8:	2300      	movs	r3, #0
 80015ea:	74fb      	strb	r3, [r7, #19]
 80015ec:	e02a      	b.n	8001644 <hx711_value+0x9e>
  {
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6818      	ldr	r0, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	891b      	ldrh	r3, [r3, #8]
 80015f6:	2201      	movs	r2, #1
 80015f8:	4619      	mov	r1, r3
 80015fa:	f000 ff8e 	bl	800251a <HAL_GPIO_WritePin>
    hx711_delay_us();
 80015fe:	f7ff ff41 	bl	8001484 <hx711_delay_us>
    HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6818      	ldr	r0, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	891b      	ldrh	r3, [r3, #8]
 800160a:	2200      	movs	r2, #0
 800160c:	4619      	mov	r1, r3
 800160e:	f000 ff84 	bl	800251a <HAL_GPIO_WritePin>
    hx711_delay_us();
 8001612:	f7ff ff37 	bl	8001484 <hx711_delay_us>
    data = data << 1;
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	617b      	str	r3, [r7, #20]
    if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_SET)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685a      	ldr	r2, [r3, #4]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	895b      	ldrh	r3, [r3, #10]
 8001624:	4619      	mov	r1, r3
 8001626:	4610      	mov	r0, r2
 8001628:	f000 ff60 	bl	80024ec <HAL_GPIO_ReadPin>
 800162c:	4603      	mov	r3, r0
 800162e:	2b01      	cmp	r3, #1
 8001630:	d102      	bne.n	8001638 <hx711_value+0x92>
      data ++;
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	3301      	adds	r3, #1
 8001636:	617b      	str	r3, [r7, #20]
  for(int8_t i=0; i < 24 ; i++)
 8001638:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800163c:	b2db      	uxtb	r3, r3
 800163e:	3301      	adds	r3, #1
 8001640:	b2db      	uxtb	r3, r3
 8001642:	74fb      	strb	r3, [r7, #19]
 8001644:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001648:	2b17      	cmp	r3, #23
 800164a:	ddd0      	ble.n	80015ee <hx711_value+0x48>
  }
  data = data ^ 0x800000;
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8001652:	617b      	str	r3, [r7, #20]
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_SET);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6818      	ldr	r0, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	891b      	ldrh	r3, [r3, #8]
 800165c:	2201      	movs	r2, #1
 800165e:	4619      	mov	r1, r3
 8001660:	f000 ff5b 	bl	800251a <HAL_GPIO_WritePin>
  hx711_delay_us();
 8001664:	f7ff ff0e 	bl	8001484 <hx711_delay_us>
  HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, GPIO_PIN_RESET);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6818      	ldr	r0, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	891b      	ldrh	r3, [r3, #8]
 8001670:	2200      	movs	r2, #0
 8001672:	4619      	mov	r1, r3
 8001674:	f000 ff51 	bl	800251a <HAL_GPIO_WritePin>
  hx711_delay_us();
 8001678:	f7ff ff04 	bl	8001484 <hx711_delay_us>
  return data;
 800167c:	697b      	ldr	r3, [r7, #20]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <hx711_tare>:
  int32_t answer = (int32_t)(ave / sample);
  return answer;
}

void hx711_tare(hx711_t *hx711, uint16_t sample)
{
 8001686:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	807b      	strh	r3, [r7, #2]
  int64_t  ave = 0;
 8001694:	f04f 0300 	mov.w	r3, #0
 8001698:	f04f 0400 	mov.w	r4, #0
 800169c:	e9c7 3404 	strd	r3, r4, [r7, #16]
  for(uint16_t i=0 ; i < sample ; i++)
 80016a0:	2300      	movs	r3, #0
 80016a2:	81fb      	strh	r3, [r7, #14]
 80016a4:	e011      	b.n	80016ca <hx711_tare+0x44>
  {
    ave += hx711_value(hx711);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff ff7d 	bl	80015a6 <hx711_value>
 80016ac:	4603      	mov	r3, r0
 80016ae:	469b      	mov	fp, r3
 80016b0:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 80016b4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80016b8:	eb1b 0301 	adds.w	r3, fp, r1
 80016bc:	eb4c 0402 	adc.w	r4, ip, r2
 80016c0:	e9c7 3404 	strd	r3, r4, [r7, #16]
  for(uint16_t i=0 ; i < sample ; i++)
 80016c4:	89fb      	ldrh	r3, [r7, #14]
 80016c6:	3301      	adds	r3, #1
 80016c8:	81fb      	strh	r3, [r7, #14]
 80016ca:	89fa      	ldrh	r2, [r7, #14]
 80016cc:	887b      	ldrh	r3, [r7, #2]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d3e9      	bcc.n	80016a6 <hx711_tare+0x20>
  }
  hx711->offset = (int32_t)(ave / sample);
 80016d2:	887b      	ldrh	r3, [r7, #2]
 80016d4:	f04f 0400 	mov.w	r4, #0
 80016d8:	461a      	mov	r2, r3
 80016da:	4623      	mov	r3, r4
 80016dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016e0:	f7ff fd16 	bl	8001110 <__aeabi_ldivmod>
 80016e4:	4603      	mov	r3, r0
 80016e6:	460c      	mov	r4, r1
 80016e8:	461a      	mov	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	60da      	str	r2, [r3, #12]
}
 80016ee:	bf00      	nop
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

080016f8 <hx711_calibration>:

void hx711_calibration(hx711_t *hx711, int32_t noload_raw, int32_t load_raw, float scale)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
 8001704:	603b      	str	r3, [r7, #0]
  hx711->offset = noload_raw;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	68ba      	ldr	r2, [r7, #8]
 800170a:	60da      	str	r2, [r3, #12]
  hx711->coef = (load_raw - noload_raw) / scale;
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fae2 	bl	8000cdc <__aeabi_i2f>
 8001718:	4603      	mov	r3, r0
 800171a:	6839      	ldr	r1, [r7, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fbe5 	bl	8000eec <__aeabi_fdiv>
 8001722:	4603      	mov	r3, r0
 8001724:	461a      	mov	r2, r3
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	611a      	str	r2, [r3, #16]
}
 800172a:	bf00      	nop
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <hx711_weight>:

float hx711_weight(hx711_t *hx711, uint16_t sample)
{
 8001732:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	807b      	strh	r3, [r7, #2]
  int64_t  ave = 0;
 8001740:	f04f 0300 	mov.w	r3, #0
 8001744:	f04f 0400 	mov.w	r4, #0
 8001748:	e9c7 3404 	strd	r3, r4, [r7, #16]
  for(uint16_t i=0 ; i<sample ; i++)
 800174c:	2300      	movs	r3, #0
 800174e:	81fb      	strh	r3, [r7, #14]
 8001750:	e011      	b.n	8001776 <hx711_weight+0x44>
  {
    ave += hx711_value(hx711);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff ff27 	bl	80015a6 <hx711_value>
 8001758:	4603      	mov	r3, r0
 800175a:	469b      	mov	fp, r3
 800175c:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8001760:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001764:	eb1b 0301 	adds.w	r3, fp, r1
 8001768:	eb4c 0402 	adc.w	r4, ip, r2
 800176c:	e9c7 3404 	strd	r3, r4, [r7, #16]
  for(uint16_t i=0 ; i<sample ; i++)
 8001770:	89fb      	ldrh	r3, [r7, #14]
 8001772:	3301      	adds	r3, #1
 8001774:	81fb      	strh	r3, [r7, #14]
 8001776:	89fa      	ldrh	r2, [r7, #14]
 8001778:	887b      	ldrh	r3, [r7, #2]
 800177a:	429a      	cmp	r2, r3
 800177c:	d3e9      	bcc.n	8001752 <hx711_weight+0x20>
  }
  int32_t data = (int32_t)(ave / sample);
 800177e:	887b      	ldrh	r3, [r7, #2]
 8001780:	f04f 0400 	mov.w	r4, #0
 8001784:	461a      	mov	r2, r3
 8001786:	4623      	mov	r3, r4
 8001788:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800178c:	f7ff fcc0 	bl	8001110 <__aeabi_ldivmod>
 8001790:	4603      	mov	r3, r0
 8001792:	460c      	mov	r4, r1
 8001794:	60bb      	str	r3, [r7, #8]
  return (data - hx711->offset) / hx711->coef;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff fa9c 	bl	8000cdc <__aeabi_i2f>
 80017a4:	4602      	mov	r2, r0
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	4619      	mov	r1, r3
 80017ac:	4610      	mov	r0, r2
 80017ae:	f7ff fb9d 	bl	8000eec <__aeabi_fdiv>
 80017b2:	4603      	mov	r3, r0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
	...

080017c0 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af02      	add	r7, sp, #8
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	f023 030f 	bic.w	r3, r3, #15
 80017d0:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	011b      	lsls	r3, r3, #4
 80017d6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
 80017da:	f043 030c 	orr.w	r3, r3, #12
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
 80017e4:	f043 0308 	orr.w	r3, r3, #8
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80017ec:	7bbb      	ldrb	r3, [r7, #14]
 80017ee:	f043 030c 	orr.w	r3, r3, #12
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80017f6:	7bbb      	ldrb	r3, [r7, #14]
 80017f8:	f043 0308 	orr.w	r3, r3, #8
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001800:	f107 0208 	add.w	r2, r7, #8
 8001804:	2364      	movs	r3, #100	; 0x64
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	2304      	movs	r3, #4
 800180a:	214e      	movs	r1, #78	; 0x4e
 800180c:	4803      	ldr	r0, [pc, #12]	; (800181c <lcd_send_cmd+0x5c>)
 800180e:	f000 ffed 	bl	80027ec <HAL_I2C_Master_Transmit>
}
 8001812:	bf00      	nop
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	2000020c 	.word	0x2000020c

08001820 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af02      	add	r7, sp, #8
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	f023 030f 	bic.w	r3, r3, #15
 8001830:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	011b      	lsls	r3, r3, #4
 8001836:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001838:	7bfb      	ldrb	r3, [r7, #15]
 800183a:	f043 030d 	orr.w	r3, r3, #13
 800183e:	b2db      	uxtb	r3, r3
 8001840:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001842:	7bfb      	ldrb	r3, [r7, #15]
 8001844:	f043 0309 	orr.w	r3, r3, #9
 8001848:	b2db      	uxtb	r3, r3
 800184a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800184c:	7bbb      	ldrb	r3, [r7, #14]
 800184e:	f043 030d 	orr.w	r3, r3, #13
 8001852:	b2db      	uxtb	r3, r3
 8001854:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001856:	7bbb      	ldrb	r3, [r7, #14]
 8001858:	f043 0309 	orr.w	r3, r3, #9
 800185c:	b2db      	uxtb	r3, r3
 800185e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001860:	f107 0208 	add.w	r2, r7, #8
 8001864:	2364      	movs	r3, #100	; 0x64
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	2304      	movs	r3, #4
 800186a:	214e      	movs	r1, #78	; 0x4e
 800186c:	4803      	ldr	r0, [pc, #12]	; (800187c <lcd_send_data+0x5c>)
 800186e:	f000 ffbd 	bl	80027ec <HAL_I2C_Master_Transmit>
}
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	2000020c 	.word	0x2000020c

08001880 <lcd_clear>:

void lcd_clear (void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8001886:	2080      	movs	r0, #128	; 0x80
 8001888:	f7ff ff9a 	bl	80017c0 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 800188c:	2300      	movs	r3, #0
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	e005      	b.n	800189e <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8001892:	2020      	movs	r0, #32
 8001894:	f7ff ffc4 	bl	8001820 <lcd_send_data>
	for (int i=0; i<70; i++)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3301      	adds	r3, #1
 800189c:	607b      	str	r3, [r7, #4]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b45      	cmp	r3, #69	; 0x45
 80018a2:	ddf6      	ble.n	8001892 <lcd_clear+0x12>
	}
}
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
    switch (row)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d002      	beq.n	80018c2 <lcd_put_cur+0x16>
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d005      	beq.n	80018cc <lcd_put_cur+0x20>
 80018c0:	e009      	b.n	80018d6 <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018c8:	603b      	str	r3, [r7, #0]
            break;
 80018ca:	e004      	b.n	80018d6 <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80018d2:	603b      	str	r3, [r7, #0]
            break;
 80018d4:	bf00      	nop
    }

    lcd_send_cmd (col);
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff ff70 	bl	80017c0 <lcd_send_cmd>
}
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <lcd_init>:


void lcd_init (void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80018ec:	2032      	movs	r0, #50	; 0x32
 80018ee:	f000 fb73 	bl	8001fd8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80018f2:	2030      	movs	r0, #48	; 0x30
 80018f4:	f7ff ff64 	bl	80017c0 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80018f8:	2005      	movs	r0, #5
 80018fa:	f000 fb6d 	bl	8001fd8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80018fe:	2030      	movs	r0, #48	; 0x30
 8001900:	f7ff ff5e 	bl	80017c0 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001904:	2001      	movs	r0, #1
 8001906:	f000 fb67 	bl	8001fd8 <HAL_Delay>
	lcd_send_cmd (0x30);
 800190a:	2030      	movs	r0, #48	; 0x30
 800190c:	f7ff ff58 	bl	80017c0 <lcd_send_cmd>
	HAL_Delay(10);
 8001910:	200a      	movs	r0, #10
 8001912:	f000 fb61 	bl	8001fd8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001916:	2020      	movs	r0, #32
 8001918:	f7ff ff52 	bl	80017c0 <lcd_send_cmd>
	HAL_Delay(10);
 800191c:	200a      	movs	r0, #10
 800191e:	f000 fb5b 	bl	8001fd8 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001922:	2028      	movs	r0, #40	; 0x28
 8001924:	f7ff ff4c 	bl	80017c0 <lcd_send_cmd>
	HAL_Delay(1);
 8001928:	2001      	movs	r0, #1
 800192a:	f000 fb55 	bl	8001fd8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800192e:	2008      	movs	r0, #8
 8001930:	f7ff ff46 	bl	80017c0 <lcd_send_cmd>
	HAL_Delay(1);
 8001934:	2001      	movs	r0, #1
 8001936:	f000 fb4f 	bl	8001fd8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800193a:	2001      	movs	r0, #1
 800193c:	f7ff ff40 	bl	80017c0 <lcd_send_cmd>
	HAL_Delay(1);
 8001940:	2001      	movs	r0, #1
 8001942:	f000 fb49 	bl	8001fd8 <HAL_Delay>
	HAL_Delay(1);
 8001946:	2001      	movs	r0, #1
 8001948:	f000 fb46 	bl	8001fd8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800194c:	2006      	movs	r0, #6
 800194e:	f7ff ff37 	bl	80017c0 <lcd_send_cmd>
	HAL_Delay(1);
 8001952:	2001      	movs	r0, #1
 8001954:	f000 fb40 	bl	8001fd8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001958:	200c      	movs	r0, #12
 800195a:	f7ff ff31 	bl	80017c0 <lcd_send_cmd>
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}

08001962 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b082      	sub	sp, #8
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800196a:	e006      	b.n	800197a <lcd_send_string+0x18>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	1c5a      	adds	r2, r3, #1
 8001970:	607a      	str	r2, [r7, #4]
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff53 	bl	8001820 <lcd_send_data>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f4      	bne.n	800196c <lcd_send_string+0xa>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800198c:	b590      	push	{r4, r7, lr}
 800198e:	b083      	sub	sp, #12
 8001990:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8001992:	f000 fabf 	bl	8001f14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001996:	f000 f879 	bl	8001a8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800199a:	f000 f8eb 	bl	8001b74 <MX_GPIO_Init>
  MX_I2C1_Init();
 800199e:	f000 f8bb 	bl	8001b18 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80019a2:	f7ff ffa1 	bl	80018e8 <lcd_init>
  lcd_clear();
 80019a6:	f7ff ff6b 	bl	8001880 <lcd_clear>
  lcd_put_cur(0, 3);
 80019aa:	2103      	movs	r1, #3
 80019ac:	2000      	movs	r0, #0
 80019ae:	f7ff ff7d 	bl	80018ac <lcd_put_cur>
  lcd_send_string("MINI SCALE");
 80019b2:	482a      	ldr	r0, [pc, #168]	; (8001a5c <main+0xd0>)
 80019b4:	f7ff ffd5 	bl	8001962 <lcd_send_string>
  hx711_init(&loadcell, HX711_CK_GPIO_Port, HX711_CK_Pin, HX711_DATA_GPIO_Port, HX711_DATA_Pin);
 80019b8:	2302      	movs	r3, #2
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	4b28      	ldr	r3, [pc, #160]	; (8001a60 <main+0xd4>)
 80019be:	2201      	movs	r2, #1
 80019c0:	4927      	ldr	r1, [pc, #156]	; (8001a60 <main+0xd4>)
 80019c2:	4828      	ldr	r0, [pc, #160]	; (8001a64 <main+0xd8>)
 80019c4:	f7ff fd92 	bl	80014ec <hx711_init>
  hx711_calibration(&loadcell, 7994951, 7984997, 24.0); //SAMPLES = 50
 80019c8:	4b27      	ldr	r3, [pc, #156]	; (8001a68 <main+0xdc>)
 80019ca:	4a28      	ldr	r2, [pc, #160]	; (8001a6c <main+0xe0>)
 80019cc:	4928      	ldr	r1, [pc, #160]	; (8001a70 <main+0xe4>)
 80019ce:	4825      	ldr	r0, [pc, #148]	; (8001a64 <main+0xd8>)
 80019d0:	f7ff fe92 	bl	80016f8 <hx711_calibration>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  HAL_Delay(100);
	  if(tare){
 80019d4:	4b27      	ldr	r3, [pc, #156]	; (8001a74 <main+0xe8>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d006      	beq.n	80019ea <main+0x5e>
		  hx711_tare(&loadcell, 2);
 80019dc:	2102      	movs	r1, #2
 80019de:	4821      	ldr	r0, [pc, #132]	; (8001a64 <main+0xd8>)
 80019e0:	f7ff fe51 	bl	8001686 <hx711_tare>
		  tare = false;
 80019e4:	4b23      	ldr	r3, [pc, #140]	; (8001a74 <main+0xe8>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	701a      	strb	r2, [r3, #0]
	  }
	  weight = hx711_weight(&loadcell, 2);
 80019ea:	2102      	movs	r1, #2
 80019ec:	481d      	ldr	r0, [pc, #116]	; (8001a64 <main+0xd8>)
 80019ee:	f7ff fea0 	bl	8001732 <hx711_weight>
 80019f2:	4602      	mov	r2, r0
 80019f4:	4b20      	ldr	r3, [pc, #128]	; (8001a78 <main+0xec>)
 80019f6:	601a      	str	r2, [r3, #0]
//	  raw = hx711_value_ave(&loadcell, 10);
	  if(weight < 0) weight = 0;
 80019f8:	4b1f      	ldr	r3, [pc, #124]	; (8001a78 <main+0xec>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f04f 0100 	mov.w	r1, #0
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff fb5d 	bl	80010c0 <__aeabi_fcmplt>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <main+0x88>
 8001a0c:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <main+0xec>)
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
	  sprintf(str, "%.2f", weight);
 8001a14:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <main+0xec>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7fe fd05 	bl	8000428 <__aeabi_f2d>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	460c      	mov	r4, r1
 8001a22:	461a      	mov	r2, r3
 8001a24:	4623      	mov	r3, r4
 8001a26:	4915      	ldr	r1, [pc, #84]	; (8001a7c <main+0xf0>)
 8001a28:	4815      	ldr	r0, [pc, #84]	; (8001a80 <main+0xf4>)
 8001a2a:	f002 fc97 	bl	800435c <siprintf>
	  lcd_put_cur(1, 2);
 8001a2e:	2102      	movs	r1, #2
 8001a30:	2001      	movs	r0, #1
 8001a32:	f7ff ff3b 	bl	80018ac <lcd_put_cur>
	  lcd_send_string("        ");
 8001a36:	4813      	ldr	r0, [pc, #76]	; (8001a84 <main+0xf8>)
 8001a38:	f7ff ff93 	bl	8001962 <lcd_send_string>
	  lcd_put_cur(1, 2);
 8001a3c:	2102      	movs	r1, #2
 8001a3e:	2001      	movs	r0, #1
 8001a40:	f7ff ff34 	bl	80018ac <lcd_put_cur>
	  lcd_send_string(str);
 8001a44:	480e      	ldr	r0, [pc, #56]	; (8001a80 <main+0xf4>)
 8001a46:	f7ff ff8c 	bl	8001962 <lcd_send_string>
	  lcd_put_cur(1, 10);
 8001a4a:	210a      	movs	r1, #10
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	f7ff ff2d 	bl	80018ac <lcd_put_cur>
	  lcd_send_string("GAM");
 8001a52:	480d      	ldr	r0, [pc, #52]	; (8001a88 <main+0xfc>)
 8001a54:	f7ff ff85 	bl	8001962 <lcd_send_string>
	  if(tare){
 8001a58:	e7bc      	b.n	80019d4 <main+0x48>
 8001a5a:	bf00      	nop
 8001a5c:	08007188 	.word	0x08007188
 8001a60:	40010800 	.word	0x40010800
 8001a64:	20000260 	.word	0x20000260
 8001a68:	41c00000 	.word	0x41c00000
 8001a6c:	0079d765 	.word	0x0079d765
 8001a70:	0079fe47 	.word	0x0079fe47
 8001a74:	200001fc 	.word	0x200001fc
 8001a78:	200001f8 	.word	0x200001f8
 8001a7c:	08007194 	.word	0x08007194
 8001a80:	20000278 	.word	0x20000278
 8001a84:	0800719c 	.word	0x0800719c
 8001a88:	080071a8 	.word	0x080071a8

08001a8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b090      	sub	sp, #64	; 0x40
 8001a90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a92:	f107 0318 	add.w	r3, r7, #24
 8001a96:	2228      	movs	r2, #40	; 0x28
 8001a98:	2100      	movs	r1, #0
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f001 fe22 	bl	80036e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aa0:	1d3b      	adds	r3, r7, #4
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	605a      	str	r2, [r3, #4]
 8001aa8:	609a      	str	r2, [r3, #8]
 8001aaa:	60da      	str	r2, [r3, #12]
 8001aac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ab2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ab6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001abc:	2301      	movs	r3, #1
 8001abe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ac4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ac8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001aca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001ace:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ad0:	f107 0318 	add.w	r3, r7, #24
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f001 f9e1 	bl	8002e9c <HAL_RCC_OscConfig>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001ae0:	f000 f90c 	bl	8001cfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ae4:	230f      	movs	r3, #15
 8001ae6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001af0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001af4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001afa:	1d3b      	adds	r3, r7, #4
 8001afc:	2102      	movs	r1, #2
 8001afe:	4618      	mov	r0, r3
 8001b00:	f001 fc4c 	bl	800339c <HAL_RCC_ClockConfig>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001b0a:	f000 f8f7 	bl	8001cfc <Error_Handler>
  }
}
 8001b0e:	bf00      	nop
 8001b10:	3740      	adds	r7, #64	; 0x40
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
	...

08001b18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b1c:	4b12      	ldr	r3, [pc, #72]	; (8001b68 <MX_I2C1_Init+0x50>)
 8001b1e:	4a13      	ldr	r2, [pc, #76]	; (8001b6c <MX_I2C1_Init+0x54>)
 8001b20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b22:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <MX_I2C1_Init+0x50>)
 8001b24:	4a12      	ldr	r2, [pc, #72]	; (8001b70 <MX_I2C1_Init+0x58>)
 8001b26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b28:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <MX_I2C1_Init+0x50>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b2e:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <MX_I2C1_Init+0x50>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b34:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <MX_I2C1_Init+0x50>)
 8001b36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b3c:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <MX_I2C1_Init+0x50>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <MX_I2C1_Init+0x50>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b48:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <MX_I2C1_Init+0x50>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b4e:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <MX_I2C1_Init+0x50>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b54:	4804      	ldr	r0, [pc, #16]	; (8001b68 <MX_I2C1_Init+0x50>)
 8001b56:	f000 fd11 	bl	800257c <HAL_I2C_Init>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b60:	f000 f8cc 	bl	8001cfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	2000020c 	.word	0x2000020c
 8001b6c:	40005400 	.word	0x40005400
 8001b70:	000186a0 	.word	0x000186a0

08001b74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b088      	sub	sp, #32
 8001b78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7a:	f107 0310 	add.w	r3, r7, #16
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
 8001b86:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b88:	4b31      	ldr	r3, [pc, #196]	; (8001c50 <MX_GPIO_Init+0xdc>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	4a30      	ldr	r2, [pc, #192]	; (8001c50 <MX_GPIO_Init+0xdc>)
 8001b8e:	f043 0320 	orr.w	r3, r3, #32
 8001b92:	6193      	str	r3, [r2, #24]
 8001b94:	4b2e      	ldr	r3, [pc, #184]	; (8001c50 <MX_GPIO_Init+0xdc>)
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	f003 0320 	and.w	r3, r3, #32
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba0:	4b2b      	ldr	r3, [pc, #172]	; (8001c50 <MX_GPIO_Init+0xdc>)
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	4a2a      	ldr	r2, [pc, #168]	; (8001c50 <MX_GPIO_Init+0xdc>)
 8001ba6:	f043 0304 	orr.w	r3, r3, #4
 8001baa:	6193      	str	r3, [r2, #24]
 8001bac:	4b28      	ldr	r3, [pc, #160]	; (8001c50 <MX_GPIO_Init+0xdc>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	f003 0304 	and.w	r3, r3, #4
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb8:	4b25      	ldr	r3, [pc, #148]	; (8001c50 <MX_GPIO_Init+0xdc>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	4a24      	ldr	r2, [pc, #144]	; (8001c50 <MX_GPIO_Init+0xdc>)
 8001bbe:	f043 0308 	orr.w	r3, r3, #8
 8001bc2:	6193      	str	r3, [r2, #24]
 8001bc4:	4b22      	ldr	r3, [pc, #136]	; (8001c50 <MX_GPIO_Init+0xdc>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	f003 0308 	and.w	r3, r3, #8
 8001bcc:	607b      	str	r3, [r7, #4]
 8001bce:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HX711_CK_GPIO_Port, HX711_CK_Pin, GPIO_PIN_RESET);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	481f      	ldr	r0, [pc, #124]	; (8001c54 <MX_GPIO_Init+0xe0>)
 8001bd6:	f000 fca0 	bl	800251a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : HX711_CK_Pin */
  GPIO_InitStruct.Pin = HX711_CK_Pin;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bde:	2301      	movs	r3, #1
 8001be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be6:	2302      	movs	r3, #2
 8001be8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(HX711_CK_GPIO_Port, &GPIO_InitStruct);
 8001bea:	f107 0310 	add.w	r3, r7, #16
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4818      	ldr	r0, [pc, #96]	; (8001c54 <MX_GPIO_Init+0xe0>)
 8001bf2:	f000 fb21 	bl	8002238 <HAL_GPIO_Init>

  /*Configure GPIO pin : HX711_DATA_Pin */
  GPIO_InitStruct.Pin = HX711_DATA_Pin;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HX711_DATA_GPIO_Port, &GPIO_InitStruct);
 8001c02:	f107 0310 	add.w	r3, r7, #16
 8001c06:	4619      	mov	r1, r3
 8001c08:	4812      	ldr	r0, [pc, #72]	; (8001c54 <MX_GPIO_Init+0xe0>)
 8001c0a:	f000 fb15 	bl	8002238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c0e:	230c      	movs	r3, #12
 8001c10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c12:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <MX_GPIO_Init+0xe4>)
 8001c14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c16:	2301      	movs	r3, #1
 8001c18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1a:	f107 0310 	add.w	r3, r7, #16
 8001c1e:	4619      	mov	r1, r3
 8001c20:	480c      	ldr	r0, [pc, #48]	; (8001c54 <MX_GPIO_Init+0xe0>)
 8001c22:	f000 fb09 	bl	8002238 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001c26:	2200      	movs	r2, #0
 8001c28:	2105      	movs	r1, #5
 8001c2a:	2008      	movs	r0, #8
 8001c2c:	f000 facd 	bl	80021ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001c30:	2008      	movs	r0, #8
 8001c32:	f000 fae6 	bl	8002202 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 6, 0);
 8001c36:	2200      	movs	r2, #0
 8001c38:	2106      	movs	r1, #6
 8001c3a:	2009      	movs	r0, #9
 8001c3c:	f000 fac5 	bl	80021ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001c40:	2009      	movs	r0, #9
 8001c42:	f000 fade 	bl	8002202 <HAL_NVIC_EnableIRQ>

}
 8001c46:	bf00      	nop
 8001c48:	3720      	adds	r7, #32
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40021000 	.word	0x40021000
 8001c54:	40010800 	.word	0x40010800
 8001c58:	10210000 	.word	0x10210000

08001c5c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2){
 8001c66:	88fb      	ldrh	r3, [r7, #6]
 8001c68:	2b04      	cmp	r3, #4
 8001c6a:	d11e      	bne.n	8001caa <HAL_GPIO_EXTI_Callback+0x4e>
		lcd_clear();
 8001c6c:	f7ff fe08 	bl	8001880 <lcd_clear>
		lcd_put_cur(0, 4);
 8001c70:	2104      	movs	r1, #4
 8001c72:	2000      	movs	r0, #0
 8001c74:	f7ff fe1a 	bl	80018ac <lcd_put_cur>
		lcd_send_string("PCS MODE");
 8001c78:	481c      	ldr	r0, [pc, #112]	; (8001cec <HAL_GPIO_EXTI_Callback+0x90>)
 8001c7a:	f7ff fe72 	bl	8001962 <lcd_send_string>
		pcs_mode = ! pcs_mode;
 8001c7e:	4b1c      	ldr	r3, [pc, #112]	; (8001cf0 <HAL_GPIO_EXTI_Callback+0x94>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	bf14      	ite	ne
 8001c86:	2301      	movne	r3, #1
 8001c88:	2300      	moveq	r3, #0
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	f083 0301 	eor.w	r3, r3, #1
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <HAL_GPIO_EXTI_Callback+0x94>)
 8001c9a:	701a      	strb	r2, [r3, #0]
		HAL_Delay(700);
 8001c9c:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001ca0:	f000 f99a 	bl	8001fd8 <HAL_Delay>
		lcd_clear();
 8001ca4:	f7ff fdec 	bl	8001880 <lcd_clear>
		lcd_send_string("TARED!");
		if(!tare) tare = true;
		HAL_Delay(700);
		lcd_clear();
	}
}
 8001ca8:	e01b      	b.n	8001ce2 <HAL_GPIO_EXTI_Callback+0x86>
	}else if(GPIO_Pin == GPIO_PIN_3){ //Tare
 8001caa:	88fb      	ldrh	r3, [r7, #6]
 8001cac:	2b08      	cmp	r3, #8
 8001cae:	d118      	bne.n	8001ce2 <HAL_GPIO_EXTI_Callback+0x86>
		lcd_clear();
 8001cb0:	f7ff fde6 	bl	8001880 <lcd_clear>
		lcd_put_cur(0, 5);
 8001cb4:	2105      	movs	r1, #5
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	f7ff fdf8 	bl	80018ac <lcd_put_cur>
		lcd_send_string("TARED!");
 8001cbc:	480d      	ldr	r0, [pc, #52]	; (8001cf4 <HAL_GPIO_EXTI_Callback+0x98>)
 8001cbe:	f7ff fe50 	bl	8001962 <lcd_send_string>
		if(!tare) tare = true;
 8001cc2:	4b0d      	ldr	r3, [pc, #52]	; (8001cf8 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	f083 0301 	eor.w	r3, r3, #1
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d002      	beq.n	8001cd6 <HAL_GPIO_EXTI_Callback+0x7a>
 8001cd0:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	701a      	strb	r2, [r3, #0]
		HAL_Delay(700);
 8001cd6:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001cda:	f000 f97d 	bl	8001fd8 <HAL_Delay>
		lcd_clear();
 8001cde:	f7ff fdcf 	bl	8001880 <lcd_clear>
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	080071ac 	.word	0x080071ac
 8001cf0:	200001fd 	.word	0x200001fd
 8001cf4:	080071b8 	.word	0x080071b8
 8001cf8:	200001fc 	.word	0x200001fc

08001cfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d00:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d02:	e7fe      	b.n	8001d02 <Error_Handler+0x6>

08001d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d0a:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <HAL_MspInit+0x5c>)
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	4a14      	ldr	r2, [pc, #80]	; (8001d60 <HAL_MspInit+0x5c>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	6193      	str	r3, [r2, #24]
 8001d16:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <HAL_MspInit+0x5c>)
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	60bb      	str	r3, [r7, #8]
 8001d20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d22:	4b0f      	ldr	r3, [pc, #60]	; (8001d60 <HAL_MspInit+0x5c>)
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	4a0e      	ldr	r2, [pc, #56]	; (8001d60 <HAL_MspInit+0x5c>)
 8001d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d2c:	61d3      	str	r3, [r2, #28]
 8001d2e:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <HAL_MspInit+0x5c>)
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d36:	607b      	str	r3, [r7, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d3a:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <HAL_MspInit+0x60>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	4a04      	ldr	r2, [pc, #16]	; (8001d64 <HAL_MspInit+0x60>)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d56:	bf00      	nop
 8001d58:	3714      	adds	r7, #20
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr
 8001d60:	40021000 	.word	0x40021000
 8001d64:	40010000 	.word	0x40010000

08001d68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b088      	sub	sp, #32
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 0310 	add.w	r3, r7, #16
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a15      	ldr	r2, [pc, #84]	; (8001dd8 <HAL_I2C_MspInit+0x70>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d123      	bne.n	8001dd0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d88:	4b14      	ldr	r3, [pc, #80]	; (8001ddc <HAL_I2C_MspInit+0x74>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	4a13      	ldr	r2, [pc, #76]	; (8001ddc <HAL_I2C_MspInit+0x74>)
 8001d8e:	f043 0308 	orr.w	r3, r3, #8
 8001d92:	6193      	str	r3, [r2, #24]
 8001d94:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <HAL_I2C_MspInit+0x74>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	f003 0308 	and.w	r3, r3, #8
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001da0:	23c0      	movs	r3, #192	; 0xc0
 8001da2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001da4:	2312      	movs	r3, #18
 8001da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001da8:	2303      	movs	r3, #3
 8001daa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dac:	f107 0310 	add.w	r3, r7, #16
 8001db0:	4619      	mov	r1, r3
 8001db2:	480b      	ldr	r0, [pc, #44]	; (8001de0 <HAL_I2C_MspInit+0x78>)
 8001db4:	f000 fa40 	bl	8002238 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001db8:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <HAL_I2C_MspInit+0x74>)
 8001dba:	69db      	ldr	r3, [r3, #28]
 8001dbc:	4a07      	ldr	r2, [pc, #28]	; (8001ddc <HAL_I2C_MspInit+0x74>)
 8001dbe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dc2:	61d3      	str	r3, [r2, #28]
 8001dc4:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <HAL_I2C_MspInit+0x74>)
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dcc:	60bb      	str	r3, [r7, #8]
 8001dce:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001dd0:	bf00      	nop
 8001dd2:	3720      	adds	r7, #32
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40005400 	.word	0x40005400
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	40010c00 	.word	0x40010c00

08001de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001de8:	e7fe      	b.n	8001de8 <NMI_Handler+0x4>

08001dea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dee:	e7fe      	b.n	8001dee <HardFault_Handler+0x4>

08001df0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df4:	e7fe      	b.n	8001df4 <MemManage_Handler+0x4>

08001df6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001df6:	b480      	push	{r7}
 8001df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dfa:	e7fe      	b.n	8001dfa <BusFault_Handler+0x4>

08001dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e00:	e7fe      	b.n	8001e00 <UsageFault_Handler+0x4>

08001e02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr

08001e0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e12:	bf00      	nop
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bc80      	pop	{r7}
 8001e18:	4770      	bx	lr

08001e1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr

08001e26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e2a:	f000 f8b9 	bl	8001fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001e36:	2004      	movs	r0, #4
 8001e38:	f000 fb88 	bl	800254c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001e3c:	bf00      	nop
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001e44:	2008      	movs	r0, #8
 8001e46:	f000 fb81 	bl	800254c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
	...

08001e50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e58:	4a14      	ldr	r2, [pc, #80]	; (8001eac <_sbrk+0x5c>)
 8001e5a:	4b15      	ldr	r3, [pc, #84]	; (8001eb0 <_sbrk+0x60>)
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e64:	4b13      	ldr	r3, [pc, #76]	; (8001eb4 <_sbrk+0x64>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d102      	bne.n	8001e72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e6c:	4b11      	ldr	r3, [pc, #68]	; (8001eb4 <_sbrk+0x64>)
 8001e6e:	4a12      	ldr	r2, [pc, #72]	; (8001eb8 <_sbrk+0x68>)
 8001e70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e72:	4b10      	ldr	r3, [pc, #64]	; (8001eb4 <_sbrk+0x64>)
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4413      	add	r3, r2
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d207      	bcs.n	8001e90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e80:	f001 fc06 	bl	8003690 <__errno>
 8001e84:	4602      	mov	r2, r0
 8001e86:	230c      	movs	r3, #12
 8001e88:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e8e:	e009      	b.n	8001ea4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e90:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <_sbrk+0x64>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e96:	4b07      	ldr	r3, [pc, #28]	; (8001eb4 <_sbrk+0x64>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	4a05      	ldr	r2, [pc, #20]	; (8001eb4 <_sbrk+0x64>)
 8001ea0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20005000 	.word	0x20005000
 8001eb0:	00000400 	.word	0x00000400
 8001eb4:	20000200 	.word	0x20000200
 8001eb8:	20000288 	.word	0x20000288

08001ebc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr

08001ec8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ec8:	f7ff fff8 	bl	8001ebc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ecc:	480b      	ldr	r0, [pc, #44]	; (8001efc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ece:	490c      	ldr	r1, [pc, #48]	; (8001f00 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ed0:	4a0c      	ldr	r2, [pc, #48]	; (8001f04 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed4:	e002      	b.n	8001edc <LoopCopyDataInit>

08001ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eda:	3304      	adds	r3, #4

08001edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee0:	d3f9      	bcc.n	8001ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ee2:	4a09      	ldr	r2, [pc, #36]	; (8001f08 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ee4:	4c09      	ldr	r4, [pc, #36]	; (8001f0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee8:	e001      	b.n	8001eee <LoopFillZerobss>

08001eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eec:	3204      	adds	r2, #4

08001eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef0:	d3fb      	bcc.n	8001eea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ef2:	f001 fbd3 	bl	800369c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ef6:	f7ff fd49 	bl	800198c <main>
  bx lr
 8001efa:	4770      	bx	lr
  ldr r0, =_sdata
 8001efc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f00:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001f04:	080074b0 	.word	0x080074b0
  ldr r2, =_sbss
 8001f08:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001f0c:	20000288 	.word	0x20000288

08001f10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f10:	e7fe      	b.n	8001f10 <ADC1_2_IRQHandler>
	...

08001f14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f18:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <HAL_Init+0x28>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a07      	ldr	r2, [pc, #28]	; (8001f3c <HAL_Init+0x28>)
 8001f1e:	f043 0310 	orr.w	r3, r3, #16
 8001f22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f24:	2003      	movs	r0, #3
 8001f26:	f000 f945 	bl	80021b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f2a:	2004      	movs	r0, #4
 8001f2c:	f000 f808 	bl	8001f40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f30:	f7ff fee8 	bl	8001d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	40022000 	.word	0x40022000

08001f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f48:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <HAL_InitTick+0x54>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <HAL_InitTick+0x58>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	4619      	mov	r1, r3
 8001f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f000 f95d 	bl	800221e <HAL_SYSTICK_Config>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e00e      	b.n	8001f8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b0f      	cmp	r3, #15
 8001f72:	d80a      	bhi.n	8001f8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f74:	2200      	movs	r2, #0
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	f04f 30ff 	mov.w	r0, #4294967295
 8001f7c:	f000 f925 	bl	80021ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f80:	4a06      	ldr	r2, [pc, #24]	; (8001f9c <HAL_InitTick+0x5c>)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
 8001f88:	e000      	b.n	8001f8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20000000 	.word	0x20000000
 8001f98:	20000008 	.word	0x20000008
 8001f9c:	20000004 	.word	0x20000004

08001fa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fa4:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <HAL_IncTick+0x1c>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <HAL_IncTick+0x20>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4413      	add	r3, r2
 8001fb0:	4a03      	ldr	r2, [pc, #12]	; (8001fc0 <HAL_IncTick+0x20>)
 8001fb2:	6013      	str	r3, [r2, #0]
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr
 8001fbc:	20000008 	.word	0x20000008
 8001fc0:	20000280 	.word	0x20000280

08001fc4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fc8:	4b02      	ldr	r3, [pc, #8]	; (8001fd4 <HAL_GetTick+0x10>)
 8001fca:	681b      	ldr	r3, [r3, #0]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bc80      	pop	{r7}
 8001fd2:	4770      	bx	lr
 8001fd4:	20000280 	.word	0x20000280

08001fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fe0:	f7ff fff0 	bl	8001fc4 <HAL_GetTick>
 8001fe4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff0:	d005      	beq.n	8001ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ff2:	4b09      	ldr	r3, [pc, #36]	; (8002018 <HAL_Delay+0x40>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ffe:	bf00      	nop
 8002000:	f7ff ffe0 	bl	8001fc4 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	429a      	cmp	r2, r3
 800200e:	d8f7      	bhi.n	8002000 <HAL_Delay+0x28>
  {
  }
}
 8002010:	bf00      	nop
 8002012:	3710      	adds	r7, #16
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20000008 	.word	0x20000008

0800201c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800202c:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <__NVIC_SetPriorityGrouping+0x44>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002038:	4013      	ands	r3, r2
 800203a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002044:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800204c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800204e:	4a04      	ldr	r2, [pc, #16]	; (8002060 <__NVIC_SetPriorityGrouping+0x44>)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	60d3      	str	r3, [r2, #12]
}
 8002054:	bf00      	nop
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	e000ed00 	.word	0xe000ed00

08002064 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002068:	4b04      	ldr	r3, [pc, #16]	; (800207c <__NVIC_GetPriorityGrouping+0x18>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	0a1b      	lsrs	r3, r3, #8
 800206e:	f003 0307 	and.w	r3, r3, #7
}
 8002072:	4618      	mov	r0, r3
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800208a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208e:	2b00      	cmp	r3, #0
 8002090:	db0b      	blt.n	80020aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	f003 021f 	and.w	r2, r3, #31
 8002098:	4906      	ldr	r1, [pc, #24]	; (80020b4 <__NVIC_EnableIRQ+0x34>)
 800209a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209e:	095b      	lsrs	r3, r3, #5
 80020a0:	2001      	movs	r0, #1
 80020a2:	fa00 f202 	lsl.w	r2, r0, r2
 80020a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr
 80020b4:	e000e100 	.word	0xe000e100

080020b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	6039      	str	r1, [r7, #0]
 80020c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	db0a      	blt.n	80020e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	490c      	ldr	r1, [pc, #48]	; (8002104 <__NVIC_SetPriority+0x4c>)
 80020d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d6:	0112      	lsls	r2, r2, #4
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	440b      	add	r3, r1
 80020dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020e0:	e00a      	b.n	80020f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	4908      	ldr	r1, [pc, #32]	; (8002108 <__NVIC_SetPriority+0x50>)
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	3b04      	subs	r3, #4
 80020f0:	0112      	lsls	r2, r2, #4
 80020f2:	b2d2      	uxtb	r2, r2
 80020f4:	440b      	add	r3, r1
 80020f6:	761a      	strb	r2, [r3, #24]
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	e000e100 	.word	0xe000e100
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800210c:	b480      	push	{r7}
 800210e:	b089      	sub	sp, #36	; 0x24
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	f1c3 0307 	rsb	r3, r3, #7
 8002126:	2b04      	cmp	r3, #4
 8002128:	bf28      	it	cs
 800212a:	2304      	movcs	r3, #4
 800212c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	3304      	adds	r3, #4
 8002132:	2b06      	cmp	r3, #6
 8002134:	d902      	bls.n	800213c <NVIC_EncodePriority+0x30>
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3b03      	subs	r3, #3
 800213a:	e000      	b.n	800213e <NVIC_EncodePriority+0x32>
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002140:	f04f 32ff 	mov.w	r2, #4294967295
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43da      	mvns	r2, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	401a      	ands	r2, r3
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002154:	f04f 31ff 	mov.w	r1, #4294967295
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	fa01 f303 	lsl.w	r3, r1, r3
 800215e:	43d9      	mvns	r1, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002164:	4313      	orrs	r3, r2
         );
}
 8002166:	4618      	mov	r0, r3
 8002168:	3724      	adds	r7, #36	; 0x24
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr

08002170 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	3b01      	subs	r3, #1
 800217c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002180:	d301      	bcc.n	8002186 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002182:	2301      	movs	r3, #1
 8002184:	e00f      	b.n	80021a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002186:	4a0a      	ldr	r2, [pc, #40]	; (80021b0 <SysTick_Config+0x40>)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3b01      	subs	r3, #1
 800218c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800218e:	210f      	movs	r1, #15
 8002190:	f04f 30ff 	mov.w	r0, #4294967295
 8002194:	f7ff ff90 	bl	80020b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002198:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <SysTick_Config+0x40>)
 800219a:	2200      	movs	r2, #0
 800219c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800219e:	4b04      	ldr	r3, [pc, #16]	; (80021b0 <SysTick_Config+0x40>)
 80021a0:	2207      	movs	r2, #7
 80021a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	e000e010 	.word	0xe000e010

080021b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7ff ff2d 	bl	800201c <__NVIC_SetPriorityGrouping>
}
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b086      	sub	sp, #24
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	4603      	mov	r3, r0
 80021d2:	60b9      	str	r1, [r7, #8]
 80021d4:	607a      	str	r2, [r7, #4]
 80021d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021dc:	f7ff ff42 	bl	8002064 <__NVIC_GetPriorityGrouping>
 80021e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	68b9      	ldr	r1, [r7, #8]
 80021e6:	6978      	ldr	r0, [r7, #20]
 80021e8:	f7ff ff90 	bl	800210c <NVIC_EncodePriority>
 80021ec:	4602      	mov	r2, r0
 80021ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021f2:	4611      	mov	r1, r2
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff ff5f 	bl	80020b8 <__NVIC_SetPriority>
}
 80021fa:	bf00      	nop
 80021fc:	3718      	adds	r7, #24
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b082      	sub	sp, #8
 8002206:	af00      	add	r7, sp, #0
 8002208:	4603      	mov	r3, r0
 800220a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800220c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff ff35 	bl	8002080 <__NVIC_EnableIRQ>
}
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b082      	sub	sp, #8
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7ff ffa2 	bl	8002170 <SysTick_Config>
 800222c:	4603      	mov	r3, r0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002238:	b480      	push	{r7}
 800223a:	b08b      	sub	sp, #44	; 0x2c
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002242:	2300      	movs	r3, #0
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002246:	2300      	movs	r3, #0
 8002248:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800224a:	e127      	b.n	800249c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800224c:	2201      	movs	r2, #1
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	69fa      	ldr	r2, [r7, #28]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	429a      	cmp	r2, r3
 8002266:	f040 8116 	bne.w	8002496 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b12      	cmp	r3, #18
 8002270:	d034      	beq.n	80022dc <HAL_GPIO_Init+0xa4>
 8002272:	2b12      	cmp	r3, #18
 8002274:	d80d      	bhi.n	8002292 <HAL_GPIO_Init+0x5a>
 8002276:	2b02      	cmp	r3, #2
 8002278:	d02b      	beq.n	80022d2 <HAL_GPIO_Init+0x9a>
 800227a:	2b02      	cmp	r3, #2
 800227c:	d804      	bhi.n	8002288 <HAL_GPIO_Init+0x50>
 800227e:	2b00      	cmp	r3, #0
 8002280:	d031      	beq.n	80022e6 <HAL_GPIO_Init+0xae>
 8002282:	2b01      	cmp	r3, #1
 8002284:	d01c      	beq.n	80022c0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002286:	e048      	b.n	800231a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002288:	2b03      	cmp	r3, #3
 800228a:	d043      	beq.n	8002314 <HAL_GPIO_Init+0xdc>
 800228c:	2b11      	cmp	r3, #17
 800228e:	d01b      	beq.n	80022c8 <HAL_GPIO_Init+0x90>
          break;
 8002290:	e043      	b.n	800231a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002292:	4a89      	ldr	r2, [pc, #548]	; (80024b8 <HAL_GPIO_Init+0x280>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d026      	beq.n	80022e6 <HAL_GPIO_Init+0xae>
 8002298:	4a87      	ldr	r2, [pc, #540]	; (80024b8 <HAL_GPIO_Init+0x280>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d806      	bhi.n	80022ac <HAL_GPIO_Init+0x74>
 800229e:	4a87      	ldr	r2, [pc, #540]	; (80024bc <HAL_GPIO_Init+0x284>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d020      	beq.n	80022e6 <HAL_GPIO_Init+0xae>
 80022a4:	4a86      	ldr	r2, [pc, #536]	; (80024c0 <HAL_GPIO_Init+0x288>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d01d      	beq.n	80022e6 <HAL_GPIO_Init+0xae>
          break;
 80022aa:	e036      	b.n	800231a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80022ac:	4a85      	ldr	r2, [pc, #532]	; (80024c4 <HAL_GPIO_Init+0x28c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d019      	beq.n	80022e6 <HAL_GPIO_Init+0xae>
 80022b2:	4a85      	ldr	r2, [pc, #532]	; (80024c8 <HAL_GPIO_Init+0x290>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d016      	beq.n	80022e6 <HAL_GPIO_Init+0xae>
 80022b8:	4a84      	ldr	r2, [pc, #528]	; (80024cc <HAL_GPIO_Init+0x294>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d013      	beq.n	80022e6 <HAL_GPIO_Init+0xae>
          break;
 80022be:	e02c      	b.n	800231a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	623b      	str	r3, [r7, #32]
          break;
 80022c6:	e028      	b.n	800231a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	3304      	adds	r3, #4
 80022ce:	623b      	str	r3, [r7, #32]
          break;
 80022d0:	e023      	b.n	800231a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	3308      	adds	r3, #8
 80022d8:	623b      	str	r3, [r7, #32]
          break;
 80022da:	e01e      	b.n	800231a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	330c      	adds	r3, #12
 80022e2:	623b      	str	r3, [r7, #32]
          break;
 80022e4:	e019      	b.n	800231a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d102      	bne.n	80022f4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022ee:	2304      	movs	r3, #4
 80022f0:	623b      	str	r3, [r7, #32]
          break;
 80022f2:	e012      	b.n	800231a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d105      	bne.n	8002308 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022fc:	2308      	movs	r3, #8
 80022fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	69fa      	ldr	r2, [r7, #28]
 8002304:	611a      	str	r2, [r3, #16]
          break;
 8002306:	e008      	b.n	800231a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002308:	2308      	movs	r3, #8
 800230a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	69fa      	ldr	r2, [r7, #28]
 8002310:	615a      	str	r2, [r3, #20]
          break;
 8002312:	e002      	b.n	800231a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002314:	2300      	movs	r3, #0
 8002316:	623b      	str	r3, [r7, #32]
          break;
 8002318:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	2bff      	cmp	r3, #255	; 0xff
 800231e:	d801      	bhi.n	8002324 <HAL_GPIO_Init+0xec>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	e001      	b.n	8002328 <HAL_GPIO_Init+0xf0>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3304      	adds	r3, #4
 8002328:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	2bff      	cmp	r3, #255	; 0xff
 800232e:	d802      	bhi.n	8002336 <HAL_GPIO_Init+0xfe>
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	e002      	b.n	800233c <HAL_GPIO_Init+0x104>
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	3b08      	subs	r3, #8
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	210f      	movs	r1, #15
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	fa01 f303 	lsl.w	r3, r1, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	401a      	ands	r2, r3
 800234e:	6a39      	ldr	r1, [r7, #32]
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	fa01 f303 	lsl.w	r3, r1, r3
 8002356:	431a      	orrs	r2, r3
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002364:	2b00      	cmp	r3, #0
 8002366:	f000 8096 	beq.w	8002496 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800236a:	4b59      	ldr	r3, [pc, #356]	; (80024d0 <HAL_GPIO_Init+0x298>)
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	4a58      	ldr	r2, [pc, #352]	; (80024d0 <HAL_GPIO_Init+0x298>)
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	6193      	str	r3, [r2, #24]
 8002376:	4b56      	ldr	r3, [pc, #344]	; (80024d0 <HAL_GPIO_Init+0x298>)
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	60bb      	str	r3, [r7, #8]
 8002380:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002382:	4a54      	ldr	r2, [pc, #336]	; (80024d4 <HAL_GPIO_Init+0x29c>)
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	089b      	lsrs	r3, r3, #2
 8002388:	3302      	adds	r3, #2
 800238a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800238e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	220f      	movs	r2, #15
 800239a:	fa02 f303 	lsl.w	r3, r2, r3
 800239e:	43db      	mvns	r3, r3
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	4013      	ands	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a4b      	ldr	r2, [pc, #300]	; (80024d8 <HAL_GPIO_Init+0x2a0>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d013      	beq.n	80023d6 <HAL_GPIO_Init+0x19e>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a4a      	ldr	r2, [pc, #296]	; (80024dc <HAL_GPIO_Init+0x2a4>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d00d      	beq.n	80023d2 <HAL_GPIO_Init+0x19a>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a49      	ldr	r2, [pc, #292]	; (80024e0 <HAL_GPIO_Init+0x2a8>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d007      	beq.n	80023ce <HAL_GPIO_Init+0x196>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a48      	ldr	r2, [pc, #288]	; (80024e4 <HAL_GPIO_Init+0x2ac>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d101      	bne.n	80023ca <HAL_GPIO_Init+0x192>
 80023c6:	2303      	movs	r3, #3
 80023c8:	e006      	b.n	80023d8 <HAL_GPIO_Init+0x1a0>
 80023ca:	2304      	movs	r3, #4
 80023cc:	e004      	b.n	80023d8 <HAL_GPIO_Init+0x1a0>
 80023ce:	2302      	movs	r3, #2
 80023d0:	e002      	b.n	80023d8 <HAL_GPIO_Init+0x1a0>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <HAL_GPIO_Init+0x1a0>
 80023d6:	2300      	movs	r3, #0
 80023d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023da:	f002 0203 	and.w	r2, r2, #3
 80023de:	0092      	lsls	r2, r2, #2
 80023e0:	4093      	lsls	r3, r2
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023e8:	493a      	ldr	r1, [pc, #232]	; (80024d4 <HAL_GPIO_Init+0x29c>)
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	089b      	lsrs	r3, r3, #2
 80023ee:	3302      	adds	r3, #2
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d006      	beq.n	8002410 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002402:	4b39      	ldr	r3, [pc, #228]	; (80024e8 <HAL_GPIO_Init+0x2b0>)
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	4938      	ldr	r1, [pc, #224]	; (80024e8 <HAL_GPIO_Init+0x2b0>)
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	4313      	orrs	r3, r2
 800240c:	608b      	str	r3, [r1, #8]
 800240e:	e006      	b.n	800241e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002410:	4b35      	ldr	r3, [pc, #212]	; (80024e8 <HAL_GPIO_Init+0x2b0>)
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	43db      	mvns	r3, r3
 8002418:	4933      	ldr	r1, [pc, #204]	; (80024e8 <HAL_GPIO_Init+0x2b0>)
 800241a:	4013      	ands	r3, r2
 800241c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d006      	beq.n	8002438 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800242a:	4b2f      	ldr	r3, [pc, #188]	; (80024e8 <HAL_GPIO_Init+0x2b0>)
 800242c:	68da      	ldr	r2, [r3, #12]
 800242e:	492e      	ldr	r1, [pc, #184]	; (80024e8 <HAL_GPIO_Init+0x2b0>)
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	4313      	orrs	r3, r2
 8002434:	60cb      	str	r3, [r1, #12]
 8002436:	e006      	b.n	8002446 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002438:	4b2b      	ldr	r3, [pc, #172]	; (80024e8 <HAL_GPIO_Init+0x2b0>)
 800243a:	68da      	ldr	r2, [r3, #12]
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	43db      	mvns	r3, r3
 8002440:	4929      	ldr	r1, [pc, #164]	; (80024e8 <HAL_GPIO_Init+0x2b0>)
 8002442:	4013      	ands	r3, r2
 8002444:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d006      	beq.n	8002460 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002452:	4b25      	ldr	r3, [pc, #148]	; (80024e8 <HAL_GPIO_Init+0x2b0>)
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	4924      	ldr	r1, [pc, #144]	; (80024e8 <HAL_GPIO_Init+0x2b0>)
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	4313      	orrs	r3, r2
 800245c:	604b      	str	r3, [r1, #4]
 800245e:	e006      	b.n	800246e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002460:	4b21      	ldr	r3, [pc, #132]	; (80024e8 <HAL_GPIO_Init+0x2b0>)
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	43db      	mvns	r3, r3
 8002468:	491f      	ldr	r1, [pc, #124]	; (80024e8 <HAL_GPIO_Init+0x2b0>)
 800246a:	4013      	ands	r3, r2
 800246c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d006      	beq.n	8002488 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800247a:	4b1b      	ldr	r3, [pc, #108]	; (80024e8 <HAL_GPIO_Init+0x2b0>)
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	491a      	ldr	r1, [pc, #104]	; (80024e8 <HAL_GPIO_Init+0x2b0>)
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	4313      	orrs	r3, r2
 8002484:	600b      	str	r3, [r1, #0]
 8002486:	e006      	b.n	8002496 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002488:	4b17      	ldr	r3, [pc, #92]	; (80024e8 <HAL_GPIO_Init+0x2b0>)
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	43db      	mvns	r3, r3
 8002490:	4915      	ldr	r1, [pc, #84]	; (80024e8 <HAL_GPIO_Init+0x2b0>)
 8002492:	4013      	ands	r3, r2
 8002494:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	3301      	adds	r3, #1
 800249a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	fa22 f303 	lsr.w	r3, r2, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f47f aed0 	bne.w	800224c <HAL_GPIO_Init+0x14>
  }
}
 80024ac:	bf00      	nop
 80024ae:	372c      	adds	r7, #44	; 0x2c
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	10210000 	.word	0x10210000
 80024bc:	10110000 	.word	0x10110000
 80024c0:	10120000 	.word	0x10120000
 80024c4:	10310000 	.word	0x10310000
 80024c8:	10320000 	.word	0x10320000
 80024cc:	10220000 	.word	0x10220000
 80024d0:	40021000 	.word	0x40021000
 80024d4:	40010000 	.word	0x40010000
 80024d8:	40010800 	.word	0x40010800
 80024dc:	40010c00 	.word	0x40010c00
 80024e0:	40011000 	.word	0x40011000
 80024e4:	40011400 	.word	0x40011400
 80024e8:	40010400 	.word	0x40010400

080024ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	460b      	mov	r3, r1
 80024f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	887b      	ldrh	r3, [r7, #2]
 80024fe:	4013      	ands	r3, r2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d002      	beq.n	800250a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002504:	2301      	movs	r3, #1
 8002506:	73fb      	strb	r3, [r7, #15]
 8002508:	e001      	b.n	800250e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800250a:	2300      	movs	r3, #0
 800250c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800250e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002510:	4618      	mov	r0, r3
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	bc80      	pop	{r7}
 8002518:	4770      	bx	lr

0800251a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
 8002522:	460b      	mov	r3, r1
 8002524:	807b      	strh	r3, [r7, #2]
 8002526:	4613      	mov	r3, r2
 8002528:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800252a:	787b      	ldrb	r3, [r7, #1]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002530:	887a      	ldrh	r2, [r7, #2]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002536:	e003      	b.n	8002540 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002538:	887b      	ldrh	r3, [r7, #2]
 800253a:	041a      	lsls	r2, r3, #16
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	611a      	str	r2, [r3, #16]
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	bc80      	pop	{r7}
 8002548:	4770      	bx	lr
	...

0800254c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002556:	4b08      	ldr	r3, [pc, #32]	; (8002578 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002558:	695a      	ldr	r2, [r3, #20]
 800255a:	88fb      	ldrh	r3, [r7, #6]
 800255c:	4013      	ands	r3, r2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d006      	beq.n	8002570 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002562:	4a05      	ldr	r2, [pc, #20]	; (8002578 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002564:	88fb      	ldrh	r3, [r7, #6]
 8002566:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002568:	88fb      	ldrh	r3, [r7, #6]
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff fb76 	bl	8001c5c <HAL_GPIO_EXTI_Callback>
  }
}
 8002570:	bf00      	nop
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40010400 	.word	0x40010400

0800257c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e11f      	b.n	80027ce <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d106      	bne.n	80025a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7ff fbe0 	bl	8001d68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2224      	movs	r2, #36	; 0x24
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 0201 	bic.w	r2, r2, #1
 80025be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025e0:	f001 f824 	bl	800362c <HAL_RCC_GetPCLK1Freq>
 80025e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	4a7b      	ldr	r2, [pc, #492]	; (80027d8 <HAL_I2C_Init+0x25c>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d807      	bhi.n	8002600 <HAL_I2C_Init+0x84>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4a7a      	ldr	r2, [pc, #488]	; (80027dc <HAL_I2C_Init+0x260>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	bf94      	ite	ls
 80025f8:	2301      	movls	r3, #1
 80025fa:	2300      	movhi	r3, #0
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	e006      	b.n	800260e <HAL_I2C_Init+0x92>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4a77      	ldr	r2, [pc, #476]	; (80027e0 <HAL_I2C_Init+0x264>)
 8002604:	4293      	cmp	r3, r2
 8002606:	bf94      	ite	ls
 8002608:	2301      	movls	r3, #1
 800260a:	2300      	movhi	r3, #0
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e0db      	b.n	80027ce <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	4a72      	ldr	r2, [pc, #456]	; (80027e4 <HAL_I2C_Init+0x268>)
 800261a:	fba2 2303 	umull	r2, r3, r2, r3
 800261e:	0c9b      	lsrs	r3, r3, #18
 8002620:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	430a      	orrs	r2, r1
 8002634:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	4a64      	ldr	r2, [pc, #400]	; (80027d8 <HAL_I2C_Init+0x25c>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d802      	bhi.n	8002650 <HAL_I2C_Init+0xd4>
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	3301      	adds	r3, #1
 800264e:	e009      	b.n	8002664 <HAL_I2C_Init+0xe8>
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002656:	fb02 f303 	mul.w	r3, r2, r3
 800265a:	4a63      	ldr	r2, [pc, #396]	; (80027e8 <HAL_I2C_Init+0x26c>)
 800265c:	fba2 2303 	umull	r2, r3, r2, r3
 8002660:	099b      	lsrs	r3, r3, #6
 8002662:	3301      	adds	r3, #1
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	6812      	ldr	r2, [r2, #0]
 8002668:	430b      	orrs	r3, r1
 800266a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002676:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	4956      	ldr	r1, [pc, #344]	; (80027d8 <HAL_I2C_Init+0x25c>)
 8002680:	428b      	cmp	r3, r1
 8002682:	d80d      	bhi.n	80026a0 <HAL_I2C_Init+0x124>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	1e59      	subs	r1, r3, #1
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002692:	3301      	adds	r3, #1
 8002694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002698:	2b04      	cmp	r3, #4
 800269a:	bf38      	it	cc
 800269c:	2304      	movcc	r3, #4
 800269e:	e04f      	b.n	8002740 <HAL_I2C_Init+0x1c4>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d111      	bne.n	80026cc <HAL_I2C_Init+0x150>
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	1e58      	subs	r0, r3, #1
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6859      	ldr	r1, [r3, #4]
 80026b0:	460b      	mov	r3, r1
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	440b      	add	r3, r1
 80026b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ba:	3301      	adds	r3, #1
 80026bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	bf0c      	ite	eq
 80026c4:	2301      	moveq	r3, #1
 80026c6:	2300      	movne	r3, #0
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	e012      	b.n	80026f2 <HAL_I2C_Init+0x176>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	1e58      	subs	r0, r3, #1
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6859      	ldr	r1, [r3, #4]
 80026d4:	460b      	mov	r3, r1
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	0099      	lsls	r1, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	fbb0 f3f3 	udiv	r3, r0, r3
 80026e2:	3301      	adds	r3, #1
 80026e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	bf0c      	ite	eq
 80026ec:	2301      	moveq	r3, #1
 80026ee:	2300      	movne	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <HAL_I2C_Init+0x17e>
 80026f6:	2301      	movs	r3, #1
 80026f8:	e022      	b.n	8002740 <HAL_I2C_Init+0x1c4>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10e      	bne.n	8002720 <HAL_I2C_Init+0x1a4>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	1e58      	subs	r0, r3, #1
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6859      	ldr	r1, [r3, #4]
 800270a:	460b      	mov	r3, r1
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	440b      	add	r3, r1
 8002710:	fbb0 f3f3 	udiv	r3, r0, r3
 8002714:	3301      	adds	r3, #1
 8002716:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800271a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800271e:	e00f      	b.n	8002740 <HAL_I2C_Init+0x1c4>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	1e58      	subs	r0, r3, #1
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6859      	ldr	r1, [r3, #4]
 8002728:	460b      	mov	r3, r1
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	0099      	lsls	r1, r3, #2
 8002730:	440b      	add	r3, r1
 8002732:	fbb0 f3f3 	udiv	r3, r0, r3
 8002736:	3301      	adds	r3, #1
 8002738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800273c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002740:	6879      	ldr	r1, [r7, #4]
 8002742:	6809      	ldr	r1, [r1, #0]
 8002744:	4313      	orrs	r3, r2
 8002746:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69da      	ldr	r2, [r3, #28]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	431a      	orrs	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800276e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6911      	ldr	r1, [r2, #16]
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	68d2      	ldr	r2, [r2, #12]
 800277a:	4311      	orrs	r1, r2
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6812      	ldr	r2, [r2, #0]
 8002780:	430b      	orrs	r3, r1
 8002782:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	695a      	ldr	r2, [r3, #20]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	431a      	orrs	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	430a      	orrs	r2, r1
 800279e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0201 	orr.w	r2, r2, #1
 80027ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2220      	movs	r2, #32
 80027ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	000186a0 	.word	0x000186a0
 80027dc:	001e847f 	.word	0x001e847f
 80027e0:	003d08ff 	.word	0x003d08ff
 80027e4:	431bde83 	.word	0x431bde83
 80027e8:	10624dd3 	.word	0x10624dd3

080027ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b088      	sub	sp, #32
 80027f0:	af02      	add	r7, sp, #8
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	607a      	str	r2, [r7, #4]
 80027f6:	461a      	mov	r2, r3
 80027f8:	460b      	mov	r3, r1
 80027fa:	817b      	strh	r3, [r7, #10]
 80027fc:	4613      	mov	r3, r2
 80027fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002800:	f7ff fbe0 	bl	8001fc4 <HAL_GetTick>
 8002804:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b20      	cmp	r3, #32
 8002810:	f040 80e0 	bne.w	80029d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	2319      	movs	r3, #25
 800281a:	2201      	movs	r2, #1
 800281c:	4970      	ldr	r1, [pc, #448]	; (80029e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 f964 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800282a:	2302      	movs	r3, #2
 800282c:	e0d3      	b.n	80029d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002834:	2b01      	cmp	r3, #1
 8002836:	d101      	bne.n	800283c <HAL_I2C_Master_Transmit+0x50>
 8002838:	2302      	movs	r3, #2
 800283a:	e0cc      	b.n	80029d6 <HAL_I2C_Master_Transmit+0x1ea>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b01      	cmp	r3, #1
 8002850:	d007      	beq.n	8002862 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f042 0201 	orr.w	r2, r2, #1
 8002860:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002870:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2221      	movs	r2, #33	; 0x21
 8002876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2210      	movs	r2, #16
 800287e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	893a      	ldrh	r2, [r7, #8]
 8002892:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002898:	b29a      	uxth	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	4a50      	ldr	r2, [pc, #320]	; (80029e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80028a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80028a4:	8979      	ldrh	r1, [r7, #10]
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	6a3a      	ldr	r2, [r7, #32]
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 f89c 	bl	80029e8 <I2C_MasterRequestWrite>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e08d      	b.n	80029d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ba:	2300      	movs	r3, #0
 80028bc:	613b      	str	r3, [r7, #16]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	613b      	str	r3, [r7, #16]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	613b      	str	r3, [r7, #16]
 80028ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80028d0:	e066      	b.n	80029a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	6a39      	ldr	r1, [r7, #32]
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 fa22 	bl	8002d20 <I2C_WaitOnTXEFlagUntilTimeout>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00d      	beq.n	80028fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	d107      	bne.n	80028fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e06b      	b.n	80029d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	781a      	ldrb	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	1c5a      	adds	r2, r3, #1
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002918:	b29b      	uxth	r3, r3
 800291a:	3b01      	subs	r3, #1
 800291c:	b29a      	uxth	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002926:	3b01      	subs	r3, #1
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b04      	cmp	r3, #4
 800293a:	d11b      	bne.n	8002974 <HAL_I2C_Master_Transmit+0x188>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002940:	2b00      	cmp	r3, #0
 8002942:	d017      	beq.n	8002974 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002948:	781a      	ldrb	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002954:	1c5a      	adds	r2, r3, #1
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800295e:	b29b      	uxth	r3, r3
 8002960:	3b01      	subs	r3, #1
 8002962:	b29a      	uxth	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800296c:	3b01      	subs	r3, #1
 800296e:	b29a      	uxth	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002974:	697a      	ldr	r2, [r7, #20]
 8002976:	6a39      	ldr	r1, [r7, #32]
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f000 fa19 	bl	8002db0 <I2C_WaitOnBTFFlagUntilTimeout>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00d      	beq.n	80029a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002988:	2b04      	cmp	r3, #4
 800298a:	d107      	bne.n	800299c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800299a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e01a      	b.n	80029d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d194      	bne.n	80028d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2220      	movs	r2, #32
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029d0:	2300      	movs	r3, #0
 80029d2:	e000      	b.n	80029d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80029d4:	2302      	movs	r3, #2
  }
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3718      	adds	r7, #24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	00100002 	.word	0x00100002
 80029e4:	ffff0000 	.word	0xffff0000

080029e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b088      	sub	sp, #32
 80029ec:	af02      	add	r7, sp, #8
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	607a      	str	r2, [r7, #4]
 80029f2:	603b      	str	r3, [r7, #0]
 80029f4:	460b      	mov	r3, r1
 80029f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	2b08      	cmp	r3, #8
 8002a02:	d006      	beq.n	8002a12 <I2C_MasterRequestWrite+0x2a>
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d003      	beq.n	8002a12 <I2C_MasterRequestWrite+0x2a>
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a10:	d108      	bne.n	8002a24 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	e00b      	b.n	8002a3c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a28:	2b12      	cmp	r3, #18
 8002a2a:	d107      	bne.n	8002a3c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a3a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f000 f84f 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00d      	beq.n	8002a70 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a62:	d103      	bne.n	8002a6c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e035      	b.n	8002adc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a78:	d108      	bne.n	8002a8c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a7a:	897b      	ldrh	r3, [r7, #10]
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	461a      	mov	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a88:	611a      	str	r2, [r3, #16]
 8002a8a:	e01b      	b.n	8002ac4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a8c:	897b      	ldrh	r3, [r7, #10]
 8002a8e:	11db      	asrs	r3, r3, #7
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	f003 0306 	and.w	r3, r3, #6
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	f063 030f 	orn	r3, r3, #15
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	490e      	ldr	r1, [pc, #56]	; (8002ae4 <I2C_MasterRequestWrite+0xfc>)
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f000 f898 	bl	8002be0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e010      	b.n	8002adc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002aba:	897b      	ldrh	r3, [r7, #10]
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	4907      	ldr	r1, [pc, #28]	; (8002ae8 <I2C_MasterRequestWrite+0x100>)
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 f888 	bl	8002be0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e000      	b.n	8002adc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3718      	adds	r7, #24
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	00010008 	.word	0x00010008
 8002ae8:	00010002 	.word	0x00010002

08002aec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	603b      	str	r3, [r7, #0]
 8002af8:	4613      	mov	r3, r2
 8002afa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002afc:	e048      	b.n	8002b90 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b04:	d044      	beq.n	8002b90 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b06:	f7ff fa5d 	bl	8001fc4 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d302      	bcc.n	8002b1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d139      	bne.n	8002b90 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	0c1b      	lsrs	r3, r3, #16
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d10d      	bne.n	8002b42 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	43da      	mvns	r2, r3
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	4013      	ands	r3, r2
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	bf0c      	ite	eq
 8002b38:	2301      	moveq	r3, #1
 8002b3a:	2300      	movne	r3, #0
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	461a      	mov	r2, r3
 8002b40:	e00c      	b.n	8002b5c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	43da      	mvns	r2, r3
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	bf0c      	ite	eq
 8002b54:	2301      	moveq	r3, #1
 8002b56:	2300      	movne	r3, #0
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	79fb      	ldrb	r3, [r7, #7]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d116      	bne.n	8002b90 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	f043 0220 	orr.w	r2, r3, #32
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e023      	b.n	8002bd8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	0c1b      	lsrs	r3, r3, #16
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d10d      	bne.n	8002bb6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	43da      	mvns	r2, r3
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	bf0c      	ite	eq
 8002bac:	2301      	moveq	r3, #1
 8002bae:	2300      	movne	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	e00c      	b.n	8002bd0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	43da      	mvns	r2, r3
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	bf0c      	ite	eq
 8002bc8:	2301      	moveq	r3, #1
 8002bca:	2300      	movne	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	461a      	mov	r2, r3
 8002bd0:	79fb      	ldrb	r3, [r7, #7]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d093      	beq.n	8002afe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
 8002bec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bee:	e071      	b.n	8002cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bfe:	d123      	bne.n	8002c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c0e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2220      	movs	r2, #32
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	f043 0204 	orr.w	r2, r3, #4
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e067      	b.n	8002d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4e:	d041      	beq.n	8002cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c50:	f7ff f9b8 	bl	8001fc4 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d302      	bcc.n	8002c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d136      	bne.n	8002cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	0c1b      	lsrs	r3, r3, #16
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d10c      	bne.n	8002c8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	43da      	mvns	r2, r3
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	bf14      	ite	ne
 8002c82:	2301      	movne	r3, #1
 8002c84:	2300      	moveq	r3, #0
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	e00b      	b.n	8002ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	43da      	mvns	r2, r3
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	4013      	ands	r3, r2
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	bf14      	ite	ne
 8002c9c:	2301      	movne	r3, #1
 8002c9e:	2300      	moveq	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d016      	beq.n	8002cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc0:	f043 0220 	orr.w	r2, r3, #32
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e021      	b.n	8002d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	0c1b      	lsrs	r3, r3, #16
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d10c      	bne.n	8002cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	43da      	mvns	r2, r3
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	bf14      	ite	ne
 8002cf0:	2301      	movne	r3, #1
 8002cf2:	2300      	moveq	r3, #0
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	e00b      	b.n	8002d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	43da      	mvns	r2, r3
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	4013      	ands	r3, r2
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	bf14      	ite	ne
 8002d0a:	2301      	movne	r3, #1
 8002d0c:	2300      	moveq	r3, #0
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f47f af6d 	bne.w	8002bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d2c:	e034      	b.n	8002d98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 f886 	bl	8002e40 <I2C_IsAcknowledgeFailed>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e034      	b.n	8002da8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d44:	d028      	beq.n	8002d98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d46:	f7ff f93d 	bl	8001fc4 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d302      	bcc.n	8002d5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d11d      	bne.n	8002d98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d66:	2b80      	cmp	r3, #128	; 0x80
 8002d68:	d016      	beq.n	8002d98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2220      	movs	r2, #32
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d84:	f043 0220 	orr.w	r2, r3, #32
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e007      	b.n	8002da8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da2:	2b80      	cmp	r3, #128	; 0x80
 8002da4:	d1c3      	bne.n	8002d2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dbc:	e034      	b.n	8002e28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 f83e 	bl	8002e40 <I2C_IsAcknowledgeFailed>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e034      	b.n	8002e38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd4:	d028      	beq.n	8002e28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dd6:	f7ff f8f5 	bl	8001fc4 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	68ba      	ldr	r2, [r7, #8]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d302      	bcc.n	8002dec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d11d      	bne.n	8002e28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	f003 0304 	and.w	r3, r3, #4
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d016      	beq.n	8002e28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2220      	movs	r2, #32
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e14:	f043 0220 	orr.w	r2, r3, #32
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e007      	b.n	8002e38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	f003 0304 	and.w	r3, r3, #4
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	d1c3      	bne.n	8002dbe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e56:	d11b      	bne.n	8002e90 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e60:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7c:	f043 0204 	orr.w	r2, r3, #4
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e000      	b.n	8002e92 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr

08002e9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e26c      	b.n	8003388 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f000 8087 	beq.w	8002fca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ebc:	4b92      	ldr	r3, [pc, #584]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f003 030c 	and.w	r3, r3, #12
 8002ec4:	2b04      	cmp	r3, #4
 8002ec6:	d00c      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ec8:	4b8f      	ldr	r3, [pc, #572]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f003 030c 	and.w	r3, r3, #12
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	d112      	bne.n	8002efa <HAL_RCC_OscConfig+0x5e>
 8002ed4:	4b8c      	ldr	r3, [pc, #560]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ee0:	d10b      	bne.n	8002efa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee2:	4b89      	ldr	r3, [pc, #548]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d06c      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x12c>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d168      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e246      	b.n	8003388 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f02:	d106      	bne.n	8002f12 <HAL_RCC_OscConfig+0x76>
 8002f04:	4b80      	ldr	r3, [pc, #512]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a7f      	ldr	r2, [pc, #508]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f0e:	6013      	str	r3, [r2, #0]
 8002f10:	e02e      	b.n	8002f70 <HAL_RCC_OscConfig+0xd4>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10c      	bne.n	8002f34 <HAL_RCC_OscConfig+0x98>
 8002f1a:	4b7b      	ldr	r3, [pc, #492]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a7a      	ldr	r2, [pc, #488]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002f20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f24:	6013      	str	r3, [r2, #0]
 8002f26:	4b78      	ldr	r3, [pc, #480]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a77      	ldr	r2, [pc, #476]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002f2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	e01d      	b.n	8002f70 <HAL_RCC_OscConfig+0xd4>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f3c:	d10c      	bne.n	8002f58 <HAL_RCC_OscConfig+0xbc>
 8002f3e:	4b72      	ldr	r3, [pc, #456]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a71      	ldr	r2, [pc, #452]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002f44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	4b6f      	ldr	r3, [pc, #444]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a6e      	ldr	r2, [pc, #440]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	e00b      	b.n	8002f70 <HAL_RCC_OscConfig+0xd4>
 8002f58:	4b6b      	ldr	r3, [pc, #428]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a6a      	ldr	r2, [pc, #424]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002f5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f62:	6013      	str	r3, [r2, #0]
 8002f64:	4b68      	ldr	r3, [pc, #416]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a67      	ldr	r2, [pc, #412]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002f6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d013      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f78:	f7ff f824 	bl	8001fc4 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f80:	f7ff f820 	bl	8001fc4 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b64      	cmp	r3, #100	; 0x64
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e1fa      	b.n	8003388 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f92:	4b5d      	ldr	r3, [pc, #372]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d0f0      	beq.n	8002f80 <HAL_RCC_OscConfig+0xe4>
 8002f9e:	e014      	b.n	8002fca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa0:	f7ff f810 	bl	8001fc4 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fa8:	f7ff f80c 	bl	8001fc4 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b64      	cmp	r3, #100	; 0x64
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e1e6      	b.n	8003388 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fba:	4b53      	ldr	r3, [pc, #332]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x10c>
 8002fc6:	e000      	b.n	8002fca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d063      	beq.n	800309e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fd6:	4b4c      	ldr	r3, [pc, #304]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f003 030c 	and.w	r3, r3, #12
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00b      	beq.n	8002ffa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002fe2:	4b49      	ldr	r3, [pc, #292]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f003 030c 	and.w	r3, r3, #12
 8002fea:	2b08      	cmp	r3, #8
 8002fec:	d11c      	bne.n	8003028 <HAL_RCC_OscConfig+0x18c>
 8002fee:	4b46      	ldr	r3, [pc, #280]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d116      	bne.n	8003028 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ffa:	4b43      	ldr	r3, [pc, #268]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d005      	beq.n	8003012 <HAL_RCC_OscConfig+0x176>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d001      	beq.n	8003012 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e1ba      	b.n	8003388 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003012:	4b3d      	ldr	r3, [pc, #244]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	4939      	ldr	r1, [pc, #228]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8003022:	4313      	orrs	r3, r2
 8003024:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003026:	e03a      	b.n	800309e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d020      	beq.n	8003072 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003030:	4b36      	ldr	r3, [pc, #216]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8003032:	2201      	movs	r2, #1
 8003034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003036:	f7fe ffc5 	bl	8001fc4 <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800303e:	f7fe ffc1 	bl	8001fc4 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e19b      	b.n	8003388 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003050:	4b2d      	ldr	r3, [pc, #180]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0f0      	beq.n	800303e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800305c:	4b2a      	ldr	r3, [pc, #168]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	4927      	ldr	r1, [pc, #156]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 800306c:	4313      	orrs	r3, r2
 800306e:	600b      	str	r3, [r1, #0]
 8003070:	e015      	b.n	800309e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003072:	4b26      	ldr	r3, [pc, #152]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003078:	f7fe ffa4 	bl	8001fc4 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003080:	f7fe ffa0 	bl	8001fc4 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e17a      	b.n	8003388 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003092:	4b1d      	ldr	r3, [pc, #116]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1f0      	bne.n	8003080 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0308 	and.w	r3, r3, #8
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d03a      	beq.n	8003120 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d019      	beq.n	80030e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030b2:	4b17      	ldr	r3, [pc, #92]	; (8003110 <HAL_RCC_OscConfig+0x274>)
 80030b4:	2201      	movs	r2, #1
 80030b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b8:	f7fe ff84 	bl	8001fc4 <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030c0:	f7fe ff80 	bl	8001fc4 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e15a      	b.n	8003388 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030d2:	4b0d      	ldr	r3, [pc, #52]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 80030d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0f0      	beq.n	80030c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030de:	2001      	movs	r0, #1
 80030e0:	f000 fab8 	bl	8003654 <RCC_Delay>
 80030e4:	e01c      	b.n	8003120 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030e6:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <HAL_RCC_OscConfig+0x274>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ec:	f7fe ff6a 	bl	8001fc4 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030f2:	e00f      	b.n	8003114 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030f4:	f7fe ff66 	bl	8001fc4 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d908      	bls.n	8003114 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e140      	b.n	8003388 <HAL_RCC_OscConfig+0x4ec>
 8003106:	bf00      	nop
 8003108:	40021000 	.word	0x40021000
 800310c:	42420000 	.word	0x42420000
 8003110:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003114:	4b9e      	ldr	r3, [pc, #632]	; (8003390 <HAL_RCC_OscConfig+0x4f4>)
 8003116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1e9      	bne.n	80030f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 80a6 	beq.w	800327a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800312e:	2300      	movs	r3, #0
 8003130:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003132:	4b97      	ldr	r3, [pc, #604]	; (8003390 <HAL_RCC_OscConfig+0x4f4>)
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10d      	bne.n	800315a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800313e:	4b94      	ldr	r3, [pc, #592]	; (8003390 <HAL_RCC_OscConfig+0x4f4>)
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	4a93      	ldr	r2, [pc, #588]	; (8003390 <HAL_RCC_OscConfig+0x4f4>)
 8003144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003148:	61d3      	str	r3, [r2, #28]
 800314a:	4b91      	ldr	r3, [pc, #580]	; (8003390 <HAL_RCC_OscConfig+0x4f4>)
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003152:	60bb      	str	r3, [r7, #8]
 8003154:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003156:	2301      	movs	r3, #1
 8003158:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800315a:	4b8e      	ldr	r3, [pc, #568]	; (8003394 <HAL_RCC_OscConfig+0x4f8>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003162:	2b00      	cmp	r3, #0
 8003164:	d118      	bne.n	8003198 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003166:	4b8b      	ldr	r3, [pc, #556]	; (8003394 <HAL_RCC_OscConfig+0x4f8>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a8a      	ldr	r2, [pc, #552]	; (8003394 <HAL_RCC_OscConfig+0x4f8>)
 800316c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003170:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003172:	f7fe ff27 	bl	8001fc4 <HAL_GetTick>
 8003176:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003178:	e008      	b.n	800318c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800317a:	f7fe ff23 	bl	8001fc4 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b64      	cmp	r3, #100	; 0x64
 8003186:	d901      	bls.n	800318c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e0fd      	b.n	8003388 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800318c:	4b81      	ldr	r3, [pc, #516]	; (8003394 <HAL_RCC_OscConfig+0x4f8>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003194:	2b00      	cmp	r3, #0
 8003196:	d0f0      	beq.n	800317a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d106      	bne.n	80031ae <HAL_RCC_OscConfig+0x312>
 80031a0:	4b7b      	ldr	r3, [pc, #492]	; (8003390 <HAL_RCC_OscConfig+0x4f4>)
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	4a7a      	ldr	r2, [pc, #488]	; (8003390 <HAL_RCC_OscConfig+0x4f4>)
 80031a6:	f043 0301 	orr.w	r3, r3, #1
 80031aa:	6213      	str	r3, [r2, #32]
 80031ac:	e02d      	b.n	800320a <HAL_RCC_OscConfig+0x36e>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10c      	bne.n	80031d0 <HAL_RCC_OscConfig+0x334>
 80031b6:	4b76      	ldr	r3, [pc, #472]	; (8003390 <HAL_RCC_OscConfig+0x4f4>)
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	4a75      	ldr	r2, [pc, #468]	; (8003390 <HAL_RCC_OscConfig+0x4f4>)
 80031bc:	f023 0301 	bic.w	r3, r3, #1
 80031c0:	6213      	str	r3, [r2, #32]
 80031c2:	4b73      	ldr	r3, [pc, #460]	; (8003390 <HAL_RCC_OscConfig+0x4f4>)
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	4a72      	ldr	r2, [pc, #456]	; (8003390 <HAL_RCC_OscConfig+0x4f4>)
 80031c8:	f023 0304 	bic.w	r3, r3, #4
 80031cc:	6213      	str	r3, [r2, #32]
 80031ce:	e01c      	b.n	800320a <HAL_RCC_OscConfig+0x36e>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	2b05      	cmp	r3, #5
 80031d6:	d10c      	bne.n	80031f2 <HAL_RCC_OscConfig+0x356>
 80031d8:	4b6d      	ldr	r3, [pc, #436]	; (8003390 <HAL_RCC_OscConfig+0x4f4>)
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	4a6c      	ldr	r2, [pc, #432]	; (8003390 <HAL_RCC_OscConfig+0x4f4>)
 80031de:	f043 0304 	orr.w	r3, r3, #4
 80031e2:	6213      	str	r3, [r2, #32]
 80031e4:	4b6a      	ldr	r3, [pc, #424]	; (8003390 <HAL_RCC_OscConfig+0x4f4>)
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	4a69      	ldr	r2, [pc, #420]	; (8003390 <HAL_RCC_OscConfig+0x4f4>)
 80031ea:	f043 0301 	orr.w	r3, r3, #1
 80031ee:	6213      	str	r3, [r2, #32]
 80031f0:	e00b      	b.n	800320a <HAL_RCC_OscConfig+0x36e>
 80031f2:	4b67      	ldr	r3, [pc, #412]	; (8003390 <HAL_RCC_OscConfig+0x4f4>)
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	4a66      	ldr	r2, [pc, #408]	; (8003390 <HAL_RCC_OscConfig+0x4f4>)
 80031f8:	f023 0301 	bic.w	r3, r3, #1
 80031fc:	6213      	str	r3, [r2, #32]
 80031fe:	4b64      	ldr	r3, [pc, #400]	; (8003390 <HAL_RCC_OscConfig+0x4f4>)
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	4a63      	ldr	r2, [pc, #396]	; (8003390 <HAL_RCC_OscConfig+0x4f4>)
 8003204:	f023 0304 	bic.w	r3, r3, #4
 8003208:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d015      	beq.n	800323e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003212:	f7fe fed7 	bl	8001fc4 <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003218:	e00a      	b.n	8003230 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800321a:	f7fe fed3 	bl	8001fc4 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	f241 3288 	movw	r2, #5000	; 0x1388
 8003228:	4293      	cmp	r3, r2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e0ab      	b.n	8003388 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003230:	4b57      	ldr	r3, [pc, #348]	; (8003390 <HAL_RCC_OscConfig+0x4f4>)
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0ee      	beq.n	800321a <HAL_RCC_OscConfig+0x37e>
 800323c:	e014      	b.n	8003268 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800323e:	f7fe fec1 	bl	8001fc4 <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003244:	e00a      	b.n	800325c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003246:	f7fe febd 	bl	8001fc4 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	f241 3288 	movw	r2, #5000	; 0x1388
 8003254:	4293      	cmp	r3, r2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e095      	b.n	8003388 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800325c:	4b4c      	ldr	r3, [pc, #304]	; (8003390 <HAL_RCC_OscConfig+0x4f4>)
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1ee      	bne.n	8003246 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003268:	7dfb      	ldrb	r3, [r7, #23]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d105      	bne.n	800327a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800326e:	4b48      	ldr	r3, [pc, #288]	; (8003390 <HAL_RCC_OscConfig+0x4f4>)
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	4a47      	ldr	r2, [pc, #284]	; (8003390 <HAL_RCC_OscConfig+0x4f4>)
 8003274:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003278:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 8081 	beq.w	8003386 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003284:	4b42      	ldr	r3, [pc, #264]	; (8003390 <HAL_RCC_OscConfig+0x4f4>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f003 030c 	and.w	r3, r3, #12
 800328c:	2b08      	cmp	r3, #8
 800328e:	d061      	beq.n	8003354 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	2b02      	cmp	r3, #2
 8003296:	d146      	bne.n	8003326 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003298:	4b3f      	ldr	r3, [pc, #252]	; (8003398 <HAL_RCC_OscConfig+0x4fc>)
 800329a:	2200      	movs	r2, #0
 800329c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329e:	f7fe fe91 	bl	8001fc4 <HAL_GetTick>
 80032a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032a4:	e008      	b.n	80032b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032a6:	f7fe fe8d 	bl	8001fc4 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e067      	b.n	8003388 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032b8:	4b35      	ldr	r3, [pc, #212]	; (8003390 <HAL_RCC_OscConfig+0x4f4>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1f0      	bne.n	80032a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032cc:	d108      	bne.n	80032e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032ce:	4b30      	ldr	r3, [pc, #192]	; (8003390 <HAL_RCC_OscConfig+0x4f4>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	492d      	ldr	r1, [pc, #180]	; (8003390 <HAL_RCC_OscConfig+0x4f4>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032e0:	4b2b      	ldr	r3, [pc, #172]	; (8003390 <HAL_RCC_OscConfig+0x4f4>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a19      	ldr	r1, [r3, #32]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	430b      	orrs	r3, r1
 80032f2:	4927      	ldr	r1, [pc, #156]	; (8003390 <HAL_RCC_OscConfig+0x4f4>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032f8:	4b27      	ldr	r3, [pc, #156]	; (8003398 <HAL_RCC_OscConfig+0x4fc>)
 80032fa:	2201      	movs	r2, #1
 80032fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fe:	f7fe fe61 	bl	8001fc4 <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003306:	f7fe fe5d 	bl	8001fc4 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e037      	b.n	8003388 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003318:	4b1d      	ldr	r3, [pc, #116]	; (8003390 <HAL_RCC_OscConfig+0x4f4>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0f0      	beq.n	8003306 <HAL_RCC_OscConfig+0x46a>
 8003324:	e02f      	b.n	8003386 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003326:	4b1c      	ldr	r3, [pc, #112]	; (8003398 <HAL_RCC_OscConfig+0x4fc>)
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332c:	f7fe fe4a 	bl	8001fc4 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003334:	f7fe fe46 	bl	8001fc4 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e020      	b.n	8003388 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003346:	4b12      	ldr	r3, [pc, #72]	; (8003390 <HAL_RCC_OscConfig+0x4f4>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1f0      	bne.n	8003334 <HAL_RCC_OscConfig+0x498>
 8003352:	e018      	b.n	8003386 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	69db      	ldr	r3, [r3, #28]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d101      	bne.n	8003360 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e013      	b.n	8003388 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003360:	4b0b      	ldr	r3, [pc, #44]	; (8003390 <HAL_RCC_OscConfig+0x4f4>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	429a      	cmp	r2, r3
 8003372:	d106      	bne.n	8003382 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800337e:	429a      	cmp	r2, r3
 8003380:	d001      	beq.n	8003386 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e000      	b.n	8003388 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003386:	2300      	movs	r3, #0
}
 8003388:	4618      	mov	r0, r3
 800338a:	3718      	adds	r7, #24
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40021000 	.word	0x40021000
 8003394:	40007000 	.word	0x40007000
 8003398:	42420060 	.word	0x42420060

0800339c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e0d0      	b.n	8003552 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033b0:	4b6a      	ldr	r3, [pc, #424]	; (800355c <HAL_RCC_ClockConfig+0x1c0>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0307 	and.w	r3, r3, #7
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d910      	bls.n	80033e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033be:	4b67      	ldr	r3, [pc, #412]	; (800355c <HAL_RCC_ClockConfig+0x1c0>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f023 0207 	bic.w	r2, r3, #7
 80033c6:	4965      	ldr	r1, [pc, #404]	; (800355c <HAL_RCC_ClockConfig+0x1c0>)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ce:	4b63      	ldr	r3, [pc, #396]	; (800355c <HAL_RCC_ClockConfig+0x1c0>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0307 	and.w	r3, r3, #7
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d001      	beq.n	80033e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e0b8      	b.n	8003552 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d020      	beq.n	800342e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d005      	beq.n	8003404 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033f8:	4b59      	ldr	r3, [pc, #356]	; (8003560 <HAL_RCC_ClockConfig+0x1c4>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	4a58      	ldr	r2, [pc, #352]	; (8003560 <HAL_RCC_ClockConfig+0x1c4>)
 80033fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003402:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0308 	and.w	r3, r3, #8
 800340c:	2b00      	cmp	r3, #0
 800340e:	d005      	beq.n	800341c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003410:	4b53      	ldr	r3, [pc, #332]	; (8003560 <HAL_RCC_ClockConfig+0x1c4>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	4a52      	ldr	r2, [pc, #328]	; (8003560 <HAL_RCC_ClockConfig+0x1c4>)
 8003416:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800341a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800341c:	4b50      	ldr	r3, [pc, #320]	; (8003560 <HAL_RCC_ClockConfig+0x1c4>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	494d      	ldr	r1, [pc, #308]	; (8003560 <HAL_RCC_ClockConfig+0x1c4>)
 800342a:	4313      	orrs	r3, r2
 800342c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d040      	beq.n	80034bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d107      	bne.n	8003452 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003442:	4b47      	ldr	r3, [pc, #284]	; (8003560 <HAL_RCC_ClockConfig+0x1c4>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d115      	bne.n	800347a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e07f      	b.n	8003552 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	2b02      	cmp	r3, #2
 8003458:	d107      	bne.n	800346a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800345a:	4b41      	ldr	r3, [pc, #260]	; (8003560 <HAL_RCC_ClockConfig+0x1c4>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d109      	bne.n	800347a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e073      	b.n	8003552 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800346a:	4b3d      	ldr	r3, [pc, #244]	; (8003560 <HAL_RCC_ClockConfig+0x1c4>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e06b      	b.n	8003552 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800347a:	4b39      	ldr	r3, [pc, #228]	; (8003560 <HAL_RCC_ClockConfig+0x1c4>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f023 0203 	bic.w	r2, r3, #3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	4936      	ldr	r1, [pc, #216]	; (8003560 <HAL_RCC_ClockConfig+0x1c4>)
 8003488:	4313      	orrs	r3, r2
 800348a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800348c:	f7fe fd9a 	bl	8001fc4 <HAL_GetTick>
 8003490:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003492:	e00a      	b.n	80034aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003494:	f7fe fd96 	bl	8001fc4 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e053      	b.n	8003552 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034aa:	4b2d      	ldr	r3, [pc, #180]	; (8003560 <HAL_RCC_ClockConfig+0x1c4>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f003 020c 	and.w	r2, r3, #12
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d1eb      	bne.n	8003494 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034bc:	4b27      	ldr	r3, [pc, #156]	; (800355c <HAL_RCC_ClockConfig+0x1c0>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0307 	and.w	r3, r3, #7
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d210      	bcs.n	80034ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ca:	4b24      	ldr	r3, [pc, #144]	; (800355c <HAL_RCC_ClockConfig+0x1c0>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f023 0207 	bic.w	r2, r3, #7
 80034d2:	4922      	ldr	r1, [pc, #136]	; (800355c <HAL_RCC_ClockConfig+0x1c0>)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034da:	4b20      	ldr	r3, [pc, #128]	; (800355c <HAL_RCC_ClockConfig+0x1c0>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d001      	beq.n	80034ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e032      	b.n	8003552 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d008      	beq.n	800350a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034f8:	4b19      	ldr	r3, [pc, #100]	; (8003560 <HAL_RCC_ClockConfig+0x1c4>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	4916      	ldr	r1, [pc, #88]	; (8003560 <HAL_RCC_ClockConfig+0x1c4>)
 8003506:	4313      	orrs	r3, r2
 8003508:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	2b00      	cmp	r3, #0
 8003514:	d009      	beq.n	800352a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003516:	4b12      	ldr	r3, [pc, #72]	; (8003560 <HAL_RCC_ClockConfig+0x1c4>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	490e      	ldr	r1, [pc, #56]	; (8003560 <HAL_RCC_ClockConfig+0x1c4>)
 8003526:	4313      	orrs	r3, r2
 8003528:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800352a:	f000 f821 	bl	8003570 <HAL_RCC_GetSysClockFreq>
 800352e:	4601      	mov	r1, r0
 8003530:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <HAL_RCC_ClockConfig+0x1c4>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	091b      	lsrs	r3, r3, #4
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	4a0a      	ldr	r2, [pc, #40]	; (8003564 <HAL_RCC_ClockConfig+0x1c8>)
 800353c:	5cd3      	ldrb	r3, [r2, r3]
 800353e:	fa21 f303 	lsr.w	r3, r1, r3
 8003542:	4a09      	ldr	r2, [pc, #36]	; (8003568 <HAL_RCC_ClockConfig+0x1cc>)
 8003544:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003546:	4b09      	ldr	r3, [pc, #36]	; (800356c <HAL_RCC_ClockConfig+0x1d0>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f7fe fcf8 	bl	8001f40 <HAL_InitTick>

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	40022000 	.word	0x40022000
 8003560:	40021000 	.word	0x40021000
 8003564:	080071c0 	.word	0x080071c0
 8003568:	20000000 	.word	0x20000000
 800356c:	20000004 	.word	0x20000004

08003570 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003570:	b480      	push	{r7}
 8003572:	b087      	sub	sp, #28
 8003574:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003576:	2300      	movs	r3, #0
 8003578:	60fb      	str	r3, [r7, #12]
 800357a:	2300      	movs	r3, #0
 800357c:	60bb      	str	r3, [r7, #8]
 800357e:	2300      	movs	r3, #0
 8003580:	617b      	str	r3, [r7, #20]
 8003582:	2300      	movs	r3, #0
 8003584:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003586:	2300      	movs	r3, #0
 8003588:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800358a:	4b1e      	ldr	r3, [pc, #120]	; (8003604 <HAL_RCC_GetSysClockFreq+0x94>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f003 030c 	and.w	r3, r3, #12
 8003596:	2b04      	cmp	r3, #4
 8003598:	d002      	beq.n	80035a0 <HAL_RCC_GetSysClockFreq+0x30>
 800359a:	2b08      	cmp	r3, #8
 800359c:	d003      	beq.n	80035a6 <HAL_RCC_GetSysClockFreq+0x36>
 800359e:	e027      	b.n	80035f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035a0:	4b19      	ldr	r3, [pc, #100]	; (8003608 <HAL_RCC_GetSysClockFreq+0x98>)
 80035a2:	613b      	str	r3, [r7, #16]
      break;
 80035a4:	e027      	b.n	80035f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	0c9b      	lsrs	r3, r3, #18
 80035aa:	f003 030f 	and.w	r3, r3, #15
 80035ae:	4a17      	ldr	r2, [pc, #92]	; (800360c <HAL_RCC_GetSysClockFreq+0x9c>)
 80035b0:	5cd3      	ldrb	r3, [r2, r3]
 80035b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d010      	beq.n	80035e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035be:	4b11      	ldr	r3, [pc, #68]	; (8003604 <HAL_RCC_GetSysClockFreq+0x94>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	0c5b      	lsrs	r3, r3, #17
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	4a11      	ldr	r2, [pc, #68]	; (8003610 <HAL_RCC_GetSysClockFreq+0xa0>)
 80035ca:	5cd3      	ldrb	r3, [r2, r3]
 80035cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a0d      	ldr	r2, [pc, #52]	; (8003608 <HAL_RCC_GetSysClockFreq+0x98>)
 80035d2:	fb02 f203 	mul.w	r2, r2, r3
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035dc:	617b      	str	r3, [r7, #20]
 80035de:	e004      	b.n	80035ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a0c      	ldr	r2, [pc, #48]	; (8003614 <HAL_RCC_GetSysClockFreq+0xa4>)
 80035e4:	fb02 f303 	mul.w	r3, r2, r3
 80035e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	613b      	str	r3, [r7, #16]
      break;
 80035ee:	e002      	b.n	80035f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035f0:	4b05      	ldr	r3, [pc, #20]	; (8003608 <HAL_RCC_GetSysClockFreq+0x98>)
 80035f2:	613b      	str	r3, [r7, #16]
      break;
 80035f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035f6:	693b      	ldr	r3, [r7, #16]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	371c      	adds	r7, #28
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bc80      	pop	{r7}
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	40021000 	.word	0x40021000
 8003608:	007a1200 	.word	0x007a1200
 800360c:	080071d8 	.word	0x080071d8
 8003610:	080071e8 	.word	0x080071e8
 8003614:	003d0900 	.word	0x003d0900

08003618 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800361c:	4b02      	ldr	r3, [pc, #8]	; (8003628 <HAL_RCC_GetHCLKFreq+0x10>)
 800361e:	681b      	ldr	r3, [r3, #0]
}
 8003620:	4618      	mov	r0, r3
 8003622:	46bd      	mov	sp, r7
 8003624:	bc80      	pop	{r7}
 8003626:	4770      	bx	lr
 8003628:	20000000 	.word	0x20000000

0800362c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003630:	f7ff fff2 	bl	8003618 <HAL_RCC_GetHCLKFreq>
 8003634:	4601      	mov	r1, r0
 8003636:	4b05      	ldr	r3, [pc, #20]	; (800364c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	0a1b      	lsrs	r3, r3, #8
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	4a03      	ldr	r2, [pc, #12]	; (8003650 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003642:	5cd3      	ldrb	r3, [r2, r3]
 8003644:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003648:	4618      	mov	r0, r3
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40021000 	.word	0x40021000
 8003650:	080071d0 	.word	0x080071d0

08003654 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800365c:	4b0a      	ldr	r3, [pc, #40]	; (8003688 <RCC_Delay+0x34>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a0a      	ldr	r2, [pc, #40]	; (800368c <RCC_Delay+0x38>)
 8003662:	fba2 2303 	umull	r2, r3, r2, r3
 8003666:	0a5b      	lsrs	r3, r3, #9
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	fb02 f303 	mul.w	r3, r2, r3
 800366e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003670:	bf00      	nop
  }
  while (Delay --);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	1e5a      	subs	r2, r3, #1
 8003676:	60fa      	str	r2, [r7, #12]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1f9      	bne.n	8003670 <RCC_Delay+0x1c>
}
 800367c:	bf00      	nop
 800367e:	3714      	adds	r7, #20
 8003680:	46bd      	mov	sp, r7
 8003682:	bc80      	pop	{r7}
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	20000000 	.word	0x20000000
 800368c:	10624dd3 	.word	0x10624dd3

08003690 <__errno>:
 8003690:	4b01      	ldr	r3, [pc, #4]	; (8003698 <__errno+0x8>)
 8003692:	6818      	ldr	r0, [r3, #0]
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	2000000c 	.word	0x2000000c

0800369c <__libc_init_array>:
 800369c:	b570      	push	{r4, r5, r6, lr}
 800369e:	2500      	movs	r5, #0
 80036a0:	4e0c      	ldr	r6, [pc, #48]	; (80036d4 <__libc_init_array+0x38>)
 80036a2:	4c0d      	ldr	r4, [pc, #52]	; (80036d8 <__libc_init_array+0x3c>)
 80036a4:	1ba4      	subs	r4, r4, r6
 80036a6:	10a4      	asrs	r4, r4, #2
 80036a8:	42a5      	cmp	r5, r4
 80036aa:	d109      	bne.n	80036c0 <__libc_init_array+0x24>
 80036ac:	f003 fd5e 	bl	800716c <_init>
 80036b0:	2500      	movs	r5, #0
 80036b2:	4e0a      	ldr	r6, [pc, #40]	; (80036dc <__libc_init_array+0x40>)
 80036b4:	4c0a      	ldr	r4, [pc, #40]	; (80036e0 <__libc_init_array+0x44>)
 80036b6:	1ba4      	subs	r4, r4, r6
 80036b8:	10a4      	asrs	r4, r4, #2
 80036ba:	42a5      	cmp	r5, r4
 80036bc:	d105      	bne.n	80036ca <__libc_init_array+0x2e>
 80036be:	bd70      	pop	{r4, r5, r6, pc}
 80036c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036c4:	4798      	blx	r3
 80036c6:	3501      	adds	r5, #1
 80036c8:	e7ee      	b.n	80036a8 <__libc_init_array+0xc>
 80036ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036ce:	4798      	blx	r3
 80036d0:	3501      	adds	r5, #1
 80036d2:	e7f2      	b.n	80036ba <__libc_init_array+0x1e>
 80036d4:	080074a8 	.word	0x080074a8
 80036d8:	080074a8 	.word	0x080074a8
 80036dc:	080074a8 	.word	0x080074a8
 80036e0:	080074ac 	.word	0x080074ac

080036e4 <memset>:
 80036e4:	4603      	mov	r3, r0
 80036e6:	4402      	add	r2, r0
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d100      	bne.n	80036ee <memset+0xa>
 80036ec:	4770      	bx	lr
 80036ee:	f803 1b01 	strb.w	r1, [r3], #1
 80036f2:	e7f9      	b.n	80036e8 <memset+0x4>

080036f4 <__cvt>:
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036fa:	461e      	mov	r6, r3
 80036fc:	bfbb      	ittet	lt
 80036fe:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003702:	461e      	movlt	r6, r3
 8003704:	2300      	movge	r3, #0
 8003706:	232d      	movlt	r3, #45	; 0x2d
 8003708:	b088      	sub	sp, #32
 800370a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800370c:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8003710:	f027 0720 	bic.w	r7, r7, #32
 8003714:	2f46      	cmp	r7, #70	; 0x46
 8003716:	4614      	mov	r4, r2
 8003718:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800371a:	700b      	strb	r3, [r1, #0]
 800371c:	d004      	beq.n	8003728 <__cvt+0x34>
 800371e:	2f45      	cmp	r7, #69	; 0x45
 8003720:	d100      	bne.n	8003724 <__cvt+0x30>
 8003722:	3501      	adds	r5, #1
 8003724:	2302      	movs	r3, #2
 8003726:	e000      	b.n	800372a <__cvt+0x36>
 8003728:	2303      	movs	r3, #3
 800372a:	aa07      	add	r2, sp, #28
 800372c:	9204      	str	r2, [sp, #16]
 800372e:	aa06      	add	r2, sp, #24
 8003730:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003734:	e9cd 3500 	strd	r3, r5, [sp]
 8003738:	4622      	mov	r2, r4
 800373a:	4633      	mov	r3, r6
 800373c:	f001 fd7c 	bl	8005238 <_dtoa_r>
 8003740:	2f47      	cmp	r7, #71	; 0x47
 8003742:	4680      	mov	r8, r0
 8003744:	d102      	bne.n	800374c <__cvt+0x58>
 8003746:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003748:	07db      	lsls	r3, r3, #31
 800374a:	d526      	bpl.n	800379a <__cvt+0xa6>
 800374c:	2f46      	cmp	r7, #70	; 0x46
 800374e:	eb08 0905 	add.w	r9, r8, r5
 8003752:	d111      	bne.n	8003778 <__cvt+0x84>
 8003754:	f898 3000 	ldrb.w	r3, [r8]
 8003758:	2b30      	cmp	r3, #48	; 0x30
 800375a:	d10a      	bne.n	8003772 <__cvt+0x7e>
 800375c:	2200      	movs	r2, #0
 800375e:	2300      	movs	r3, #0
 8003760:	4620      	mov	r0, r4
 8003762:	4631      	mov	r1, r6
 8003764:	f7fd f920 	bl	80009a8 <__aeabi_dcmpeq>
 8003768:	b918      	cbnz	r0, 8003772 <__cvt+0x7e>
 800376a:	f1c5 0501 	rsb	r5, r5, #1
 800376e:	f8ca 5000 	str.w	r5, [sl]
 8003772:	f8da 3000 	ldr.w	r3, [sl]
 8003776:	4499      	add	r9, r3
 8003778:	2200      	movs	r2, #0
 800377a:	2300      	movs	r3, #0
 800377c:	4620      	mov	r0, r4
 800377e:	4631      	mov	r1, r6
 8003780:	f7fd f912 	bl	80009a8 <__aeabi_dcmpeq>
 8003784:	b938      	cbnz	r0, 8003796 <__cvt+0xa2>
 8003786:	2230      	movs	r2, #48	; 0x30
 8003788:	9b07      	ldr	r3, [sp, #28]
 800378a:	454b      	cmp	r3, r9
 800378c:	d205      	bcs.n	800379a <__cvt+0xa6>
 800378e:	1c59      	adds	r1, r3, #1
 8003790:	9107      	str	r1, [sp, #28]
 8003792:	701a      	strb	r2, [r3, #0]
 8003794:	e7f8      	b.n	8003788 <__cvt+0x94>
 8003796:	f8cd 901c 	str.w	r9, [sp, #28]
 800379a:	4640      	mov	r0, r8
 800379c:	9b07      	ldr	r3, [sp, #28]
 800379e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80037a0:	eba3 0308 	sub.w	r3, r3, r8
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	b008      	add	sp, #32
 80037a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080037ac <__exponent>:
 80037ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037ae:	2900      	cmp	r1, #0
 80037b0:	bfb4      	ite	lt
 80037b2:	232d      	movlt	r3, #45	; 0x2d
 80037b4:	232b      	movge	r3, #43	; 0x2b
 80037b6:	4604      	mov	r4, r0
 80037b8:	bfb8      	it	lt
 80037ba:	4249      	neglt	r1, r1
 80037bc:	2909      	cmp	r1, #9
 80037be:	f804 2b02 	strb.w	r2, [r4], #2
 80037c2:	7043      	strb	r3, [r0, #1]
 80037c4:	dd21      	ble.n	800380a <__exponent+0x5e>
 80037c6:	f10d 0307 	add.w	r3, sp, #7
 80037ca:	461f      	mov	r7, r3
 80037cc:	260a      	movs	r6, #10
 80037ce:	fb91 f5f6 	sdiv	r5, r1, r6
 80037d2:	fb06 1115 	mls	r1, r6, r5, r1
 80037d6:	2d09      	cmp	r5, #9
 80037d8:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80037dc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80037e0:	f103 32ff 	add.w	r2, r3, #4294967295
 80037e4:	4629      	mov	r1, r5
 80037e6:	dc09      	bgt.n	80037fc <__exponent+0x50>
 80037e8:	3130      	adds	r1, #48	; 0x30
 80037ea:	3b02      	subs	r3, #2
 80037ec:	f802 1c01 	strb.w	r1, [r2, #-1]
 80037f0:	42bb      	cmp	r3, r7
 80037f2:	4622      	mov	r2, r4
 80037f4:	d304      	bcc.n	8003800 <__exponent+0x54>
 80037f6:	1a10      	subs	r0, r2, r0
 80037f8:	b003      	add	sp, #12
 80037fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037fc:	4613      	mov	r3, r2
 80037fe:	e7e6      	b.n	80037ce <__exponent+0x22>
 8003800:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003804:	f804 2b01 	strb.w	r2, [r4], #1
 8003808:	e7f2      	b.n	80037f0 <__exponent+0x44>
 800380a:	2330      	movs	r3, #48	; 0x30
 800380c:	4419      	add	r1, r3
 800380e:	7083      	strb	r3, [r0, #2]
 8003810:	1d02      	adds	r2, r0, #4
 8003812:	70c1      	strb	r1, [r0, #3]
 8003814:	e7ef      	b.n	80037f6 <__exponent+0x4a>
	...

08003818 <_printf_float>:
 8003818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800381c:	b091      	sub	sp, #68	; 0x44
 800381e:	460c      	mov	r4, r1
 8003820:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8003822:	4693      	mov	fp, r2
 8003824:	461e      	mov	r6, r3
 8003826:	4605      	mov	r5, r0
 8003828:	f002 fde8 	bl	80063fc <_localeconv_r>
 800382c:	6803      	ldr	r3, [r0, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	9309      	str	r3, [sp, #36]	; 0x24
 8003832:	f7fc fc8d 	bl	8000150 <strlen>
 8003836:	2300      	movs	r3, #0
 8003838:	930e      	str	r3, [sp, #56]	; 0x38
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	900a      	str	r0, [sp, #40]	; 0x28
 800383e:	3307      	adds	r3, #7
 8003840:	f023 0307 	bic.w	r3, r3, #7
 8003844:	f103 0208 	add.w	r2, r3, #8
 8003848:	f894 8018 	ldrb.w	r8, [r4, #24]
 800384c:	f8d4 a000 	ldr.w	sl, [r4]
 8003850:	603a      	str	r2, [r7, #0]
 8003852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003856:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800385a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800385e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003862:	930b      	str	r3, [sp, #44]	; 0x2c
 8003864:	f04f 32ff 	mov.w	r2, #4294967295
 8003868:	4ba6      	ldr	r3, [pc, #664]	; (8003b04 <_printf_float+0x2ec>)
 800386a:	4638      	mov	r0, r7
 800386c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800386e:	f7fd f8cd 	bl	8000a0c <__aeabi_dcmpun>
 8003872:	bb68      	cbnz	r0, 80038d0 <_printf_float+0xb8>
 8003874:	f04f 32ff 	mov.w	r2, #4294967295
 8003878:	4ba2      	ldr	r3, [pc, #648]	; (8003b04 <_printf_float+0x2ec>)
 800387a:	4638      	mov	r0, r7
 800387c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800387e:	f7fd f8a7 	bl	80009d0 <__aeabi_dcmple>
 8003882:	bb28      	cbnz	r0, 80038d0 <_printf_float+0xb8>
 8003884:	2200      	movs	r2, #0
 8003886:	2300      	movs	r3, #0
 8003888:	4638      	mov	r0, r7
 800388a:	4649      	mov	r1, r9
 800388c:	f7fd f896 	bl	80009bc <__aeabi_dcmplt>
 8003890:	b110      	cbz	r0, 8003898 <_printf_float+0x80>
 8003892:	232d      	movs	r3, #45	; 0x2d
 8003894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003898:	4f9b      	ldr	r7, [pc, #620]	; (8003b08 <_printf_float+0x2f0>)
 800389a:	4b9c      	ldr	r3, [pc, #624]	; (8003b0c <_printf_float+0x2f4>)
 800389c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80038a0:	bf98      	it	ls
 80038a2:	461f      	movls	r7, r3
 80038a4:	2303      	movs	r3, #3
 80038a6:	f04f 0900 	mov.w	r9, #0
 80038aa:	6123      	str	r3, [r4, #16]
 80038ac:	f02a 0304 	bic.w	r3, sl, #4
 80038b0:	6023      	str	r3, [r4, #0]
 80038b2:	9600      	str	r6, [sp, #0]
 80038b4:	465b      	mov	r3, fp
 80038b6:	aa0f      	add	r2, sp, #60	; 0x3c
 80038b8:	4621      	mov	r1, r4
 80038ba:	4628      	mov	r0, r5
 80038bc:	f000 f9e2 	bl	8003c84 <_printf_common>
 80038c0:	3001      	adds	r0, #1
 80038c2:	f040 8090 	bne.w	80039e6 <_printf_float+0x1ce>
 80038c6:	f04f 30ff 	mov.w	r0, #4294967295
 80038ca:	b011      	add	sp, #68	; 0x44
 80038cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038d0:	463a      	mov	r2, r7
 80038d2:	464b      	mov	r3, r9
 80038d4:	4638      	mov	r0, r7
 80038d6:	4649      	mov	r1, r9
 80038d8:	f7fd f898 	bl	8000a0c <__aeabi_dcmpun>
 80038dc:	b110      	cbz	r0, 80038e4 <_printf_float+0xcc>
 80038de:	4f8c      	ldr	r7, [pc, #560]	; (8003b10 <_printf_float+0x2f8>)
 80038e0:	4b8c      	ldr	r3, [pc, #560]	; (8003b14 <_printf_float+0x2fc>)
 80038e2:	e7db      	b.n	800389c <_printf_float+0x84>
 80038e4:	6863      	ldr	r3, [r4, #4]
 80038e6:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80038ea:	1c59      	adds	r1, r3, #1
 80038ec:	a80d      	add	r0, sp, #52	; 0x34
 80038ee:	a90e      	add	r1, sp, #56	; 0x38
 80038f0:	d140      	bne.n	8003974 <_printf_float+0x15c>
 80038f2:	2306      	movs	r3, #6
 80038f4:	6063      	str	r3, [r4, #4]
 80038f6:	f04f 0c00 	mov.w	ip, #0
 80038fa:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80038fe:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8003902:	6863      	ldr	r3, [r4, #4]
 8003904:	6022      	str	r2, [r4, #0]
 8003906:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800390a:	9300      	str	r3, [sp, #0]
 800390c:	463a      	mov	r2, r7
 800390e:	464b      	mov	r3, r9
 8003910:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003914:	4628      	mov	r0, r5
 8003916:	f7ff feed 	bl	80036f4 <__cvt>
 800391a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800391e:	2b47      	cmp	r3, #71	; 0x47
 8003920:	4607      	mov	r7, r0
 8003922:	d109      	bne.n	8003938 <_printf_float+0x120>
 8003924:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003926:	1cd8      	adds	r0, r3, #3
 8003928:	db02      	blt.n	8003930 <_printf_float+0x118>
 800392a:	6862      	ldr	r2, [r4, #4]
 800392c:	4293      	cmp	r3, r2
 800392e:	dd47      	ble.n	80039c0 <_printf_float+0x1a8>
 8003930:	f1a8 0802 	sub.w	r8, r8, #2
 8003934:	fa5f f888 	uxtb.w	r8, r8
 8003938:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800393c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800393e:	d824      	bhi.n	800398a <_printf_float+0x172>
 8003940:	3901      	subs	r1, #1
 8003942:	4642      	mov	r2, r8
 8003944:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003948:	910d      	str	r1, [sp, #52]	; 0x34
 800394a:	f7ff ff2f 	bl	80037ac <__exponent>
 800394e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003950:	4681      	mov	r9, r0
 8003952:	1813      	adds	r3, r2, r0
 8003954:	2a01      	cmp	r2, #1
 8003956:	6123      	str	r3, [r4, #16]
 8003958:	dc02      	bgt.n	8003960 <_printf_float+0x148>
 800395a:	6822      	ldr	r2, [r4, #0]
 800395c:	07d1      	lsls	r1, r2, #31
 800395e:	d501      	bpl.n	8003964 <_printf_float+0x14c>
 8003960:	3301      	adds	r3, #1
 8003962:	6123      	str	r3, [r4, #16]
 8003964:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003968:	2b00      	cmp	r3, #0
 800396a:	d0a2      	beq.n	80038b2 <_printf_float+0x9a>
 800396c:	232d      	movs	r3, #45	; 0x2d
 800396e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003972:	e79e      	b.n	80038b2 <_printf_float+0x9a>
 8003974:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8003978:	f000 816e 	beq.w	8003c58 <_printf_float+0x440>
 800397c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003980:	d1b9      	bne.n	80038f6 <_printf_float+0xde>
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1b7      	bne.n	80038f6 <_printf_float+0xde>
 8003986:	2301      	movs	r3, #1
 8003988:	e7b4      	b.n	80038f4 <_printf_float+0xdc>
 800398a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800398e:	d119      	bne.n	80039c4 <_printf_float+0x1ac>
 8003990:	2900      	cmp	r1, #0
 8003992:	6863      	ldr	r3, [r4, #4]
 8003994:	dd0c      	ble.n	80039b0 <_printf_float+0x198>
 8003996:	6121      	str	r1, [r4, #16]
 8003998:	b913      	cbnz	r3, 80039a0 <_printf_float+0x188>
 800399a:	6822      	ldr	r2, [r4, #0]
 800399c:	07d2      	lsls	r2, r2, #31
 800399e:	d502      	bpl.n	80039a6 <_printf_float+0x18e>
 80039a0:	3301      	adds	r3, #1
 80039a2:	440b      	add	r3, r1
 80039a4:	6123      	str	r3, [r4, #16]
 80039a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80039a8:	f04f 0900 	mov.w	r9, #0
 80039ac:	65a3      	str	r3, [r4, #88]	; 0x58
 80039ae:	e7d9      	b.n	8003964 <_printf_float+0x14c>
 80039b0:	b913      	cbnz	r3, 80039b8 <_printf_float+0x1a0>
 80039b2:	6822      	ldr	r2, [r4, #0]
 80039b4:	07d0      	lsls	r0, r2, #31
 80039b6:	d501      	bpl.n	80039bc <_printf_float+0x1a4>
 80039b8:	3302      	adds	r3, #2
 80039ba:	e7f3      	b.n	80039a4 <_printf_float+0x18c>
 80039bc:	2301      	movs	r3, #1
 80039be:	e7f1      	b.n	80039a4 <_printf_float+0x18c>
 80039c0:	f04f 0867 	mov.w	r8, #103	; 0x67
 80039c4:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80039c8:	4293      	cmp	r3, r2
 80039ca:	db05      	blt.n	80039d8 <_printf_float+0x1c0>
 80039cc:	6822      	ldr	r2, [r4, #0]
 80039ce:	6123      	str	r3, [r4, #16]
 80039d0:	07d1      	lsls	r1, r2, #31
 80039d2:	d5e8      	bpl.n	80039a6 <_printf_float+0x18e>
 80039d4:	3301      	adds	r3, #1
 80039d6:	e7e5      	b.n	80039a4 <_printf_float+0x18c>
 80039d8:	2b00      	cmp	r3, #0
 80039da:	bfcc      	ite	gt
 80039dc:	2301      	movgt	r3, #1
 80039de:	f1c3 0302 	rsble	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	e7de      	b.n	80039a4 <_printf_float+0x18c>
 80039e6:	6823      	ldr	r3, [r4, #0]
 80039e8:	055a      	lsls	r2, r3, #21
 80039ea:	d407      	bmi.n	80039fc <_printf_float+0x1e4>
 80039ec:	6923      	ldr	r3, [r4, #16]
 80039ee:	463a      	mov	r2, r7
 80039f0:	4659      	mov	r1, fp
 80039f2:	4628      	mov	r0, r5
 80039f4:	47b0      	blx	r6
 80039f6:	3001      	adds	r0, #1
 80039f8:	d129      	bne.n	8003a4e <_printf_float+0x236>
 80039fa:	e764      	b.n	80038c6 <_printf_float+0xae>
 80039fc:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8003a00:	f240 80d7 	bls.w	8003bb2 <_printf_float+0x39a>
 8003a04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003a08:	2200      	movs	r2, #0
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	f7fc ffcc 	bl	80009a8 <__aeabi_dcmpeq>
 8003a10:	b388      	cbz	r0, 8003a76 <_printf_float+0x25e>
 8003a12:	2301      	movs	r3, #1
 8003a14:	4a40      	ldr	r2, [pc, #256]	; (8003b18 <_printf_float+0x300>)
 8003a16:	4659      	mov	r1, fp
 8003a18:	4628      	mov	r0, r5
 8003a1a:	47b0      	blx	r6
 8003a1c:	3001      	adds	r0, #1
 8003a1e:	f43f af52 	beq.w	80038c6 <_printf_float+0xae>
 8003a22:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003a26:	429a      	cmp	r2, r3
 8003a28:	db02      	blt.n	8003a30 <_printf_float+0x218>
 8003a2a:	6823      	ldr	r3, [r4, #0]
 8003a2c:	07d8      	lsls	r0, r3, #31
 8003a2e:	d50e      	bpl.n	8003a4e <_printf_float+0x236>
 8003a30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003a34:	4659      	mov	r1, fp
 8003a36:	4628      	mov	r0, r5
 8003a38:	47b0      	blx	r6
 8003a3a:	3001      	adds	r0, #1
 8003a3c:	f43f af43 	beq.w	80038c6 <_printf_float+0xae>
 8003a40:	2700      	movs	r7, #0
 8003a42:	f104 081a 	add.w	r8, r4, #26
 8003a46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	42bb      	cmp	r3, r7
 8003a4c:	dc09      	bgt.n	8003a62 <_printf_float+0x24a>
 8003a4e:	6823      	ldr	r3, [r4, #0]
 8003a50:	079f      	lsls	r7, r3, #30
 8003a52:	f100 80fd 	bmi.w	8003c50 <_printf_float+0x438>
 8003a56:	68e0      	ldr	r0, [r4, #12]
 8003a58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003a5a:	4298      	cmp	r0, r3
 8003a5c:	bfb8      	it	lt
 8003a5e:	4618      	movlt	r0, r3
 8003a60:	e733      	b.n	80038ca <_printf_float+0xb2>
 8003a62:	2301      	movs	r3, #1
 8003a64:	4642      	mov	r2, r8
 8003a66:	4659      	mov	r1, fp
 8003a68:	4628      	mov	r0, r5
 8003a6a:	47b0      	blx	r6
 8003a6c:	3001      	adds	r0, #1
 8003a6e:	f43f af2a 	beq.w	80038c6 <_printf_float+0xae>
 8003a72:	3701      	adds	r7, #1
 8003a74:	e7e7      	b.n	8003a46 <_printf_float+0x22e>
 8003a76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	dc2b      	bgt.n	8003ad4 <_printf_float+0x2bc>
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	4a26      	ldr	r2, [pc, #152]	; (8003b18 <_printf_float+0x300>)
 8003a80:	4659      	mov	r1, fp
 8003a82:	4628      	mov	r0, r5
 8003a84:	47b0      	blx	r6
 8003a86:	3001      	adds	r0, #1
 8003a88:	f43f af1d 	beq.w	80038c6 <_printf_float+0xae>
 8003a8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a8e:	b923      	cbnz	r3, 8003a9a <_printf_float+0x282>
 8003a90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a92:	b913      	cbnz	r3, 8003a9a <_printf_float+0x282>
 8003a94:	6823      	ldr	r3, [r4, #0]
 8003a96:	07d9      	lsls	r1, r3, #31
 8003a98:	d5d9      	bpl.n	8003a4e <_printf_float+0x236>
 8003a9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003a9e:	4659      	mov	r1, fp
 8003aa0:	4628      	mov	r0, r5
 8003aa2:	47b0      	blx	r6
 8003aa4:	3001      	adds	r0, #1
 8003aa6:	f43f af0e 	beq.w	80038c6 <_printf_float+0xae>
 8003aaa:	f04f 0800 	mov.w	r8, #0
 8003aae:	f104 091a 	add.w	r9, r4, #26
 8003ab2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003ab4:	425b      	negs	r3, r3
 8003ab6:	4543      	cmp	r3, r8
 8003ab8:	dc01      	bgt.n	8003abe <_printf_float+0x2a6>
 8003aba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003abc:	e797      	b.n	80039ee <_printf_float+0x1d6>
 8003abe:	2301      	movs	r3, #1
 8003ac0:	464a      	mov	r2, r9
 8003ac2:	4659      	mov	r1, fp
 8003ac4:	4628      	mov	r0, r5
 8003ac6:	47b0      	blx	r6
 8003ac8:	3001      	adds	r0, #1
 8003aca:	f43f aefc 	beq.w	80038c6 <_printf_float+0xae>
 8003ace:	f108 0801 	add.w	r8, r8, #1
 8003ad2:	e7ee      	b.n	8003ab2 <_printf_float+0x29a>
 8003ad4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003ad6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	bfa8      	it	ge
 8003adc:	461a      	movge	r2, r3
 8003ade:	2a00      	cmp	r2, #0
 8003ae0:	4690      	mov	r8, r2
 8003ae2:	dd07      	ble.n	8003af4 <_printf_float+0x2dc>
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	4659      	mov	r1, fp
 8003ae8:	463a      	mov	r2, r7
 8003aea:	4628      	mov	r0, r5
 8003aec:	47b0      	blx	r6
 8003aee:	3001      	adds	r0, #1
 8003af0:	f43f aee9 	beq.w	80038c6 <_printf_float+0xae>
 8003af4:	f104 031a 	add.w	r3, r4, #26
 8003af8:	f04f 0a00 	mov.w	sl, #0
 8003afc:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8003b00:	930b      	str	r3, [sp, #44]	; 0x2c
 8003b02:	e015      	b.n	8003b30 <_printf_float+0x318>
 8003b04:	7fefffff 	.word	0x7fefffff
 8003b08:	080071ee 	.word	0x080071ee
 8003b0c:	080071ea 	.word	0x080071ea
 8003b10:	080071f6 	.word	0x080071f6
 8003b14:	080071f2 	.word	0x080071f2
 8003b18:	080071fa 	.word	0x080071fa
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003b20:	4659      	mov	r1, fp
 8003b22:	4628      	mov	r0, r5
 8003b24:	47b0      	blx	r6
 8003b26:	3001      	adds	r0, #1
 8003b28:	f43f aecd 	beq.w	80038c6 <_printf_float+0xae>
 8003b2c:	f10a 0a01 	add.w	sl, sl, #1
 8003b30:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8003b34:	eba9 0308 	sub.w	r3, r9, r8
 8003b38:	4553      	cmp	r3, sl
 8003b3a:	dcef      	bgt.n	8003b1c <_printf_float+0x304>
 8003b3c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003b40:	429a      	cmp	r2, r3
 8003b42:	444f      	add	r7, r9
 8003b44:	db14      	blt.n	8003b70 <_printf_float+0x358>
 8003b46:	6823      	ldr	r3, [r4, #0]
 8003b48:	07da      	lsls	r2, r3, #31
 8003b4a:	d411      	bmi.n	8003b70 <_printf_float+0x358>
 8003b4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b4e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003b50:	eba3 0209 	sub.w	r2, r3, r9
 8003b54:	eba3 0901 	sub.w	r9, r3, r1
 8003b58:	4591      	cmp	r9, r2
 8003b5a:	bfa8      	it	ge
 8003b5c:	4691      	movge	r9, r2
 8003b5e:	f1b9 0f00 	cmp.w	r9, #0
 8003b62:	dc0d      	bgt.n	8003b80 <_printf_float+0x368>
 8003b64:	2700      	movs	r7, #0
 8003b66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003b6a:	f104 081a 	add.w	r8, r4, #26
 8003b6e:	e018      	b.n	8003ba2 <_printf_float+0x38a>
 8003b70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b74:	4659      	mov	r1, fp
 8003b76:	4628      	mov	r0, r5
 8003b78:	47b0      	blx	r6
 8003b7a:	3001      	adds	r0, #1
 8003b7c:	d1e6      	bne.n	8003b4c <_printf_float+0x334>
 8003b7e:	e6a2      	b.n	80038c6 <_printf_float+0xae>
 8003b80:	464b      	mov	r3, r9
 8003b82:	463a      	mov	r2, r7
 8003b84:	4659      	mov	r1, fp
 8003b86:	4628      	mov	r0, r5
 8003b88:	47b0      	blx	r6
 8003b8a:	3001      	adds	r0, #1
 8003b8c:	d1ea      	bne.n	8003b64 <_printf_float+0x34c>
 8003b8e:	e69a      	b.n	80038c6 <_printf_float+0xae>
 8003b90:	2301      	movs	r3, #1
 8003b92:	4642      	mov	r2, r8
 8003b94:	4659      	mov	r1, fp
 8003b96:	4628      	mov	r0, r5
 8003b98:	47b0      	blx	r6
 8003b9a:	3001      	adds	r0, #1
 8003b9c:	f43f ae93 	beq.w	80038c6 <_printf_float+0xae>
 8003ba0:	3701      	adds	r7, #1
 8003ba2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003ba6:	1a9b      	subs	r3, r3, r2
 8003ba8:	eba3 0309 	sub.w	r3, r3, r9
 8003bac:	42bb      	cmp	r3, r7
 8003bae:	dcef      	bgt.n	8003b90 <_printf_float+0x378>
 8003bb0:	e74d      	b.n	8003a4e <_printf_float+0x236>
 8003bb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003bb4:	2a01      	cmp	r2, #1
 8003bb6:	dc01      	bgt.n	8003bbc <_printf_float+0x3a4>
 8003bb8:	07db      	lsls	r3, r3, #31
 8003bba:	d538      	bpl.n	8003c2e <_printf_float+0x416>
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	463a      	mov	r2, r7
 8003bc0:	4659      	mov	r1, fp
 8003bc2:	4628      	mov	r0, r5
 8003bc4:	47b0      	blx	r6
 8003bc6:	3001      	adds	r0, #1
 8003bc8:	f43f ae7d 	beq.w	80038c6 <_printf_float+0xae>
 8003bcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003bd0:	4659      	mov	r1, fp
 8003bd2:	4628      	mov	r0, r5
 8003bd4:	47b0      	blx	r6
 8003bd6:	3001      	adds	r0, #1
 8003bd8:	f107 0701 	add.w	r7, r7, #1
 8003bdc:	f43f ae73 	beq.w	80038c6 <_printf_float+0xae>
 8003be0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003be4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003be6:	2200      	movs	r2, #0
 8003be8:	f103 38ff 	add.w	r8, r3, #4294967295
 8003bec:	2300      	movs	r3, #0
 8003bee:	f7fc fedb 	bl	80009a8 <__aeabi_dcmpeq>
 8003bf2:	b9c0      	cbnz	r0, 8003c26 <_printf_float+0x40e>
 8003bf4:	4643      	mov	r3, r8
 8003bf6:	463a      	mov	r2, r7
 8003bf8:	4659      	mov	r1, fp
 8003bfa:	4628      	mov	r0, r5
 8003bfc:	47b0      	blx	r6
 8003bfe:	3001      	adds	r0, #1
 8003c00:	d10d      	bne.n	8003c1e <_printf_float+0x406>
 8003c02:	e660      	b.n	80038c6 <_printf_float+0xae>
 8003c04:	2301      	movs	r3, #1
 8003c06:	4642      	mov	r2, r8
 8003c08:	4659      	mov	r1, fp
 8003c0a:	4628      	mov	r0, r5
 8003c0c:	47b0      	blx	r6
 8003c0e:	3001      	adds	r0, #1
 8003c10:	f43f ae59 	beq.w	80038c6 <_printf_float+0xae>
 8003c14:	3701      	adds	r7, #1
 8003c16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	42bb      	cmp	r3, r7
 8003c1c:	dcf2      	bgt.n	8003c04 <_printf_float+0x3ec>
 8003c1e:	464b      	mov	r3, r9
 8003c20:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003c24:	e6e4      	b.n	80039f0 <_printf_float+0x1d8>
 8003c26:	2700      	movs	r7, #0
 8003c28:	f104 081a 	add.w	r8, r4, #26
 8003c2c:	e7f3      	b.n	8003c16 <_printf_float+0x3fe>
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e7e1      	b.n	8003bf6 <_printf_float+0x3de>
 8003c32:	2301      	movs	r3, #1
 8003c34:	4642      	mov	r2, r8
 8003c36:	4659      	mov	r1, fp
 8003c38:	4628      	mov	r0, r5
 8003c3a:	47b0      	blx	r6
 8003c3c:	3001      	adds	r0, #1
 8003c3e:	f43f ae42 	beq.w	80038c6 <_printf_float+0xae>
 8003c42:	3701      	adds	r7, #1
 8003c44:	68e3      	ldr	r3, [r4, #12]
 8003c46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003c48:	1a9b      	subs	r3, r3, r2
 8003c4a:	42bb      	cmp	r3, r7
 8003c4c:	dcf1      	bgt.n	8003c32 <_printf_float+0x41a>
 8003c4e:	e702      	b.n	8003a56 <_printf_float+0x23e>
 8003c50:	2700      	movs	r7, #0
 8003c52:	f104 0819 	add.w	r8, r4, #25
 8003c56:	e7f5      	b.n	8003c44 <_printf_float+0x42c>
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f43f ae94 	beq.w	8003986 <_printf_float+0x16e>
 8003c5e:	f04f 0c00 	mov.w	ip, #0
 8003c62:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003c66:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8003c6a:	6022      	str	r2, [r4, #0]
 8003c6c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8003c70:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	463a      	mov	r2, r7
 8003c78:	464b      	mov	r3, r9
 8003c7a:	4628      	mov	r0, r5
 8003c7c:	f7ff fd3a 	bl	80036f4 <__cvt>
 8003c80:	4607      	mov	r7, r0
 8003c82:	e64f      	b.n	8003924 <_printf_float+0x10c>

08003c84 <_printf_common>:
 8003c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c88:	4691      	mov	r9, r2
 8003c8a:	461f      	mov	r7, r3
 8003c8c:	688a      	ldr	r2, [r1, #8]
 8003c8e:	690b      	ldr	r3, [r1, #16]
 8003c90:	4606      	mov	r6, r0
 8003c92:	4293      	cmp	r3, r2
 8003c94:	bfb8      	it	lt
 8003c96:	4613      	movlt	r3, r2
 8003c98:	f8c9 3000 	str.w	r3, [r9]
 8003c9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ca0:	460c      	mov	r4, r1
 8003ca2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ca6:	b112      	cbz	r2, 8003cae <_printf_common+0x2a>
 8003ca8:	3301      	adds	r3, #1
 8003caa:	f8c9 3000 	str.w	r3, [r9]
 8003cae:	6823      	ldr	r3, [r4, #0]
 8003cb0:	0699      	lsls	r1, r3, #26
 8003cb2:	bf42      	ittt	mi
 8003cb4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003cb8:	3302      	addmi	r3, #2
 8003cba:	f8c9 3000 	strmi.w	r3, [r9]
 8003cbe:	6825      	ldr	r5, [r4, #0]
 8003cc0:	f015 0506 	ands.w	r5, r5, #6
 8003cc4:	d107      	bne.n	8003cd6 <_printf_common+0x52>
 8003cc6:	f104 0a19 	add.w	sl, r4, #25
 8003cca:	68e3      	ldr	r3, [r4, #12]
 8003ccc:	f8d9 2000 	ldr.w	r2, [r9]
 8003cd0:	1a9b      	subs	r3, r3, r2
 8003cd2:	42ab      	cmp	r3, r5
 8003cd4:	dc29      	bgt.n	8003d2a <_printf_common+0xa6>
 8003cd6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003cda:	6822      	ldr	r2, [r4, #0]
 8003cdc:	3300      	adds	r3, #0
 8003cde:	bf18      	it	ne
 8003ce0:	2301      	movne	r3, #1
 8003ce2:	0692      	lsls	r2, r2, #26
 8003ce4:	d42e      	bmi.n	8003d44 <_printf_common+0xc0>
 8003ce6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003cea:	4639      	mov	r1, r7
 8003cec:	4630      	mov	r0, r6
 8003cee:	47c0      	blx	r8
 8003cf0:	3001      	adds	r0, #1
 8003cf2:	d021      	beq.n	8003d38 <_printf_common+0xb4>
 8003cf4:	6823      	ldr	r3, [r4, #0]
 8003cf6:	68e5      	ldr	r5, [r4, #12]
 8003cf8:	f003 0306 	and.w	r3, r3, #6
 8003cfc:	2b04      	cmp	r3, #4
 8003cfe:	bf18      	it	ne
 8003d00:	2500      	movne	r5, #0
 8003d02:	f8d9 2000 	ldr.w	r2, [r9]
 8003d06:	f04f 0900 	mov.w	r9, #0
 8003d0a:	bf08      	it	eq
 8003d0c:	1aad      	subeq	r5, r5, r2
 8003d0e:	68a3      	ldr	r3, [r4, #8]
 8003d10:	6922      	ldr	r2, [r4, #16]
 8003d12:	bf08      	it	eq
 8003d14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	bfc4      	itt	gt
 8003d1c:	1a9b      	subgt	r3, r3, r2
 8003d1e:	18ed      	addgt	r5, r5, r3
 8003d20:	341a      	adds	r4, #26
 8003d22:	454d      	cmp	r5, r9
 8003d24:	d11a      	bne.n	8003d5c <_printf_common+0xd8>
 8003d26:	2000      	movs	r0, #0
 8003d28:	e008      	b.n	8003d3c <_printf_common+0xb8>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	4652      	mov	r2, sl
 8003d2e:	4639      	mov	r1, r7
 8003d30:	4630      	mov	r0, r6
 8003d32:	47c0      	blx	r8
 8003d34:	3001      	adds	r0, #1
 8003d36:	d103      	bne.n	8003d40 <_printf_common+0xbc>
 8003d38:	f04f 30ff 	mov.w	r0, #4294967295
 8003d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d40:	3501      	adds	r5, #1
 8003d42:	e7c2      	b.n	8003cca <_printf_common+0x46>
 8003d44:	2030      	movs	r0, #48	; 0x30
 8003d46:	18e1      	adds	r1, r4, r3
 8003d48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d4c:	1c5a      	adds	r2, r3, #1
 8003d4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d52:	4422      	add	r2, r4
 8003d54:	3302      	adds	r3, #2
 8003d56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d5a:	e7c4      	b.n	8003ce6 <_printf_common+0x62>
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	4622      	mov	r2, r4
 8003d60:	4639      	mov	r1, r7
 8003d62:	4630      	mov	r0, r6
 8003d64:	47c0      	blx	r8
 8003d66:	3001      	adds	r0, #1
 8003d68:	d0e6      	beq.n	8003d38 <_printf_common+0xb4>
 8003d6a:	f109 0901 	add.w	r9, r9, #1
 8003d6e:	e7d8      	b.n	8003d22 <_printf_common+0x9e>

08003d70 <_printf_i>:
 8003d70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d74:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003d78:	460c      	mov	r4, r1
 8003d7a:	7e09      	ldrb	r1, [r1, #24]
 8003d7c:	b085      	sub	sp, #20
 8003d7e:	296e      	cmp	r1, #110	; 0x6e
 8003d80:	4617      	mov	r7, r2
 8003d82:	4606      	mov	r6, r0
 8003d84:	4698      	mov	r8, r3
 8003d86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003d88:	f000 80b3 	beq.w	8003ef2 <_printf_i+0x182>
 8003d8c:	d822      	bhi.n	8003dd4 <_printf_i+0x64>
 8003d8e:	2963      	cmp	r1, #99	; 0x63
 8003d90:	d036      	beq.n	8003e00 <_printf_i+0x90>
 8003d92:	d80a      	bhi.n	8003daa <_printf_i+0x3a>
 8003d94:	2900      	cmp	r1, #0
 8003d96:	f000 80b9 	beq.w	8003f0c <_printf_i+0x19c>
 8003d9a:	2958      	cmp	r1, #88	; 0x58
 8003d9c:	f000 8083 	beq.w	8003ea6 <_printf_i+0x136>
 8003da0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003da4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003da8:	e032      	b.n	8003e10 <_printf_i+0xa0>
 8003daa:	2964      	cmp	r1, #100	; 0x64
 8003dac:	d001      	beq.n	8003db2 <_printf_i+0x42>
 8003dae:	2969      	cmp	r1, #105	; 0x69
 8003db0:	d1f6      	bne.n	8003da0 <_printf_i+0x30>
 8003db2:	6820      	ldr	r0, [r4, #0]
 8003db4:	6813      	ldr	r3, [r2, #0]
 8003db6:	0605      	lsls	r5, r0, #24
 8003db8:	f103 0104 	add.w	r1, r3, #4
 8003dbc:	d52a      	bpl.n	8003e14 <_printf_i+0xa4>
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6011      	str	r1, [r2, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	da03      	bge.n	8003dce <_printf_i+0x5e>
 8003dc6:	222d      	movs	r2, #45	; 0x2d
 8003dc8:	425b      	negs	r3, r3
 8003dca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003dce:	486f      	ldr	r0, [pc, #444]	; (8003f8c <_printf_i+0x21c>)
 8003dd0:	220a      	movs	r2, #10
 8003dd2:	e039      	b.n	8003e48 <_printf_i+0xd8>
 8003dd4:	2973      	cmp	r1, #115	; 0x73
 8003dd6:	f000 809d 	beq.w	8003f14 <_printf_i+0x1a4>
 8003dda:	d808      	bhi.n	8003dee <_printf_i+0x7e>
 8003ddc:	296f      	cmp	r1, #111	; 0x6f
 8003dde:	d020      	beq.n	8003e22 <_printf_i+0xb2>
 8003de0:	2970      	cmp	r1, #112	; 0x70
 8003de2:	d1dd      	bne.n	8003da0 <_printf_i+0x30>
 8003de4:	6823      	ldr	r3, [r4, #0]
 8003de6:	f043 0320 	orr.w	r3, r3, #32
 8003dea:	6023      	str	r3, [r4, #0]
 8003dec:	e003      	b.n	8003df6 <_printf_i+0x86>
 8003dee:	2975      	cmp	r1, #117	; 0x75
 8003df0:	d017      	beq.n	8003e22 <_printf_i+0xb2>
 8003df2:	2978      	cmp	r1, #120	; 0x78
 8003df4:	d1d4      	bne.n	8003da0 <_printf_i+0x30>
 8003df6:	2378      	movs	r3, #120	; 0x78
 8003df8:	4865      	ldr	r0, [pc, #404]	; (8003f90 <_printf_i+0x220>)
 8003dfa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003dfe:	e055      	b.n	8003eac <_printf_i+0x13c>
 8003e00:	6813      	ldr	r3, [r2, #0]
 8003e02:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e06:	1d19      	adds	r1, r3, #4
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	6011      	str	r1, [r2, #0]
 8003e0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e10:	2301      	movs	r3, #1
 8003e12:	e08c      	b.n	8003f2e <_printf_i+0x1be>
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e1a:	6011      	str	r1, [r2, #0]
 8003e1c:	bf18      	it	ne
 8003e1e:	b21b      	sxthne	r3, r3
 8003e20:	e7cf      	b.n	8003dc2 <_printf_i+0x52>
 8003e22:	6813      	ldr	r3, [r2, #0]
 8003e24:	6825      	ldr	r5, [r4, #0]
 8003e26:	1d18      	adds	r0, r3, #4
 8003e28:	6010      	str	r0, [r2, #0]
 8003e2a:	0628      	lsls	r0, r5, #24
 8003e2c:	d501      	bpl.n	8003e32 <_printf_i+0xc2>
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	e002      	b.n	8003e38 <_printf_i+0xc8>
 8003e32:	0668      	lsls	r0, r5, #25
 8003e34:	d5fb      	bpl.n	8003e2e <_printf_i+0xbe>
 8003e36:	881b      	ldrh	r3, [r3, #0]
 8003e38:	296f      	cmp	r1, #111	; 0x6f
 8003e3a:	bf14      	ite	ne
 8003e3c:	220a      	movne	r2, #10
 8003e3e:	2208      	moveq	r2, #8
 8003e40:	4852      	ldr	r0, [pc, #328]	; (8003f8c <_printf_i+0x21c>)
 8003e42:	2100      	movs	r1, #0
 8003e44:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e48:	6865      	ldr	r5, [r4, #4]
 8003e4a:	2d00      	cmp	r5, #0
 8003e4c:	60a5      	str	r5, [r4, #8]
 8003e4e:	f2c0 8095 	blt.w	8003f7c <_printf_i+0x20c>
 8003e52:	6821      	ldr	r1, [r4, #0]
 8003e54:	f021 0104 	bic.w	r1, r1, #4
 8003e58:	6021      	str	r1, [r4, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d13d      	bne.n	8003eda <_printf_i+0x16a>
 8003e5e:	2d00      	cmp	r5, #0
 8003e60:	f040 808e 	bne.w	8003f80 <_printf_i+0x210>
 8003e64:	4665      	mov	r5, ip
 8003e66:	2a08      	cmp	r2, #8
 8003e68:	d10b      	bne.n	8003e82 <_printf_i+0x112>
 8003e6a:	6823      	ldr	r3, [r4, #0]
 8003e6c:	07db      	lsls	r3, r3, #31
 8003e6e:	d508      	bpl.n	8003e82 <_printf_i+0x112>
 8003e70:	6923      	ldr	r3, [r4, #16]
 8003e72:	6862      	ldr	r2, [r4, #4]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	bfde      	ittt	le
 8003e78:	2330      	movle	r3, #48	; 0x30
 8003e7a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e7e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e82:	ebac 0305 	sub.w	r3, ip, r5
 8003e86:	6123      	str	r3, [r4, #16]
 8003e88:	f8cd 8000 	str.w	r8, [sp]
 8003e8c:	463b      	mov	r3, r7
 8003e8e:	aa03      	add	r2, sp, #12
 8003e90:	4621      	mov	r1, r4
 8003e92:	4630      	mov	r0, r6
 8003e94:	f7ff fef6 	bl	8003c84 <_printf_common>
 8003e98:	3001      	adds	r0, #1
 8003e9a:	d14d      	bne.n	8003f38 <_printf_i+0x1c8>
 8003e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea0:	b005      	add	sp, #20
 8003ea2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003ea6:	4839      	ldr	r0, [pc, #228]	; (8003f8c <_printf_i+0x21c>)
 8003ea8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003eac:	6813      	ldr	r3, [r2, #0]
 8003eae:	6821      	ldr	r1, [r4, #0]
 8003eb0:	1d1d      	adds	r5, r3, #4
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6015      	str	r5, [r2, #0]
 8003eb6:	060a      	lsls	r2, r1, #24
 8003eb8:	d50b      	bpl.n	8003ed2 <_printf_i+0x162>
 8003eba:	07ca      	lsls	r2, r1, #31
 8003ebc:	bf44      	itt	mi
 8003ebe:	f041 0120 	orrmi.w	r1, r1, #32
 8003ec2:	6021      	strmi	r1, [r4, #0]
 8003ec4:	b91b      	cbnz	r3, 8003ece <_printf_i+0x15e>
 8003ec6:	6822      	ldr	r2, [r4, #0]
 8003ec8:	f022 0220 	bic.w	r2, r2, #32
 8003ecc:	6022      	str	r2, [r4, #0]
 8003ece:	2210      	movs	r2, #16
 8003ed0:	e7b7      	b.n	8003e42 <_printf_i+0xd2>
 8003ed2:	064d      	lsls	r5, r1, #25
 8003ed4:	bf48      	it	mi
 8003ed6:	b29b      	uxthmi	r3, r3
 8003ed8:	e7ef      	b.n	8003eba <_printf_i+0x14a>
 8003eda:	4665      	mov	r5, ip
 8003edc:	fbb3 f1f2 	udiv	r1, r3, r2
 8003ee0:	fb02 3311 	mls	r3, r2, r1, r3
 8003ee4:	5cc3      	ldrb	r3, [r0, r3]
 8003ee6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003eea:	460b      	mov	r3, r1
 8003eec:	2900      	cmp	r1, #0
 8003eee:	d1f5      	bne.n	8003edc <_printf_i+0x16c>
 8003ef0:	e7b9      	b.n	8003e66 <_printf_i+0xf6>
 8003ef2:	6813      	ldr	r3, [r2, #0]
 8003ef4:	6825      	ldr	r5, [r4, #0]
 8003ef6:	1d18      	adds	r0, r3, #4
 8003ef8:	6961      	ldr	r1, [r4, #20]
 8003efa:	6010      	str	r0, [r2, #0]
 8003efc:	0628      	lsls	r0, r5, #24
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	d501      	bpl.n	8003f06 <_printf_i+0x196>
 8003f02:	6019      	str	r1, [r3, #0]
 8003f04:	e002      	b.n	8003f0c <_printf_i+0x19c>
 8003f06:	066a      	lsls	r2, r5, #25
 8003f08:	d5fb      	bpl.n	8003f02 <_printf_i+0x192>
 8003f0a:	8019      	strh	r1, [r3, #0]
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	4665      	mov	r5, ip
 8003f10:	6123      	str	r3, [r4, #16]
 8003f12:	e7b9      	b.n	8003e88 <_printf_i+0x118>
 8003f14:	6813      	ldr	r3, [r2, #0]
 8003f16:	1d19      	adds	r1, r3, #4
 8003f18:	6011      	str	r1, [r2, #0]
 8003f1a:	681d      	ldr	r5, [r3, #0]
 8003f1c:	6862      	ldr	r2, [r4, #4]
 8003f1e:	2100      	movs	r1, #0
 8003f20:	4628      	mov	r0, r5
 8003f22:	f002 fa93 	bl	800644c <memchr>
 8003f26:	b108      	cbz	r0, 8003f2c <_printf_i+0x1bc>
 8003f28:	1b40      	subs	r0, r0, r5
 8003f2a:	6060      	str	r0, [r4, #4]
 8003f2c:	6863      	ldr	r3, [r4, #4]
 8003f2e:	6123      	str	r3, [r4, #16]
 8003f30:	2300      	movs	r3, #0
 8003f32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f36:	e7a7      	b.n	8003e88 <_printf_i+0x118>
 8003f38:	6923      	ldr	r3, [r4, #16]
 8003f3a:	462a      	mov	r2, r5
 8003f3c:	4639      	mov	r1, r7
 8003f3e:	4630      	mov	r0, r6
 8003f40:	47c0      	blx	r8
 8003f42:	3001      	adds	r0, #1
 8003f44:	d0aa      	beq.n	8003e9c <_printf_i+0x12c>
 8003f46:	6823      	ldr	r3, [r4, #0]
 8003f48:	079b      	lsls	r3, r3, #30
 8003f4a:	d413      	bmi.n	8003f74 <_printf_i+0x204>
 8003f4c:	68e0      	ldr	r0, [r4, #12]
 8003f4e:	9b03      	ldr	r3, [sp, #12]
 8003f50:	4298      	cmp	r0, r3
 8003f52:	bfb8      	it	lt
 8003f54:	4618      	movlt	r0, r3
 8003f56:	e7a3      	b.n	8003ea0 <_printf_i+0x130>
 8003f58:	2301      	movs	r3, #1
 8003f5a:	464a      	mov	r2, r9
 8003f5c:	4639      	mov	r1, r7
 8003f5e:	4630      	mov	r0, r6
 8003f60:	47c0      	blx	r8
 8003f62:	3001      	adds	r0, #1
 8003f64:	d09a      	beq.n	8003e9c <_printf_i+0x12c>
 8003f66:	3501      	adds	r5, #1
 8003f68:	68e3      	ldr	r3, [r4, #12]
 8003f6a:	9a03      	ldr	r2, [sp, #12]
 8003f6c:	1a9b      	subs	r3, r3, r2
 8003f6e:	42ab      	cmp	r3, r5
 8003f70:	dcf2      	bgt.n	8003f58 <_printf_i+0x1e8>
 8003f72:	e7eb      	b.n	8003f4c <_printf_i+0x1dc>
 8003f74:	2500      	movs	r5, #0
 8003f76:	f104 0919 	add.w	r9, r4, #25
 8003f7a:	e7f5      	b.n	8003f68 <_printf_i+0x1f8>
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1ac      	bne.n	8003eda <_printf_i+0x16a>
 8003f80:	7803      	ldrb	r3, [r0, #0]
 8003f82:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f86:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f8a:	e76c      	b.n	8003e66 <_printf_i+0xf6>
 8003f8c:	080071fc 	.word	0x080071fc
 8003f90:	0800720d 	.word	0x0800720d

08003f94 <_scanf_float>:
 8003f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f98:	469a      	mov	sl, r3
 8003f9a:	688b      	ldr	r3, [r1, #8]
 8003f9c:	4616      	mov	r6, r2
 8003f9e:	1e5a      	subs	r2, r3, #1
 8003fa0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003fa4:	bf88      	it	hi
 8003fa6:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8003faa:	b087      	sub	sp, #28
 8003fac:	bf85      	ittet	hi
 8003fae:	189b      	addhi	r3, r3, r2
 8003fb0:	9301      	strhi	r3, [sp, #4]
 8003fb2:	2300      	movls	r3, #0
 8003fb4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003fb8:	4688      	mov	r8, r1
 8003fba:	f04f 0b00 	mov.w	fp, #0
 8003fbe:	bf8c      	ite	hi
 8003fc0:	608b      	strhi	r3, [r1, #8]
 8003fc2:	9301      	strls	r3, [sp, #4]
 8003fc4:	680b      	ldr	r3, [r1, #0]
 8003fc6:	4607      	mov	r7, r0
 8003fc8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003fcc:	f848 3b1c 	str.w	r3, [r8], #28
 8003fd0:	460c      	mov	r4, r1
 8003fd2:	4645      	mov	r5, r8
 8003fd4:	465a      	mov	r2, fp
 8003fd6:	46d9      	mov	r9, fp
 8003fd8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8003fdc:	f8cd b008 	str.w	fp, [sp, #8]
 8003fe0:	68a1      	ldr	r1, [r4, #8]
 8003fe2:	b181      	cbz	r1, 8004006 <_scanf_float+0x72>
 8003fe4:	6833      	ldr	r3, [r6, #0]
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	2b49      	cmp	r3, #73	; 0x49
 8003fea:	d071      	beq.n	80040d0 <_scanf_float+0x13c>
 8003fec:	d84d      	bhi.n	800408a <_scanf_float+0xf6>
 8003fee:	2b39      	cmp	r3, #57	; 0x39
 8003ff0:	d840      	bhi.n	8004074 <_scanf_float+0xe0>
 8003ff2:	2b31      	cmp	r3, #49	; 0x31
 8003ff4:	f080 8088 	bcs.w	8004108 <_scanf_float+0x174>
 8003ff8:	2b2d      	cmp	r3, #45	; 0x2d
 8003ffa:	f000 8090 	beq.w	800411e <_scanf_float+0x18a>
 8003ffe:	d815      	bhi.n	800402c <_scanf_float+0x98>
 8004000:	2b2b      	cmp	r3, #43	; 0x2b
 8004002:	f000 808c 	beq.w	800411e <_scanf_float+0x18a>
 8004006:	f1b9 0f00 	cmp.w	r9, #0
 800400a:	d003      	beq.n	8004014 <_scanf_float+0x80>
 800400c:	6823      	ldr	r3, [r4, #0]
 800400e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004012:	6023      	str	r3, [r4, #0]
 8004014:	3a01      	subs	r2, #1
 8004016:	2a01      	cmp	r2, #1
 8004018:	f200 80ea 	bhi.w	80041f0 <_scanf_float+0x25c>
 800401c:	4545      	cmp	r5, r8
 800401e:	f200 80dc 	bhi.w	80041da <_scanf_float+0x246>
 8004022:	2601      	movs	r6, #1
 8004024:	4630      	mov	r0, r6
 8004026:	b007      	add	sp, #28
 8004028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800402c:	2b2e      	cmp	r3, #46	; 0x2e
 800402e:	f000 809f 	beq.w	8004170 <_scanf_float+0x1dc>
 8004032:	2b30      	cmp	r3, #48	; 0x30
 8004034:	d1e7      	bne.n	8004006 <_scanf_float+0x72>
 8004036:	6820      	ldr	r0, [r4, #0]
 8004038:	f410 7f80 	tst.w	r0, #256	; 0x100
 800403c:	d064      	beq.n	8004108 <_scanf_float+0x174>
 800403e:	9b01      	ldr	r3, [sp, #4]
 8004040:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8004044:	6020      	str	r0, [r4, #0]
 8004046:	f109 0901 	add.w	r9, r9, #1
 800404a:	b11b      	cbz	r3, 8004054 <_scanf_float+0xc0>
 800404c:	3b01      	subs	r3, #1
 800404e:	3101      	adds	r1, #1
 8004050:	9301      	str	r3, [sp, #4]
 8004052:	60a1      	str	r1, [r4, #8]
 8004054:	68a3      	ldr	r3, [r4, #8]
 8004056:	3b01      	subs	r3, #1
 8004058:	60a3      	str	r3, [r4, #8]
 800405a:	6923      	ldr	r3, [r4, #16]
 800405c:	3301      	adds	r3, #1
 800405e:	6123      	str	r3, [r4, #16]
 8004060:	6873      	ldr	r3, [r6, #4]
 8004062:	3b01      	subs	r3, #1
 8004064:	2b00      	cmp	r3, #0
 8004066:	6073      	str	r3, [r6, #4]
 8004068:	f340 80ac 	ble.w	80041c4 <_scanf_float+0x230>
 800406c:	6833      	ldr	r3, [r6, #0]
 800406e:	3301      	adds	r3, #1
 8004070:	6033      	str	r3, [r6, #0]
 8004072:	e7b5      	b.n	8003fe0 <_scanf_float+0x4c>
 8004074:	2b45      	cmp	r3, #69	; 0x45
 8004076:	f000 8085 	beq.w	8004184 <_scanf_float+0x1f0>
 800407a:	2b46      	cmp	r3, #70	; 0x46
 800407c:	d06a      	beq.n	8004154 <_scanf_float+0x1c0>
 800407e:	2b41      	cmp	r3, #65	; 0x41
 8004080:	d1c1      	bne.n	8004006 <_scanf_float+0x72>
 8004082:	2a01      	cmp	r2, #1
 8004084:	d1bf      	bne.n	8004006 <_scanf_float+0x72>
 8004086:	2202      	movs	r2, #2
 8004088:	e046      	b.n	8004118 <_scanf_float+0x184>
 800408a:	2b65      	cmp	r3, #101	; 0x65
 800408c:	d07a      	beq.n	8004184 <_scanf_float+0x1f0>
 800408e:	d818      	bhi.n	80040c2 <_scanf_float+0x12e>
 8004090:	2b54      	cmp	r3, #84	; 0x54
 8004092:	d066      	beq.n	8004162 <_scanf_float+0x1ce>
 8004094:	d811      	bhi.n	80040ba <_scanf_float+0x126>
 8004096:	2b4e      	cmp	r3, #78	; 0x4e
 8004098:	d1b5      	bne.n	8004006 <_scanf_float+0x72>
 800409a:	2a00      	cmp	r2, #0
 800409c:	d146      	bne.n	800412c <_scanf_float+0x198>
 800409e:	f1b9 0f00 	cmp.w	r9, #0
 80040a2:	d145      	bne.n	8004130 <_scanf_float+0x19c>
 80040a4:	6821      	ldr	r1, [r4, #0]
 80040a6:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80040aa:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80040ae:	d13f      	bne.n	8004130 <_scanf_float+0x19c>
 80040b0:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80040b4:	6021      	str	r1, [r4, #0]
 80040b6:	2201      	movs	r2, #1
 80040b8:	e02e      	b.n	8004118 <_scanf_float+0x184>
 80040ba:	2b59      	cmp	r3, #89	; 0x59
 80040bc:	d01e      	beq.n	80040fc <_scanf_float+0x168>
 80040be:	2b61      	cmp	r3, #97	; 0x61
 80040c0:	e7de      	b.n	8004080 <_scanf_float+0xec>
 80040c2:	2b6e      	cmp	r3, #110	; 0x6e
 80040c4:	d0e9      	beq.n	800409a <_scanf_float+0x106>
 80040c6:	d815      	bhi.n	80040f4 <_scanf_float+0x160>
 80040c8:	2b66      	cmp	r3, #102	; 0x66
 80040ca:	d043      	beq.n	8004154 <_scanf_float+0x1c0>
 80040cc:	2b69      	cmp	r3, #105	; 0x69
 80040ce:	d19a      	bne.n	8004006 <_scanf_float+0x72>
 80040d0:	f1bb 0f00 	cmp.w	fp, #0
 80040d4:	d138      	bne.n	8004148 <_scanf_float+0x1b4>
 80040d6:	f1b9 0f00 	cmp.w	r9, #0
 80040da:	d197      	bne.n	800400c <_scanf_float+0x78>
 80040dc:	6821      	ldr	r1, [r4, #0]
 80040de:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80040e2:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80040e6:	d195      	bne.n	8004014 <_scanf_float+0x80>
 80040e8:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80040ec:	6021      	str	r1, [r4, #0]
 80040ee:	f04f 0b01 	mov.w	fp, #1
 80040f2:	e011      	b.n	8004118 <_scanf_float+0x184>
 80040f4:	2b74      	cmp	r3, #116	; 0x74
 80040f6:	d034      	beq.n	8004162 <_scanf_float+0x1ce>
 80040f8:	2b79      	cmp	r3, #121	; 0x79
 80040fa:	d184      	bne.n	8004006 <_scanf_float+0x72>
 80040fc:	f1bb 0f07 	cmp.w	fp, #7
 8004100:	d181      	bne.n	8004006 <_scanf_float+0x72>
 8004102:	f04f 0b08 	mov.w	fp, #8
 8004106:	e007      	b.n	8004118 <_scanf_float+0x184>
 8004108:	eb12 0f0b 	cmn.w	r2, fp
 800410c:	f47f af7b 	bne.w	8004006 <_scanf_float+0x72>
 8004110:	6821      	ldr	r1, [r4, #0]
 8004112:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8004116:	6021      	str	r1, [r4, #0]
 8004118:	702b      	strb	r3, [r5, #0]
 800411a:	3501      	adds	r5, #1
 800411c:	e79a      	b.n	8004054 <_scanf_float+0xc0>
 800411e:	6821      	ldr	r1, [r4, #0]
 8004120:	0608      	lsls	r0, r1, #24
 8004122:	f57f af70 	bpl.w	8004006 <_scanf_float+0x72>
 8004126:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800412a:	e7f4      	b.n	8004116 <_scanf_float+0x182>
 800412c:	2a02      	cmp	r2, #2
 800412e:	d047      	beq.n	80041c0 <_scanf_float+0x22c>
 8004130:	f1bb 0f01 	cmp.w	fp, #1
 8004134:	d003      	beq.n	800413e <_scanf_float+0x1aa>
 8004136:	f1bb 0f04 	cmp.w	fp, #4
 800413a:	f47f af64 	bne.w	8004006 <_scanf_float+0x72>
 800413e:	f10b 0b01 	add.w	fp, fp, #1
 8004142:	fa5f fb8b 	uxtb.w	fp, fp
 8004146:	e7e7      	b.n	8004118 <_scanf_float+0x184>
 8004148:	f1bb 0f03 	cmp.w	fp, #3
 800414c:	d0f7      	beq.n	800413e <_scanf_float+0x1aa>
 800414e:	f1bb 0f05 	cmp.w	fp, #5
 8004152:	e7f2      	b.n	800413a <_scanf_float+0x1a6>
 8004154:	f1bb 0f02 	cmp.w	fp, #2
 8004158:	f47f af55 	bne.w	8004006 <_scanf_float+0x72>
 800415c:	f04f 0b03 	mov.w	fp, #3
 8004160:	e7da      	b.n	8004118 <_scanf_float+0x184>
 8004162:	f1bb 0f06 	cmp.w	fp, #6
 8004166:	f47f af4e 	bne.w	8004006 <_scanf_float+0x72>
 800416a:	f04f 0b07 	mov.w	fp, #7
 800416e:	e7d3      	b.n	8004118 <_scanf_float+0x184>
 8004170:	6821      	ldr	r1, [r4, #0]
 8004172:	0588      	lsls	r0, r1, #22
 8004174:	f57f af47 	bpl.w	8004006 <_scanf_float+0x72>
 8004178:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800417c:	6021      	str	r1, [r4, #0]
 800417e:	f8cd 9008 	str.w	r9, [sp, #8]
 8004182:	e7c9      	b.n	8004118 <_scanf_float+0x184>
 8004184:	6821      	ldr	r1, [r4, #0]
 8004186:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800418a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800418e:	d006      	beq.n	800419e <_scanf_float+0x20a>
 8004190:	0548      	lsls	r0, r1, #21
 8004192:	f57f af38 	bpl.w	8004006 <_scanf_float+0x72>
 8004196:	f1b9 0f00 	cmp.w	r9, #0
 800419a:	f43f af3b 	beq.w	8004014 <_scanf_float+0x80>
 800419e:	0588      	lsls	r0, r1, #22
 80041a0:	bf58      	it	pl
 80041a2:	9802      	ldrpl	r0, [sp, #8]
 80041a4:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80041a8:	bf58      	it	pl
 80041aa:	eba9 0000 	subpl.w	r0, r9, r0
 80041ae:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80041b2:	bf58      	it	pl
 80041b4:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80041b8:	6021      	str	r1, [r4, #0]
 80041ba:	f04f 0900 	mov.w	r9, #0
 80041be:	e7ab      	b.n	8004118 <_scanf_float+0x184>
 80041c0:	2203      	movs	r2, #3
 80041c2:	e7a9      	b.n	8004118 <_scanf_float+0x184>
 80041c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80041c8:	4631      	mov	r1, r6
 80041ca:	4638      	mov	r0, r7
 80041cc:	9205      	str	r2, [sp, #20]
 80041ce:	4798      	blx	r3
 80041d0:	9a05      	ldr	r2, [sp, #20]
 80041d2:	2800      	cmp	r0, #0
 80041d4:	f43f af04 	beq.w	8003fe0 <_scanf_float+0x4c>
 80041d8:	e715      	b.n	8004006 <_scanf_float+0x72>
 80041da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80041de:	4632      	mov	r2, r6
 80041e0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80041e4:	4638      	mov	r0, r7
 80041e6:	4798      	blx	r3
 80041e8:	6923      	ldr	r3, [r4, #16]
 80041ea:	3b01      	subs	r3, #1
 80041ec:	6123      	str	r3, [r4, #16]
 80041ee:	e715      	b.n	800401c <_scanf_float+0x88>
 80041f0:	f10b 33ff 	add.w	r3, fp, #4294967295
 80041f4:	2b06      	cmp	r3, #6
 80041f6:	d80a      	bhi.n	800420e <_scanf_float+0x27a>
 80041f8:	f1bb 0f02 	cmp.w	fp, #2
 80041fc:	d967      	bls.n	80042ce <_scanf_float+0x33a>
 80041fe:	f1ab 0b03 	sub.w	fp, fp, #3
 8004202:	fa5f fb8b 	uxtb.w	fp, fp
 8004206:	eba5 0b0b 	sub.w	fp, r5, fp
 800420a:	455d      	cmp	r5, fp
 800420c:	d14a      	bne.n	80042a4 <_scanf_float+0x310>
 800420e:	6823      	ldr	r3, [r4, #0]
 8004210:	05da      	lsls	r2, r3, #23
 8004212:	d51f      	bpl.n	8004254 <_scanf_float+0x2c0>
 8004214:	055b      	lsls	r3, r3, #21
 8004216:	d467      	bmi.n	80042e8 <_scanf_float+0x354>
 8004218:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800421c:	6923      	ldr	r3, [r4, #16]
 800421e:	2965      	cmp	r1, #101	; 0x65
 8004220:	f103 33ff 	add.w	r3, r3, #4294967295
 8004224:	f105 3bff 	add.w	fp, r5, #4294967295
 8004228:	6123      	str	r3, [r4, #16]
 800422a:	d00d      	beq.n	8004248 <_scanf_float+0x2b4>
 800422c:	2945      	cmp	r1, #69	; 0x45
 800422e:	d00b      	beq.n	8004248 <_scanf_float+0x2b4>
 8004230:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004234:	4632      	mov	r2, r6
 8004236:	4638      	mov	r0, r7
 8004238:	4798      	blx	r3
 800423a:	6923      	ldr	r3, [r4, #16]
 800423c:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8004240:	3b01      	subs	r3, #1
 8004242:	f1a5 0b02 	sub.w	fp, r5, #2
 8004246:	6123      	str	r3, [r4, #16]
 8004248:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800424c:	4632      	mov	r2, r6
 800424e:	4638      	mov	r0, r7
 8004250:	4798      	blx	r3
 8004252:	465d      	mov	r5, fp
 8004254:	6826      	ldr	r6, [r4, #0]
 8004256:	f016 0610 	ands.w	r6, r6, #16
 800425a:	d176      	bne.n	800434a <_scanf_float+0x3b6>
 800425c:	702e      	strb	r6, [r5, #0]
 800425e:	6823      	ldr	r3, [r4, #0]
 8004260:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004268:	d141      	bne.n	80042ee <_scanf_float+0x35a>
 800426a:	9b02      	ldr	r3, [sp, #8]
 800426c:	eba9 0303 	sub.w	r3, r9, r3
 8004270:	425a      	negs	r2, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d148      	bne.n	8004308 <_scanf_float+0x374>
 8004276:	4641      	mov	r1, r8
 8004278:	2200      	movs	r2, #0
 800427a:	4638      	mov	r0, r7
 800427c:	f000 feb0 	bl	8004fe0 <_strtod_r>
 8004280:	6825      	ldr	r5, [r4, #0]
 8004282:	4680      	mov	r8, r0
 8004284:	f015 0f02 	tst.w	r5, #2
 8004288:	4689      	mov	r9, r1
 800428a:	f8da 3000 	ldr.w	r3, [sl]
 800428e:	d046      	beq.n	800431e <_scanf_float+0x38a>
 8004290:	1d1a      	adds	r2, r3, #4
 8004292:	f8ca 2000 	str.w	r2, [sl]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	e9c3 8900 	strd	r8, r9, [r3]
 800429c:	68e3      	ldr	r3, [r4, #12]
 800429e:	3301      	adds	r3, #1
 80042a0:	60e3      	str	r3, [r4, #12]
 80042a2:	e6bf      	b.n	8004024 <_scanf_float+0x90>
 80042a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80042a8:	4632      	mov	r2, r6
 80042aa:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80042ae:	4638      	mov	r0, r7
 80042b0:	4798      	blx	r3
 80042b2:	6923      	ldr	r3, [r4, #16]
 80042b4:	3b01      	subs	r3, #1
 80042b6:	6123      	str	r3, [r4, #16]
 80042b8:	e7a7      	b.n	800420a <_scanf_float+0x276>
 80042ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80042be:	4632      	mov	r2, r6
 80042c0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80042c4:	4638      	mov	r0, r7
 80042c6:	4798      	blx	r3
 80042c8:	6923      	ldr	r3, [r4, #16]
 80042ca:	3b01      	subs	r3, #1
 80042cc:	6123      	str	r3, [r4, #16]
 80042ce:	4545      	cmp	r5, r8
 80042d0:	d8f3      	bhi.n	80042ba <_scanf_float+0x326>
 80042d2:	e6a6      	b.n	8004022 <_scanf_float+0x8e>
 80042d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80042d8:	4632      	mov	r2, r6
 80042da:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80042de:	4638      	mov	r0, r7
 80042e0:	4798      	blx	r3
 80042e2:	6923      	ldr	r3, [r4, #16]
 80042e4:	3b01      	subs	r3, #1
 80042e6:	6123      	str	r3, [r4, #16]
 80042e8:	4545      	cmp	r5, r8
 80042ea:	d8f3      	bhi.n	80042d4 <_scanf_float+0x340>
 80042ec:	e699      	b.n	8004022 <_scanf_float+0x8e>
 80042ee:	9b03      	ldr	r3, [sp, #12]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d0c0      	beq.n	8004276 <_scanf_float+0x2e2>
 80042f4:	9904      	ldr	r1, [sp, #16]
 80042f6:	230a      	movs	r3, #10
 80042f8:	4632      	mov	r2, r6
 80042fa:	3101      	adds	r1, #1
 80042fc:	4638      	mov	r0, r7
 80042fe:	f000 fefb 	bl	80050f8 <_strtol_r>
 8004302:	9b03      	ldr	r3, [sp, #12]
 8004304:	9d04      	ldr	r5, [sp, #16]
 8004306:	1ac2      	subs	r2, r0, r3
 8004308:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800430c:	429d      	cmp	r5, r3
 800430e:	bf28      	it	cs
 8004310:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8004314:	490e      	ldr	r1, [pc, #56]	; (8004350 <_scanf_float+0x3bc>)
 8004316:	4628      	mov	r0, r5
 8004318:	f000 f820 	bl	800435c <siprintf>
 800431c:	e7ab      	b.n	8004276 <_scanf_float+0x2e2>
 800431e:	1d1f      	adds	r7, r3, #4
 8004320:	f015 0504 	ands.w	r5, r5, #4
 8004324:	f8ca 7000 	str.w	r7, [sl]
 8004328:	d1b5      	bne.n	8004296 <_scanf_float+0x302>
 800432a:	681f      	ldr	r7, [r3, #0]
 800432c:	4602      	mov	r2, r0
 800432e:	460b      	mov	r3, r1
 8004330:	f7fc fb6c 	bl	8000a0c <__aeabi_dcmpun>
 8004334:	b120      	cbz	r0, 8004340 <_scanf_float+0x3ac>
 8004336:	4628      	mov	r0, r5
 8004338:	f000 f80c 	bl	8004354 <nanf>
 800433c:	6038      	str	r0, [r7, #0]
 800433e:	e7ad      	b.n	800429c <_scanf_float+0x308>
 8004340:	4640      	mov	r0, r8
 8004342:	4649      	mov	r1, r9
 8004344:	f7fc fbc0 	bl	8000ac8 <__aeabi_d2f>
 8004348:	e7f8      	b.n	800433c <_scanf_float+0x3a8>
 800434a:	2600      	movs	r6, #0
 800434c:	e66a      	b.n	8004024 <_scanf_float+0x90>
 800434e:	bf00      	nop
 8004350:	0800721e 	.word	0x0800721e

08004354 <nanf>:
 8004354:	4800      	ldr	r0, [pc, #0]	; (8004358 <nanf+0x4>)
 8004356:	4770      	bx	lr
 8004358:	7fc00000 	.word	0x7fc00000

0800435c <siprintf>:
 800435c:	b40e      	push	{r1, r2, r3}
 800435e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004362:	b500      	push	{lr}
 8004364:	b09c      	sub	sp, #112	; 0x70
 8004366:	ab1d      	add	r3, sp, #116	; 0x74
 8004368:	9002      	str	r0, [sp, #8]
 800436a:	9006      	str	r0, [sp, #24]
 800436c:	9107      	str	r1, [sp, #28]
 800436e:	9104      	str	r1, [sp, #16]
 8004370:	4808      	ldr	r0, [pc, #32]	; (8004394 <siprintf+0x38>)
 8004372:	4909      	ldr	r1, [pc, #36]	; (8004398 <siprintf+0x3c>)
 8004374:	f853 2b04 	ldr.w	r2, [r3], #4
 8004378:	9105      	str	r1, [sp, #20]
 800437a:	6800      	ldr	r0, [r0, #0]
 800437c:	a902      	add	r1, sp, #8
 800437e:	9301      	str	r3, [sp, #4]
 8004380:	f002 fd84 	bl	8006e8c <_svfiprintf_r>
 8004384:	2200      	movs	r2, #0
 8004386:	9b02      	ldr	r3, [sp, #8]
 8004388:	701a      	strb	r2, [r3, #0]
 800438a:	b01c      	add	sp, #112	; 0x70
 800438c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004390:	b003      	add	sp, #12
 8004392:	4770      	bx	lr
 8004394:	2000000c 	.word	0x2000000c
 8004398:	ffff0208 	.word	0xffff0208

0800439c <sulp>:
 800439c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043a0:	460f      	mov	r7, r1
 80043a2:	4690      	mov	r8, r2
 80043a4:	f002 fb36 	bl	8006a14 <__ulp>
 80043a8:	4604      	mov	r4, r0
 80043aa:	460d      	mov	r5, r1
 80043ac:	f1b8 0f00 	cmp.w	r8, #0
 80043b0:	d011      	beq.n	80043d6 <sulp+0x3a>
 80043b2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80043b6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	dd0b      	ble.n	80043d6 <sulp+0x3a>
 80043be:	2400      	movs	r4, #0
 80043c0:	051b      	lsls	r3, r3, #20
 80043c2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80043c6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80043ca:	4622      	mov	r2, r4
 80043cc:	462b      	mov	r3, r5
 80043ce:	f7fc f883 	bl	80004d8 <__aeabi_dmul>
 80043d2:	4604      	mov	r4, r0
 80043d4:	460d      	mov	r5, r1
 80043d6:	4620      	mov	r0, r4
 80043d8:	4629      	mov	r1, r5
 80043da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080043e0 <_strtod_l>:
 80043e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043e4:	461f      	mov	r7, r3
 80043e6:	2300      	movs	r3, #0
 80043e8:	b0a1      	sub	sp, #132	; 0x84
 80043ea:	4683      	mov	fp, r0
 80043ec:	4638      	mov	r0, r7
 80043ee:	460e      	mov	r6, r1
 80043f0:	9217      	str	r2, [sp, #92]	; 0x5c
 80043f2:	931c      	str	r3, [sp, #112]	; 0x70
 80043f4:	f001 ffff 	bl	80063f6 <__localeconv_l>
 80043f8:	4680      	mov	r8, r0
 80043fa:	6800      	ldr	r0, [r0, #0]
 80043fc:	f7fb fea8 	bl	8000150 <strlen>
 8004400:	f04f 0900 	mov.w	r9, #0
 8004404:	4604      	mov	r4, r0
 8004406:	f04f 0a00 	mov.w	sl, #0
 800440a:	961b      	str	r6, [sp, #108]	; 0x6c
 800440c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800440e:	781a      	ldrb	r2, [r3, #0]
 8004410:	2a0d      	cmp	r2, #13
 8004412:	d832      	bhi.n	800447a <_strtod_l+0x9a>
 8004414:	2a09      	cmp	r2, #9
 8004416:	d236      	bcs.n	8004486 <_strtod_l+0xa6>
 8004418:	2a00      	cmp	r2, #0
 800441a:	d03e      	beq.n	800449a <_strtod_l+0xba>
 800441c:	2300      	movs	r3, #0
 800441e:	930d      	str	r3, [sp, #52]	; 0x34
 8004420:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004422:	782b      	ldrb	r3, [r5, #0]
 8004424:	2b30      	cmp	r3, #48	; 0x30
 8004426:	f040 80ac 	bne.w	8004582 <_strtod_l+0x1a2>
 800442a:	786b      	ldrb	r3, [r5, #1]
 800442c:	2b58      	cmp	r3, #88	; 0x58
 800442e:	d001      	beq.n	8004434 <_strtod_l+0x54>
 8004430:	2b78      	cmp	r3, #120	; 0x78
 8004432:	d167      	bne.n	8004504 <_strtod_l+0x124>
 8004434:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004436:	9702      	str	r7, [sp, #8]
 8004438:	9301      	str	r3, [sp, #4]
 800443a:	ab1c      	add	r3, sp, #112	; 0x70
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	4a89      	ldr	r2, [pc, #548]	; (8004664 <_strtod_l+0x284>)
 8004440:	ab1d      	add	r3, sp, #116	; 0x74
 8004442:	a91b      	add	r1, sp, #108	; 0x6c
 8004444:	4658      	mov	r0, fp
 8004446:	f001 fcfb 	bl	8005e40 <__gethex>
 800444a:	f010 0407 	ands.w	r4, r0, #7
 800444e:	4606      	mov	r6, r0
 8004450:	d005      	beq.n	800445e <_strtod_l+0x7e>
 8004452:	2c06      	cmp	r4, #6
 8004454:	d12b      	bne.n	80044ae <_strtod_l+0xce>
 8004456:	2300      	movs	r3, #0
 8004458:	3501      	adds	r5, #1
 800445a:	951b      	str	r5, [sp, #108]	; 0x6c
 800445c:	930d      	str	r3, [sp, #52]	; 0x34
 800445e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004460:	2b00      	cmp	r3, #0
 8004462:	f040 85a6 	bne.w	8004fb2 <_strtod_l+0xbd2>
 8004466:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004468:	b1e3      	cbz	r3, 80044a4 <_strtod_l+0xc4>
 800446a:	464a      	mov	r2, r9
 800446c:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8004470:	4610      	mov	r0, r2
 8004472:	4619      	mov	r1, r3
 8004474:	b021      	add	sp, #132	; 0x84
 8004476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800447a:	2a2b      	cmp	r2, #43	; 0x2b
 800447c:	d015      	beq.n	80044aa <_strtod_l+0xca>
 800447e:	2a2d      	cmp	r2, #45	; 0x2d
 8004480:	d004      	beq.n	800448c <_strtod_l+0xac>
 8004482:	2a20      	cmp	r2, #32
 8004484:	d1ca      	bne.n	800441c <_strtod_l+0x3c>
 8004486:	3301      	adds	r3, #1
 8004488:	931b      	str	r3, [sp, #108]	; 0x6c
 800448a:	e7bf      	b.n	800440c <_strtod_l+0x2c>
 800448c:	2201      	movs	r2, #1
 800448e:	920d      	str	r2, [sp, #52]	; 0x34
 8004490:	1c5a      	adds	r2, r3, #1
 8004492:	921b      	str	r2, [sp, #108]	; 0x6c
 8004494:	785b      	ldrb	r3, [r3, #1]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1c2      	bne.n	8004420 <_strtod_l+0x40>
 800449a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800449c:	961b      	str	r6, [sp, #108]	; 0x6c
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f040 8585 	bne.w	8004fae <_strtod_l+0xbce>
 80044a4:	464a      	mov	r2, r9
 80044a6:	4653      	mov	r3, sl
 80044a8:	e7e2      	b.n	8004470 <_strtod_l+0x90>
 80044aa:	2200      	movs	r2, #0
 80044ac:	e7ef      	b.n	800448e <_strtod_l+0xae>
 80044ae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80044b0:	b13a      	cbz	r2, 80044c2 <_strtod_l+0xe2>
 80044b2:	2135      	movs	r1, #53	; 0x35
 80044b4:	a81e      	add	r0, sp, #120	; 0x78
 80044b6:	f002 fba0 	bl	8006bfa <__copybits>
 80044ba:	991c      	ldr	r1, [sp, #112]	; 0x70
 80044bc:	4658      	mov	r0, fp
 80044be:	f002 f812 	bl	80064e6 <_Bfree>
 80044c2:	3c01      	subs	r4, #1
 80044c4:	2c04      	cmp	r4, #4
 80044c6:	d806      	bhi.n	80044d6 <_strtod_l+0xf6>
 80044c8:	e8df f004 	tbb	[pc, r4]
 80044cc:	1714030a 	.word	0x1714030a
 80044d0:	0a          	.byte	0x0a
 80044d1:	00          	.byte	0x00
 80044d2:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 80044d6:	0731      	lsls	r1, r6, #28
 80044d8:	d5c1      	bpl.n	800445e <_strtod_l+0x7e>
 80044da:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 80044de:	e7be      	b.n	800445e <_strtod_l+0x7e>
 80044e0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80044e2:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 80044e6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80044ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80044ee:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 80044f2:	e7f0      	b.n	80044d6 <_strtod_l+0xf6>
 80044f4:	f8df a170 	ldr.w	sl, [pc, #368]	; 8004668 <_strtod_l+0x288>
 80044f8:	e7ed      	b.n	80044d6 <_strtod_l+0xf6>
 80044fa:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80044fe:	f04f 39ff 	mov.w	r9, #4294967295
 8004502:	e7e8      	b.n	80044d6 <_strtod_l+0xf6>
 8004504:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004506:	1c5a      	adds	r2, r3, #1
 8004508:	921b      	str	r2, [sp, #108]	; 0x6c
 800450a:	785b      	ldrb	r3, [r3, #1]
 800450c:	2b30      	cmp	r3, #48	; 0x30
 800450e:	d0f9      	beq.n	8004504 <_strtod_l+0x124>
 8004510:	2b00      	cmp	r3, #0
 8004512:	d0a4      	beq.n	800445e <_strtod_l+0x7e>
 8004514:	2301      	movs	r3, #1
 8004516:	2500      	movs	r5, #0
 8004518:	220a      	movs	r2, #10
 800451a:	9307      	str	r3, [sp, #28]
 800451c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800451e:	9506      	str	r5, [sp, #24]
 8004520:	9308      	str	r3, [sp, #32]
 8004522:	9504      	str	r5, [sp, #16]
 8004524:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8004526:	7807      	ldrb	r7, [r0, #0]
 8004528:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800452c:	b2d9      	uxtb	r1, r3
 800452e:	2909      	cmp	r1, #9
 8004530:	d929      	bls.n	8004586 <_strtod_l+0x1a6>
 8004532:	4622      	mov	r2, r4
 8004534:	f8d8 1000 	ldr.w	r1, [r8]
 8004538:	f002 fdb0 	bl	800709c <strncmp>
 800453c:	2800      	cmp	r0, #0
 800453e:	d031      	beq.n	80045a4 <_strtod_l+0x1c4>
 8004540:	2000      	movs	r0, #0
 8004542:	463b      	mov	r3, r7
 8004544:	4602      	mov	r2, r0
 8004546:	9c04      	ldr	r4, [sp, #16]
 8004548:	9005      	str	r0, [sp, #20]
 800454a:	2b65      	cmp	r3, #101	; 0x65
 800454c:	d001      	beq.n	8004552 <_strtod_l+0x172>
 800454e:	2b45      	cmp	r3, #69	; 0x45
 8004550:	d114      	bne.n	800457c <_strtod_l+0x19c>
 8004552:	b924      	cbnz	r4, 800455e <_strtod_l+0x17e>
 8004554:	b910      	cbnz	r0, 800455c <_strtod_l+0x17c>
 8004556:	9b07      	ldr	r3, [sp, #28]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d09e      	beq.n	800449a <_strtod_l+0xba>
 800455c:	2400      	movs	r4, #0
 800455e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8004560:	1c73      	adds	r3, r6, #1
 8004562:	931b      	str	r3, [sp, #108]	; 0x6c
 8004564:	7873      	ldrb	r3, [r6, #1]
 8004566:	2b2b      	cmp	r3, #43	; 0x2b
 8004568:	d078      	beq.n	800465c <_strtod_l+0x27c>
 800456a:	2b2d      	cmp	r3, #45	; 0x2d
 800456c:	d070      	beq.n	8004650 <_strtod_l+0x270>
 800456e:	f04f 0c00 	mov.w	ip, #0
 8004572:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8004576:	2f09      	cmp	r7, #9
 8004578:	d97c      	bls.n	8004674 <_strtod_l+0x294>
 800457a:	961b      	str	r6, [sp, #108]	; 0x6c
 800457c:	f04f 0e00 	mov.w	lr, #0
 8004580:	e09a      	b.n	80046b8 <_strtod_l+0x2d8>
 8004582:	2300      	movs	r3, #0
 8004584:	e7c7      	b.n	8004516 <_strtod_l+0x136>
 8004586:	9904      	ldr	r1, [sp, #16]
 8004588:	3001      	adds	r0, #1
 800458a:	2908      	cmp	r1, #8
 800458c:	bfd7      	itett	le
 800458e:	9906      	ldrle	r1, [sp, #24]
 8004590:	fb02 3505 	mlagt	r5, r2, r5, r3
 8004594:	fb02 3301 	mlale	r3, r2, r1, r3
 8004598:	9306      	strle	r3, [sp, #24]
 800459a:	9b04      	ldr	r3, [sp, #16]
 800459c:	901b      	str	r0, [sp, #108]	; 0x6c
 800459e:	3301      	adds	r3, #1
 80045a0:	9304      	str	r3, [sp, #16]
 80045a2:	e7bf      	b.n	8004524 <_strtod_l+0x144>
 80045a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80045a6:	191a      	adds	r2, r3, r4
 80045a8:	921b      	str	r2, [sp, #108]	; 0x6c
 80045aa:	9a04      	ldr	r2, [sp, #16]
 80045ac:	5d1b      	ldrb	r3, [r3, r4]
 80045ae:	2a00      	cmp	r2, #0
 80045b0:	d037      	beq.n	8004622 <_strtod_l+0x242>
 80045b2:	4602      	mov	r2, r0
 80045b4:	9c04      	ldr	r4, [sp, #16]
 80045b6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80045ba:	2909      	cmp	r1, #9
 80045bc:	d913      	bls.n	80045e6 <_strtod_l+0x206>
 80045be:	2101      	movs	r1, #1
 80045c0:	9105      	str	r1, [sp, #20]
 80045c2:	e7c2      	b.n	800454a <_strtod_l+0x16a>
 80045c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80045c6:	3001      	adds	r0, #1
 80045c8:	1c5a      	adds	r2, r3, #1
 80045ca:	921b      	str	r2, [sp, #108]	; 0x6c
 80045cc:	785b      	ldrb	r3, [r3, #1]
 80045ce:	2b30      	cmp	r3, #48	; 0x30
 80045d0:	d0f8      	beq.n	80045c4 <_strtod_l+0x1e4>
 80045d2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80045d6:	2a08      	cmp	r2, #8
 80045d8:	f200 84f0 	bhi.w	8004fbc <_strtod_l+0xbdc>
 80045dc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80045de:	9208      	str	r2, [sp, #32]
 80045e0:	4602      	mov	r2, r0
 80045e2:	2000      	movs	r0, #0
 80045e4:	4604      	mov	r4, r0
 80045e6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80045ea:	f100 0101 	add.w	r1, r0, #1
 80045ee:	d012      	beq.n	8004616 <_strtod_l+0x236>
 80045f0:	440a      	add	r2, r1
 80045f2:	270a      	movs	r7, #10
 80045f4:	4621      	mov	r1, r4
 80045f6:	eb00 0c04 	add.w	ip, r0, r4
 80045fa:	458c      	cmp	ip, r1
 80045fc:	d113      	bne.n	8004626 <_strtod_l+0x246>
 80045fe:	1821      	adds	r1, r4, r0
 8004600:	2908      	cmp	r1, #8
 8004602:	f104 0401 	add.w	r4, r4, #1
 8004606:	4404      	add	r4, r0
 8004608:	dc19      	bgt.n	800463e <_strtod_l+0x25e>
 800460a:	210a      	movs	r1, #10
 800460c:	9b06      	ldr	r3, [sp, #24]
 800460e:	fb01 e303 	mla	r3, r1, r3, lr
 8004612:	9306      	str	r3, [sp, #24]
 8004614:	2100      	movs	r1, #0
 8004616:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004618:	1c58      	adds	r0, r3, #1
 800461a:	901b      	str	r0, [sp, #108]	; 0x6c
 800461c:	785b      	ldrb	r3, [r3, #1]
 800461e:	4608      	mov	r0, r1
 8004620:	e7c9      	b.n	80045b6 <_strtod_l+0x1d6>
 8004622:	9804      	ldr	r0, [sp, #16]
 8004624:	e7d3      	b.n	80045ce <_strtod_l+0x1ee>
 8004626:	2908      	cmp	r1, #8
 8004628:	f101 0101 	add.w	r1, r1, #1
 800462c:	dc03      	bgt.n	8004636 <_strtod_l+0x256>
 800462e:	9b06      	ldr	r3, [sp, #24]
 8004630:	437b      	muls	r3, r7
 8004632:	9306      	str	r3, [sp, #24]
 8004634:	e7e1      	b.n	80045fa <_strtod_l+0x21a>
 8004636:	2910      	cmp	r1, #16
 8004638:	bfd8      	it	le
 800463a:	437d      	mulle	r5, r7
 800463c:	e7dd      	b.n	80045fa <_strtod_l+0x21a>
 800463e:	2c10      	cmp	r4, #16
 8004640:	bfdc      	itt	le
 8004642:	210a      	movle	r1, #10
 8004644:	fb01 e505 	mlale	r5, r1, r5, lr
 8004648:	e7e4      	b.n	8004614 <_strtod_l+0x234>
 800464a:	2301      	movs	r3, #1
 800464c:	9305      	str	r3, [sp, #20]
 800464e:	e781      	b.n	8004554 <_strtod_l+0x174>
 8004650:	f04f 0c01 	mov.w	ip, #1
 8004654:	1cb3      	adds	r3, r6, #2
 8004656:	931b      	str	r3, [sp, #108]	; 0x6c
 8004658:	78b3      	ldrb	r3, [r6, #2]
 800465a:	e78a      	b.n	8004572 <_strtod_l+0x192>
 800465c:	f04f 0c00 	mov.w	ip, #0
 8004660:	e7f8      	b.n	8004654 <_strtod_l+0x274>
 8004662:	bf00      	nop
 8004664:	08007224 	.word	0x08007224
 8004668:	7ff00000 	.word	0x7ff00000
 800466c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800466e:	1c5f      	adds	r7, r3, #1
 8004670:	971b      	str	r7, [sp, #108]	; 0x6c
 8004672:	785b      	ldrb	r3, [r3, #1]
 8004674:	2b30      	cmp	r3, #48	; 0x30
 8004676:	d0f9      	beq.n	800466c <_strtod_l+0x28c>
 8004678:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800467c:	2f08      	cmp	r7, #8
 800467e:	f63f af7d 	bhi.w	800457c <_strtod_l+0x19c>
 8004682:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8004686:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004688:	9309      	str	r3, [sp, #36]	; 0x24
 800468a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800468c:	1c5f      	adds	r7, r3, #1
 800468e:	971b      	str	r7, [sp, #108]	; 0x6c
 8004690:	785b      	ldrb	r3, [r3, #1]
 8004692:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8004696:	f1b8 0f09 	cmp.w	r8, #9
 800469a:	d937      	bls.n	800470c <_strtod_l+0x32c>
 800469c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800469e:	1a7f      	subs	r7, r7, r1
 80046a0:	2f08      	cmp	r7, #8
 80046a2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80046a6:	dc37      	bgt.n	8004718 <_strtod_l+0x338>
 80046a8:	45be      	cmp	lr, r7
 80046aa:	bfa8      	it	ge
 80046ac:	46be      	movge	lr, r7
 80046ae:	f1bc 0f00 	cmp.w	ip, #0
 80046b2:	d001      	beq.n	80046b8 <_strtod_l+0x2d8>
 80046b4:	f1ce 0e00 	rsb	lr, lr, #0
 80046b8:	2c00      	cmp	r4, #0
 80046ba:	d151      	bne.n	8004760 <_strtod_l+0x380>
 80046bc:	2800      	cmp	r0, #0
 80046be:	f47f aece 	bne.w	800445e <_strtod_l+0x7e>
 80046c2:	9a07      	ldr	r2, [sp, #28]
 80046c4:	2a00      	cmp	r2, #0
 80046c6:	f47f aeca 	bne.w	800445e <_strtod_l+0x7e>
 80046ca:	9a05      	ldr	r2, [sp, #20]
 80046cc:	2a00      	cmp	r2, #0
 80046ce:	f47f aee4 	bne.w	800449a <_strtod_l+0xba>
 80046d2:	2b4e      	cmp	r3, #78	; 0x4e
 80046d4:	d027      	beq.n	8004726 <_strtod_l+0x346>
 80046d6:	dc21      	bgt.n	800471c <_strtod_l+0x33c>
 80046d8:	2b49      	cmp	r3, #73	; 0x49
 80046da:	f47f aede 	bne.w	800449a <_strtod_l+0xba>
 80046de:	49a4      	ldr	r1, [pc, #656]	; (8004970 <_strtod_l+0x590>)
 80046e0:	a81b      	add	r0, sp, #108	; 0x6c
 80046e2:	f001 fde1 	bl	80062a8 <__match>
 80046e6:	2800      	cmp	r0, #0
 80046e8:	f43f aed7 	beq.w	800449a <_strtod_l+0xba>
 80046ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80046ee:	49a1      	ldr	r1, [pc, #644]	; (8004974 <_strtod_l+0x594>)
 80046f0:	3b01      	subs	r3, #1
 80046f2:	a81b      	add	r0, sp, #108	; 0x6c
 80046f4:	931b      	str	r3, [sp, #108]	; 0x6c
 80046f6:	f001 fdd7 	bl	80062a8 <__match>
 80046fa:	b910      	cbnz	r0, 8004702 <_strtod_l+0x322>
 80046fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80046fe:	3301      	adds	r3, #1
 8004700:	931b      	str	r3, [sp, #108]	; 0x6c
 8004702:	f8df a284 	ldr.w	sl, [pc, #644]	; 8004988 <_strtod_l+0x5a8>
 8004706:	f04f 0900 	mov.w	r9, #0
 800470a:	e6a8      	b.n	800445e <_strtod_l+0x7e>
 800470c:	210a      	movs	r1, #10
 800470e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8004712:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004716:	e7b8      	b.n	800468a <_strtod_l+0x2aa>
 8004718:	46be      	mov	lr, r7
 800471a:	e7c8      	b.n	80046ae <_strtod_l+0x2ce>
 800471c:	2b69      	cmp	r3, #105	; 0x69
 800471e:	d0de      	beq.n	80046de <_strtod_l+0x2fe>
 8004720:	2b6e      	cmp	r3, #110	; 0x6e
 8004722:	f47f aeba 	bne.w	800449a <_strtod_l+0xba>
 8004726:	4994      	ldr	r1, [pc, #592]	; (8004978 <_strtod_l+0x598>)
 8004728:	a81b      	add	r0, sp, #108	; 0x6c
 800472a:	f001 fdbd 	bl	80062a8 <__match>
 800472e:	2800      	cmp	r0, #0
 8004730:	f43f aeb3 	beq.w	800449a <_strtod_l+0xba>
 8004734:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	2b28      	cmp	r3, #40	; 0x28
 800473a:	d10e      	bne.n	800475a <_strtod_l+0x37a>
 800473c:	aa1e      	add	r2, sp, #120	; 0x78
 800473e:	498f      	ldr	r1, [pc, #572]	; (800497c <_strtod_l+0x59c>)
 8004740:	a81b      	add	r0, sp, #108	; 0x6c
 8004742:	f001 fdc5 	bl	80062d0 <__hexnan>
 8004746:	2805      	cmp	r0, #5
 8004748:	d107      	bne.n	800475a <_strtod_l+0x37a>
 800474a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800474c:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8004750:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8004754:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8004758:	e681      	b.n	800445e <_strtod_l+0x7e>
 800475a:	f8df a234 	ldr.w	sl, [pc, #564]	; 8004990 <_strtod_l+0x5b0>
 800475e:	e7d2      	b.n	8004706 <_strtod_l+0x326>
 8004760:	ebae 0302 	sub.w	r3, lr, r2
 8004764:	9307      	str	r3, [sp, #28]
 8004766:	9b04      	ldr	r3, [sp, #16]
 8004768:	9806      	ldr	r0, [sp, #24]
 800476a:	2b00      	cmp	r3, #0
 800476c:	bf08      	it	eq
 800476e:	4623      	moveq	r3, r4
 8004770:	2c10      	cmp	r4, #16
 8004772:	9304      	str	r3, [sp, #16]
 8004774:	46a0      	mov	r8, r4
 8004776:	bfa8      	it	ge
 8004778:	f04f 0810 	movge.w	r8, #16
 800477c:	f7fb fe32 	bl	80003e4 <__aeabi_ui2d>
 8004780:	2c09      	cmp	r4, #9
 8004782:	4681      	mov	r9, r0
 8004784:	468a      	mov	sl, r1
 8004786:	dc13      	bgt.n	80047b0 <_strtod_l+0x3d0>
 8004788:	9b07      	ldr	r3, [sp, #28]
 800478a:	2b00      	cmp	r3, #0
 800478c:	f43f ae67 	beq.w	800445e <_strtod_l+0x7e>
 8004790:	9b07      	ldr	r3, [sp, #28]
 8004792:	dd7e      	ble.n	8004892 <_strtod_l+0x4b2>
 8004794:	2b16      	cmp	r3, #22
 8004796:	dc65      	bgt.n	8004864 <_strtod_l+0x484>
 8004798:	4a79      	ldr	r2, [pc, #484]	; (8004980 <_strtod_l+0x5a0>)
 800479a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800479e:	464a      	mov	r2, r9
 80047a0:	e9de 0100 	ldrd	r0, r1, [lr]
 80047a4:	4653      	mov	r3, sl
 80047a6:	f7fb fe97 	bl	80004d8 <__aeabi_dmul>
 80047aa:	4681      	mov	r9, r0
 80047ac:	468a      	mov	sl, r1
 80047ae:	e656      	b.n	800445e <_strtod_l+0x7e>
 80047b0:	4b73      	ldr	r3, [pc, #460]	; (8004980 <_strtod_l+0x5a0>)
 80047b2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80047b6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80047ba:	f7fb fe8d 	bl	80004d8 <__aeabi_dmul>
 80047be:	4606      	mov	r6, r0
 80047c0:	4628      	mov	r0, r5
 80047c2:	460f      	mov	r7, r1
 80047c4:	f7fb fe0e 	bl	80003e4 <__aeabi_ui2d>
 80047c8:	4602      	mov	r2, r0
 80047ca:	460b      	mov	r3, r1
 80047cc:	4630      	mov	r0, r6
 80047ce:	4639      	mov	r1, r7
 80047d0:	f7fb fccc 	bl	800016c <__adddf3>
 80047d4:	2c0f      	cmp	r4, #15
 80047d6:	4681      	mov	r9, r0
 80047d8:	468a      	mov	sl, r1
 80047da:	ddd5      	ble.n	8004788 <_strtod_l+0x3a8>
 80047dc:	9b07      	ldr	r3, [sp, #28]
 80047de:	eba4 0808 	sub.w	r8, r4, r8
 80047e2:	4498      	add	r8, r3
 80047e4:	f1b8 0f00 	cmp.w	r8, #0
 80047e8:	f340 809a 	ble.w	8004920 <_strtod_l+0x540>
 80047ec:	f018 030f 	ands.w	r3, r8, #15
 80047f0:	d00a      	beq.n	8004808 <_strtod_l+0x428>
 80047f2:	4963      	ldr	r1, [pc, #396]	; (8004980 <_strtod_l+0x5a0>)
 80047f4:	464a      	mov	r2, r9
 80047f6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80047fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80047fe:	4653      	mov	r3, sl
 8004800:	f7fb fe6a 	bl	80004d8 <__aeabi_dmul>
 8004804:	4681      	mov	r9, r0
 8004806:	468a      	mov	sl, r1
 8004808:	f038 080f 	bics.w	r8, r8, #15
 800480c:	d077      	beq.n	80048fe <_strtod_l+0x51e>
 800480e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004812:	dd4b      	ble.n	80048ac <_strtod_l+0x4cc>
 8004814:	f04f 0800 	mov.w	r8, #0
 8004818:	f8cd 8010 	str.w	r8, [sp, #16]
 800481c:	f8cd 8020 	str.w	r8, [sp, #32]
 8004820:	f8cd 8018 	str.w	r8, [sp, #24]
 8004824:	2322      	movs	r3, #34	; 0x22
 8004826:	f04f 0900 	mov.w	r9, #0
 800482a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8004988 <_strtod_l+0x5a8>
 800482e:	f8cb 3000 	str.w	r3, [fp]
 8004832:	9b08      	ldr	r3, [sp, #32]
 8004834:	2b00      	cmp	r3, #0
 8004836:	f43f ae12 	beq.w	800445e <_strtod_l+0x7e>
 800483a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800483c:	4658      	mov	r0, fp
 800483e:	f001 fe52 	bl	80064e6 <_Bfree>
 8004842:	9906      	ldr	r1, [sp, #24]
 8004844:	4658      	mov	r0, fp
 8004846:	f001 fe4e 	bl	80064e6 <_Bfree>
 800484a:	9904      	ldr	r1, [sp, #16]
 800484c:	4658      	mov	r0, fp
 800484e:	f001 fe4a 	bl	80064e6 <_Bfree>
 8004852:	9908      	ldr	r1, [sp, #32]
 8004854:	4658      	mov	r0, fp
 8004856:	f001 fe46 	bl	80064e6 <_Bfree>
 800485a:	4641      	mov	r1, r8
 800485c:	4658      	mov	r0, fp
 800485e:	f001 fe42 	bl	80064e6 <_Bfree>
 8004862:	e5fc      	b.n	800445e <_strtod_l+0x7e>
 8004864:	9a07      	ldr	r2, [sp, #28]
 8004866:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800486a:	4293      	cmp	r3, r2
 800486c:	dbb6      	blt.n	80047dc <_strtod_l+0x3fc>
 800486e:	4d44      	ldr	r5, [pc, #272]	; (8004980 <_strtod_l+0x5a0>)
 8004870:	f1c4 040f 	rsb	r4, r4, #15
 8004874:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004878:	464a      	mov	r2, r9
 800487a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800487e:	4653      	mov	r3, sl
 8004880:	f7fb fe2a 	bl	80004d8 <__aeabi_dmul>
 8004884:	9b07      	ldr	r3, [sp, #28]
 8004886:	1b1c      	subs	r4, r3, r4
 8004888:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800488c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004890:	e789      	b.n	80047a6 <_strtod_l+0x3c6>
 8004892:	f113 0f16 	cmn.w	r3, #22
 8004896:	dba1      	blt.n	80047dc <_strtod_l+0x3fc>
 8004898:	4a39      	ldr	r2, [pc, #228]	; (8004980 <_strtod_l+0x5a0>)
 800489a:	4648      	mov	r0, r9
 800489c:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80048a0:	e9d2 2300 	ldrd	r2, r3, [r2]
 80048a4:	4651      	mov	r1, sl
 80048a6:	f7fb ff41 	bl	800072c <__aeabi_ddiv>
 80048aa:	e77e      	b.n	80047aa <_strtod_l+0x3ca>
 80048ac:	2300      	movs	r3, #0
 80048ae:	4648      	mov	r0, r9
 80048b0:	4651      	mov	r1, sl
 80048b2:	461d      	mov	r5, r3
 80048b4:	4e33      	ldr	r6, [pc, #204]	; (8004984 <_strtod_l+0x5a4>)
 80048b6:	ea4f 1828 	mov.w	r8, r8, asr #4
 80048ba:	f1b8 0f01 	cmp.w	r8, #1
 80048be:	dc21      	bgt.n	8004904 <_strtod_l+0x524>
 80048c0:	b10b      	cbz	r3, 80048c6 <_strtod_l+0x4e6>
 80048c2:	4681      	mov	r9, r0
 80048c4:	468a      	mov	sl, r1
 80048c6:	4b2f      	ldr	r3, [pc, #188]	; (8004984 <_strtod_l+0x5a4>)
 80048c8:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 80048cc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80048d0:	464a      	mov	r2, r9
 80048d2:	e9d5 0100 	ldrd	r0, r1, [r5]
 80048d6:	4653      	mov	r3, sl
 80048d8:	f7fb fdfe 	bl	80004d8 <__aeabi_dmul>
 80048dc:	4b2a      	ldr	r3, [pc, #168]	; (8004988 <_strtod_l+0x5a8>)
 80048de:	460a      	mov	r2, r1
 80048e0:	400b      	ands	r3, r1
 80048e2:	492a      	ldr	r1, [pc, #168]	; (800498c <_strtod_l+0x5ac>)
 80048e4:	4681      	mov	r9, r0
 80048e6:	428b      	cmp	r3, r1
 80048e8:	d894      	bhi.n	8004814 <_strtod_l+0x434>
 80048ea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80048ee:	428b      	cmp	r3, r1
 80048f0:	bf86      	itte	hi
 80048f2:	f04f 39ff 	movhi.w	r9, #4294967295
 80048f6:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 8004994 <_strtod_l+0x5b4>
 80048fa:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 80048fe:	2300      	movs	r3, #0
 8004900:	9305      	str	r3, [sp, #20]
 8004902:	e07b      	b.n	80049fc <_strtod_l+0x61c>
 8004904:	f018 0f01 	tst.w	r8, #1
 8004908:	d006      	beq.n	8004918 <_strtod_l+0x538>
 800490a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800490e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004912:	f7fb fde1 	bl	80004d8 <__aeabi_dmul>
 8004916:	2301      	movs	r3, #1
 8004918:	3501      	adds	r5, #1
 800491a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800491e:	e7cc      	b.n	80048ba <_strtod_l+0x4da>
 8004920:	d0ed      	beq.n	80048fe <_strtod_l+0x51e>
 8004922:	f1c8 0800 	rsb	r8, r8, #0
 8004926:	f018 020f 	ands.w	r2, r8, #15
 800492a:	d00a      	beq.n	8004942 <_strtod_l+0x562>
 800492c:	4b14      	ldr	r3, [pc, #80]	; (8004980 <_strtod_l+0x5a0>)
 800492e:	4648      	mov	r0, r9
 8004930:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004934:	4651      	mov	r1, sl
 8004936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493a:	f7fb fef7 	bl	800072c <__aeabi_ddiv>
 800493e:	4681      	mov	r9, r0
 8004940:	468a      	mov	sl, r1
 8004942:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004946:	d0da      	beq.n	80048fe <_strtod_l+0x51e>
 8004948:	f1b8 0f1f 	cmp.w	r8, #31
 800494c:	dd24      	ble.n	8004998 <_strtod_l+0x5b8>
 800494e:	f04f 0800 	mov.w	r8, #0
 8004952:	f8cd 8010 	str.w	r8, [sp, #16]
 8004956:	f8cd 8020 	str.w	r8, [sp, #32]
 800495a:	f8cd 8018 	str.w	r8, [sp, #24]
 800495e:	2322      	movs	r3, #34	; 0x22
 8004960:	f04f 0900 	mov.w	r9, #0
 8004964:	f04f 0a00 	mov.w	sl, #0
 8004968:	f8cb 3000 	str.w	r3, [fp]
 800496c:	e761      	b.n	8004832 <_strtod_l+0x452>
 800496e:	bf00      	nop
 8004970:	080071ef 	.word	0x080071ef
 8004974:	0800727b 	.word	0x0800727b
 8004978:	080071f7 	.word	0x080071f7
 800497c:	08007238 	.word	0x08007238
 8004980:	080072b8 	.word	0x080072b8
 8004984:	08007290 	.word	0x08007290
 8004988:	7ff00000 	.word	0x7ff00000
 800498c:	7ca00000 	.word	0x7ca00000
 8004990:	fff80000 	.word	0xfff80000
 8004994:	7fefffff 	.word	0x7fefffff
 8004998:	f018 0310 	ands.w	r3, r8, #16
 800499c:	bf18      	it	ne
 800499e:	236a      	movne	r3, #106	; 0x6a
 80049a0:	4648      	mov	r0, r9
 80049a2:	9305      	str	r3, [sp, #20]
 80049a4:	4651      	mov	r1, sl
 80049a6:	2300      	movs	r3, #0
 80049a8:	4da1      	ldr	r5, [pc, #644]	; (8004c30 <_strtod_l+0x850>)
 80049aa:	f1b8 0f00 	cmp.w	r8, #0
 80049ae:	f300 8113 	bgt.w	8004bd8 <_strtod_l+0x7f8>
 80049b2:	b10b      	cbz	r3, 80049b8 <_strtod_l+0x5d8>
 80049b4:	4681      	mov	r9, r0
 80049b6:	468a      	mov	sl, r1
 80049b8:	9b05      	ldr	r3, [sp, #20]
 80049ba:	b1bb      	cbz	r3, 80049ec <_strtod_l+0x60c>
 80049bc:	f3ca 530a 	ubfx	r3, sl, #20, #11
 80049c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	4651      	mov	r1, sl
 80049c8:	dd10      	ble.n	80049ec <_strtod_l+0x60c>
 80049ca:	2b1f      	cmp	r3, #31
 80049cc:	f340 8110 	ble.w	8004bf0 <_strtod_l+0x810>
 80049d0:	2b34      	cmp	r3, #52	; 0x34
 80049d2:	bfd8      	it	le
 80049d4:	f04f 32ff 	movle.w	r2, #4294967295
 80049d8:	f04f 0900 	mov.w	r9, #0
 80049dc:	bfcf      	iteee	gt
 80049de:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 80049e2:	3b20      	suble	r3, #32
 80049e4:	fa02 f303 	lslle.w	r3, r2, r3
 80049e8:	ea03 0a01 	andle.w	sl, r3, r1
 80049ec:	2200      	movs	r2, #0
 80049ee:	2300      	movs	r3, #0
 80049f0:	4648      	mov	r0, r9
 80049f2:	4651      	mov	r1, sl
 80049f4:	f7fb ffd8 	bl	80009a8 <__aeabi_dcmpeq>
 80049f8:	2800      	cmp	r0, #0
 80049fa:	d1a8      	bne.n	800494e <_strtod_l+0x56e>
 80049fc:	9b06      	ldr	r3, [sp, #24]
 80049fe:	9a04      	ldr	r2, [sp, #16]
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	9908      	ldr	r1, [sp, #32]
 8004a04:	4623      	mov	r3, r4
 8004a06:	4658      	mov	r0, fp
 8004a08:	f001 fdbf 	bl	800658a <__s2b>
 8004a0c:	9008      	str	r0, [sp, #32]
 8004a0e:	2800      	cmp	r0, #0
 8004a10:	f43f af00 	beq.w	8004814 <_strtod_l+0x434>
 8004a14:	9a07      	ldr	r2, [sp, #28]
 8004a16:	9b07      	ldr	r3, [sp, #28]
 8004a18:	2a00      	cmp	r2, #0
 8004a1a:	f1c3 0300 	rsb	r3, r3, #0
 8004a1e:	bfa8      	it	ge
 8004a20:	2300      	movge	r3, #0
 8004a22:	f04f 0800 	mov.w	r8, #0
 8004a26:	930e      	str	r3, [sp, #56]	; 0x38
 8004a28:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004a2c:	9316      	str	r3, [sp, #88]	; 0x58
 8004a2e:	f8cd 8010 	str.w	r8, [sp, #16]
 8004a32:	9b08      	ldr	r3, [sp, #32]
 8004a34:	4658      	mov	r0, fp
 8004a36:	6859      	ldr	r1, [r3, #4]
 8004a38:	f001 fd21 	bl	800647e <_Balloc>
 8004a3c:	9006      	str	r0, [sp, #24]
 8004a3e:	2800      	cmp	r0, #0
 8004a40:	f43f aef0 	beq.w	8004824 <_strtod_l+0x444>
 8004a44:	9b08      	ldr	r3, [sp, #32]
 8004a46:	300c      	adds	r0, #12
 8004a48:	691a      	ldr	r2, [r3, #16]
 8004a4a:	f103 010c 	add.w	r1, r3, #12
 8004a4e:	3202      	adds	r2, #2
 8004a50:	0092      	lsls	r2, r2, #2
 8004a52:	f001 fd09 	bl	8006468 <memcpy>
 8004a56:	ab1e      	add	r3, sp, #120	; 0x78
 8004a58:	9301      	str	r3, [sp, #4]
 8004a5a:	ab1d      	add	r3, sp, #116	; 0x74
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	464a      	mov	r2, r9
 8004a60:	4653      	mov	r3, sl
 8004a62:	4658      	mov	r0, fp
 8004a64:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8004a68:	f002 f84a 	bl	8006b00 <__d2b>
 8004a6c:	901c      	str	r0, [sp, #112]	; 0x70
 8004a6e:	2800      	cmp	r0, #0
 8004a70:	f43f aed8 	beq.w	8004824 <_strtod_l+0x444>
 8004a74:	2101      	movs	r1, #1
 8004a76:	4658      	mov	r0, fp
 8004a78:	f001 fe13 	bl	80066a2 <__i2b>
 8004a7c:	9004      	str	r0, [sp, #16]
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2800      	cmp	r0, #0
 8004a82:	f43f aecf 	beq.w	8004824 <_strtod_l+0x444>
 8004a86:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8004a88:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004a8a:	2d00      	cmp	r5, #0
 8004a8c:	bfab      	itete	ge
 8004a8e:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8004a90:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8004a92:	18ee      	addge	r6, r5, r3
 8004a94:	1b5c      	sublt	r4, r3, r5
 8004a96:	9b05      	ldr	r3, [sp, #20]
 8004a98:	bfa8      	it	ge
 8004a9a:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8004a9c:	eba5 0503 	sub.w	r5, r5, r3
 8004aa0:	4415      	add	r5, r2
 8004aa2:	4b64      	ldr	r3, [pc, #400]	; (8004c34 <_strtod_l+0x854>)
 8004aa4:	f105 35ff 	add.w	r5, r5, #4294967295
 8004aa8:	bfb8      	it	lt
 8004aaa:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8004aac:	429d      	cmp	r5, r3
 8004aae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004ab2:	f280 80af 	bge.w	8004c14 <_strtod_l+0x834>
 8004ab6:	1b5b      	subs	r3, r3, r5
 8004ab8:	2b1f      	cmp	r3, #31
 8004aba:	eba2 0203 	sub.w	r2, r2, r3
 8004abe:	f04f 0701 	mov.w	r7, #1
 8004ac2:	f300 809c 	bgt.w	8004bfe <_strtod_l+0x81e>
 8004ac6:	2500      	movs	r5, #0
 8004ac8:	fa07 f303 	lsl.w	r3, r7, r3
 8004acc:	930f      	str	r3, [sp, #60]	; 0x3c
 8004ace:	18b7      	adds	r7, r6, r2
 8004ad0:	9b05      	ldr	r3, [sp, #20]
 8004ad2:	42be      	cmp	r6, r7
 8004ad4:	4414      	add	r4, r2
 8004ad6:	441c      	add	r4, r3
 8004ad8:	4633      	mov	r3, r6
 8004ada:	bfa8      	it	ge
 8004adc:	463b      	movge	r3, r7
 8004ade:	42a3      	cmp	r3, r4
 8004ae0:	bfa8      	it	ge
 8004ae2:	4623      	movge	r3, r4
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	bfc2      	ittt	gt
 8004ae8:	1aff      	subgt	r7, r7, r3
 8004aea:	1ae4      	subgt	r4, r4, r3
 8004aec:	1af6      	subgt	r6, r6, r3
 8004aee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004af0:	b1bb      	cbz	r3, 8004b22 <_strtod_l+0x742>
 8004af2:	461a      	mov	r2, r3
 8004af4:	9904      	ldr	r1, [sp, #16]
 8004af6:	4658      	mov	r0, fp
 8004af8:	f001 fe72 	bl	80067e0 <__pow5mult>
 8004afc:	9004      	str	r0, [sp, #16]
 8004afe:	2800      	cmp	r0, #0
 8004b00:	f43f ae90 	beq.w	8004824 <_strtod_l+0x444>
 8004b04:	4601      	mov	r1, r0
 8004b06:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004b08:	4658      	mov	r0, fp
 8004b0a:	f001 fdd3 	bl	80066b4 <__multiply>
 8004b0e:	9009      	str	r0, [sp, #36]	; 0x24
 8004b10:	2800      	cmp	r0, #0
 8004b12:	f43f ae87 	beq.w	8004824 <_strtod_l+0x444>
 8004b16:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004b18:	4658      	mov	r0, fp
 8004b1a:	f001 fce4 	bl	80064e6 <_Bfree>
 8004b1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b20:	931c      	str	r3, [sp, #112]	; 0x70
 8004b22:	2f00      	cmp	r7, #0
 8004b24:	dc7a      	bgt.n	8004c1c <_strtod_l+0x83c>
 8004b26:	9b07      	ldr	r3, [sp, #28]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	dd08      	ble.n	8004b3e <_strtod_l+0x75e>
 8004b2c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004b2e:	9906      	ldr	r1, [sp, #24]
 8004b30:	4658      	mov	r0, fp
 8004b32:	f001 fe55 	bl	80067e0 <__pow5mult>
 8004b36:	9006      	str	r0, [sp, #24]
 8004b38:	2800      	cmp	r0, #0
 8004b3a:	f43f ae73 	beq.w	8004824 <_strtod_l+0x444>
 8004b3e:	2c00      	cmp	r4, #0
 8004b40:	dd08      	ble.n	8004b54 <_strtod_l+0x774>
 8004b42:	4622      	mov	r2, r4
 8004b44:	9906      	ldr	r1, [sp, #24]
 8004b46:	4658      	mov	r0, fp
 8004b48:	f001 fe98 	bl	800687c <__lshift>
 8004b4c:	9006      	str	r0, [sp, #24]
 8004b4e:	2800      	cmp	r0, #0
 8004b50:	f43f ae68 	beq.w	8004824 <_strtod_l+0x444>
 8004b54:	2e00      	cmp	r6, #0
 8004b56:	dd08      	ble.n	8004b6a <_strtod_l+0x78a>
 8004b58:	4632      	mov	r2, r6
 8004b5a:	9904      	ldr	r1, [sp, #16]
 8004b5c:	4658      	mov	r0, fp
 8004b5e:	f001 fe8d 	bl	800687c <__lshift>
 8004b62:	9004      	str	r0, [sp, #16]
 8004b64:	2800      	cmp	r0, #0
 8004b66:	f43f ae5d 	beq.w	8004824 <_strtod_l+0x444>
 8004b6a:	9a06      	ldr	r2, [sp, #24]
 8004b6c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004b6e:	4658      	mov	r0, fp
 8004b70:	f001 fef2 	bl	8006958 <__mdiff>
 8004b74:	4680      	mov	r8, r0
 8004b76:	2800      	cmp	r0, #0
 8004b78:	f43f ae54 	beq.w	8004824 <_strtod_l+0x444>
 8004b7c:	2400      	movs	r4, #0
 8004b7e:	68c3      	ldr	r3, [r0, #12]
 8004b80:	9904      	ldr	r1, [sp, #16]
 8004b82:	60c4      	str	r4, [r0, #12]
 8004b84:	930c      	str	r3, [sp, #48]	; 0x30
 8004b86:	f001 fecd 	bl	8006924 <__mcmp>
 8004b8a:	42a0      	cmp	r0, r4
 8004b8c:	da54      	bge.n	8004c38 <_strtod_l+0x858>
 8004b8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b90:	b9f3      	cbnz	r3, 8004bd0 <_strtod_l+0x7f0>
 8004b92:	f1b9 0f00 	cmp.w	r9, #0
 8004b96:	d11b      	bne.n	8004bd0 <_strtod_l+0x7f0>
 8004b98:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8004b9c:	b9c3      	cbnz	r3, 8004bd0 <_strtod_l+0x7f0>
 8004b9e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004ba2:	0d1b      	lsrs	r3, r3, #20
 8004ba4:	051b      	lsls	r3, r3, #20
 8004ba6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004baa:	d911      	bls.n	8004bd0 <_strtod_l+0x7f0>
 8004bac:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8004bb0:	b91b      	cbnz	r3, 8004bba <_strtod_l+0x7da>
 8004bb2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	dd0a      	ble.n	8004bd0 <_strtod_l+0x7f0>
 8004bba:	4641      	mov	r1, r8
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	4658      	mov	r0, fp
 8004bc0:	f001 fe5c 	bl	800687c <__lshift>
 8004bc4:	9904      	ldr	r1, [sp, #16]
 8004bc6:	4680      	mov	r8, r0
 8004bc8:	f001 feac 	bl	8006924 <__mcmp>
 8004bcc:	2800      	cmp	r0, #0
 8004bce:	dc68      	bgt.n	8004ca2 <_strtod_l+0x8c2>
 8004bd0:	9b05      	ldr	r3, [sp, #20]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d172      	bne.n	8004cbc <_strtod_l+0x8dc>
 8004bd6:	e630      	b.n	800483a <_strtod_l+0x45a>
 8004bd8:	f018 0f01 	tst.w	r8, #1
 8004bdc:	d004      	beq.n	8004be8 <_strtod_l+0x808>
 8004bde:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004be2:	f7fb fc79 	bl	80004d8 <__aeabi_dmul>
 8004be6:	2301      	movs	r3, #1
 8004be8:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004bec:	3508      	adds	r5, #8
 8004bee:	e6dc      	b.n	80049aa <_strtod_l+0x5ca>
 8004bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8004bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf8:	ea03 0909 	and.w	r9, r3, r9
 8004bfc:	e6f6      	b.n	80049ec <_strtod_l+0x60c>
 8004bfe:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8004c02:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8004c06:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8004c0a:	35e2      	adds	r5, #226	; 0xe2
 8004c0c:	fa07 f505 	lsl.w	r5, r7, r5
 8004c10:	970f      	str	r7, [sp, #60]	; 0x3c
 8004c12:	e75c      	b.n	8004ace <_strtod_l+0x6ee>
 8004c14:	2301      	movs	r3, #1
 8004c16:	2500      	movs	r5, #0
 8004c18:	930f      	str	r3, [sp, #60]	; 0x3c
 8004c1a:	e758      	b.n	8004ace <_strtod_l+0x6ee>
 8004c1c:	463a      	mov	r2, r7
 8004c1e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004c20:	4658      	mov	r0, fp
 8004c22:	f001 fe2b 	bl	800687c <__lshift>
 8004c26:	901c      	str	r0, [sp, #112]	; 0x70
 8004c28:	2800      	cmp	r0, #0
 8004c2a:	f47f af7c 	bne.w	8004b26 <_strtod_l+0x746>
 8004c2e:	e5f9      	b.n	8004824 <_strtod_l+0x444>
 8004c30:	08007250 	.word	0x08007250
 8004c34:	fffffc02 	.word	0xfffffc02
 8004c38:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8004c3c:	f040 8089 	bne.w	8004d52 <_strtod_l+0x972>
 8004c40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c42:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8004c46:	b342      	cbz	r2, 8004c9a <_strtod_l+0x8ba>
 8004c48:	4aaf      	ldr	r2, [pc, #700]	; (8004f08 <_strtod_l+0xb28>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d156      	bne.n	8004cfc <_strtod_l+0x91c>
 8004c4e:	9b05      	ldr	r3, [sp, #20]
 8004c50:	4648      	mov	r0, r9
 8004c52:	b1eb      	cbz	r3, 8004c90 <_strtod_l+0x8b0>
 8004c54:	4653      	mov	r3, sl
 8004c56:	4aad      	ldr	r2, [pc, #692]	; (8004f0c <_strtod_l+0xb2c>)
 8004c58:	f04f 31ff 	mov.w	r1, #4294967295
 8004c5c:	401a      	ands	r2, r3
 8004c5e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004c62:	d818      	bhi.n	8004c96 <_strtod_l+0x8b6>
 8004c64:	0d12      	lsrs	r2, r2, #20
 8004c66:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c6e:	4298      	cmp	r0, r3
 8004c70:	d144      	bne.n	8004cfc <_strtod_l+0x91c>
 8004c72:	4ba7      	ldr	r3, [pc, #668]	; (8004f10 <_strtod_l+0xb30>)
 8004c74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d102      	bne.n	8004c80 <_strtod_l+0x8a0>
 8004c7a:	3001      	adds	r0, #1
 8004c7c:	f43f add2 	beq.w	8004824 <_strtod_l+0x444>
 8004c80:	4ba2      	ldr	r3, [pc, #648]	; (8004f0c <_strtod_l+0xb2c>)
 8004c82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c84:	f04f 0900 	mov.w	r9, #0
 8004c88:	401a      	ands	r2, r3
 8004c8a:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 8004c8e:	e79f      	b.n	8004bd0 <_strtod_l+0x7f0>
 8004c90:	f04f 33ff 	mov.w	r3, #4294967295
 8004c94:	e7eb      	b.n	8004c6e <_strtod_l+0x88e>
 8004c96:	460b      	mov	r3, r1
 8004c98:	e7e9      	b.n	8004c6e <_strtod_l+0x88e>
 8004c9a:	bb7b      	cbnz	r3, 8004cfc <_strtod_l+0x91c>
 8004c9c:	f1b9 0f00 	cmp.w	r9, #0
 8004ca0:	d12c      	bne.n	8004cfc <_strtod_l+0x91c>
 8004ca2:	9905      	ldr	r1, [sp, #20]
 8004ca4:	4653      	mov	r3, sl
 8004ca6:	4a99      	ldr	r2, [pc, #612]	; (8004f0c <_strtod_l+0xb2c>)
 8004ca8:	b1f1      	cbz	r1, 8004ce8 <_strtod_l+0x908>
 8004caa:	ea02 010a 	and.w	r1, r2, sl
 8004cae:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004cb2:	dc19      	bgt.n	8004ce8 <_strtod_l+0x908>
 8004cb4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004cb8:	f77f ae51 	ble.w	800495e <_strtod_l+0x57e>
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	4a95      	ldr	r2, [pc, #596]	; (8004f14 <_strtod_l+0xb34>)
 8004cc0:	4648      	mov	r0, r9
 8004cc2:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8004cc6:	4651      	mov	r1, sl
 8004cc8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004ccc:	f7fb fc04 	bl	80004d8 <__aeabi_dmul>
 8004cd0:	4681      	mov	r9, r0
 8004cd2:	468a      	mov	sl, r1
 8004cd4:	2900      	cmp	r1, #0
 8004cd6:	f47f adb0 	bne.w	800483a <_strtod_l+0x45a>
 8004cda:	2800      	cmp	r0, #0
 8004cdc:	f47f adad 	bne.w	800483a <_strtod_l+0x45a>
 8004ce0:	2322      	movs	r3, #34	; 0x22
 8004ce2:	f8cb 3000 	str.w	r3, [fp]
 8004ce6:	e5a8      	b.n	800483a <_strtod_l+0x45a>
 8004ce8:	4013      	ands	r3, r2
 8004cea:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004cee:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8004cf2:	f04f 39ff 	mov.w	r9, #4294967295
 8004cf6:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 8004cfa:	e769      	b.n	8004bd0 <_strtod_l+0x7f0>
 8004cfc:	b19d      	cbz	r5, 8004d26 <_strtod_l+0x946>
 8004cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d00:	421d      	tst	r5, r3
 8004d02:	f43f af65 	beq.w	8004bd0 <_strtod_l+0x7f0>
 8004d06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004d08:	9a05      	ldr	r2, [sp, #20]
 8004d0a:	4648      	mov	r0, r9
 8004d0c:	4651      	mov	r1, sl
 8004d0e:	b173      	cbz	r3, 8004d2e <_strtod_l+0x94e>
 8004d10:	f7ff fb44 	bl	800439c <sulp>
 8004d14:	4602      	mov	r2, r0
 8004d16:	460b      	mov	r3, r1
 8004d18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004d1c:	f7fb fa26 	bl	800016c <__adddf3>
 8004d20:	4681      	mov	r9, r0
 8004d22:	468a      	mov	sl, r1
 8004d24:	e754      	b.n	8004bd0 <_strtod_l+0x7f0>
 8004d26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d28:	ea13 0f09 	tst.w	r3, r9
 8004d2c:	e7e9      	b.n	8004d02 <_strtod_l+0x922>
 8004d2e:	f7ff fb35 	bl	800439c <sulp>
 8004d32:	4602      	mov	r2, r0
 8004d34:	460b      	mov	r3, r1
 8004d36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004d3a:	f7fb fa15 	bl	8000168 <__aeabi_dsub>
 8004d3e:	2200      	movs	r2, #0
 8004d40:	2300      	movs	r3, #0
 8004d42:	4681      	mov	r9, r0
 8004d44:	468a      	mov	sl, r1
 8004d46:	f7fb fe2f 	bl	80009a8 <__aeabi_dcmpeq>
 8004d4a:	2800      	cmp	r0, #0
 8004d4c:	f47f ae07 	bne.w	800495e <_strtod_l+0x57e>
 8004d50:	e73e      	b.n	8004bd0 <_strtod_l+0x7f0>
 8004d52:	9904      	ldr	r1, [sp, #16]
 8004d54:	4640      	mov	r0, r8
 8004d56:	f001 ff22 	bl	8006b9e <__ratio>
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d60:	4606      	mov	r6, r0
 8004d62:	460f      	mov	r7, r1
 8004d64:	f7fb fe34 	bl	80009d0 <__aeabi_dcmple>
 8004d68:	2800      	cmp	r0, #0
 8004d6a:	d075      	beq.n	8004e58 <_strtod_l+0xa78>
 8004d6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d047      	beq.n	8004e02 <_strtod_l+0xa22>
 8004d72:	2600      	movs	r6, #0
 8004d74:	4f68      	ldr	r7, [pc, #416]	; (8004f18 <_strtod_l+0xb38>)
 8004d76:	4d68      	ldr	r5, [pc, #416]	; (8004f18 <_strtod_l+0xb38>)
 8004d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d7e:	0d1b      	lsrs	r3, r3, #20
 8004d80:	051b      	lsls	r3, r3, #20
 8004d82:	930f      	str	r3, [sp, #60]	; 0x3c
 8004d84:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004d86:	4b65      	ldr	r3, [pc, #404]	; (8004f1c <_strtod_l+0xb3c>)
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	f040 80cf 	bne.w	8004f2c <_strtod_l+0xb4c>
 8004d8e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004d92:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8004d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d98:	4648      	mov	r0, r9
 8004d9a:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 8004d9e:	4651      	mov	r1, sl
 8004da0:	f001 fe38 	bl	8006a14 <__ulp>
 8004da4:	4602      	mov	r2, r0
 8004da6:	460b      	mov	r3, r1
 8004da8:	4630      	mov	r0, r6
 8004daa:	4639      	mov	r1, r7
 8004dac:	f7fb fb94 	bl	80004d8 <__aeabi_dmul>
 8004db0:	464a      	mov	r2, r9
 8004db2:	4653      	mov	r3, sl
 8004db4:	f7fb f9da 	bl	800016c <__adddf3>
 8004db8:	460b      	mov	r3, r1
 8004dba:	4954      	ldr	r1, [pc, #336]	; (8004f0c <_strtod_l+0xb2c>)
 8004dbc:	4a58      	ldr	r2, [pc, #352]	; (8004f20 <_strtod_l+0xb40>)
 8004dbe:	4019      	ands	r1, r3
 8004dc0:	4291      	cmp	r1, r2
 8004dc2:	4681      	mov	r9, r0
 8004dc4:	d95e      	bls.n	8004e84 <_strtod_l+0xaa4>
 8004dc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004dc8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d103      	bne.n	8004dd8 <_strtod_l+0x9f8>
 8004dd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	f43f ad26 	beq.w	8004824 <_strtod_l+0x444>
 8004dd8:	f04f 39ff 	mov.w	r9, #4294967295
 8004ddc:	f8df a130 	ldr.w	sl, [pc, #304]	; 8004f10 <_strtod_l+0xb30>
 8004de0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004de2:	4658      	mov	r0, fp
 8004de4:	f001 fb7f 	bl	80064e6 <_Bfree>
 8004de8:	9906      	ldr	r1, [sp, #24]
 8004dea:	4658      	mov	r0, fp
 8004dec:	f001 fb7b 	bl	80064e6 <_Bfree>
 8004df0:	9904      	ldr	r1, [sp, #16]
 8004df2:	4658      	mov	r0, fp
 8004df4:	f001 fb77 	bl	80064e6 <_Bfree>
 8004df8:	4641      	mov	r1, r8
 8004dfa:	4658      	mov	r0, fp
 8004dfc:	f001 fb73 	bl	80064e6 <_Bfree>
 8004e00:	e617      	b.n	8004a32 <_strtod_l+0x652>
 8004e02:	f1b9 0f00 	cmp.w	r9, #0
 8004e06:	d119      	bne.n	8004e3c <_strtod_l+0xa5c>
 8004e08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e0e:	b9e3      	cbnz	r3, 8004e4a <_strtod_l+0xa6a>
 8004e10:	2200      	movs	r2, #0
 8004e12:	4b41      	ldr	r3, [pc, #260]	; (8004f18 <_strtod_l+0xb38>)
 8004e14:	4630      	mov	r0, r6
 8004e16:	4639      	mov	r1, r7
 8004e18:	f7fb fdd0 	bl	80009bc <__aeabi_dcmplt>
 8004e1c:	b9c8      	cbnz	r0, 8004e52 <_strtod_l+0xa72>
 8004e1e:	2200      	movs	r2, #0
 8004e20:	4b40      	ldr	r3, [pc, #256]	; (8004f24 <_strtod_l+0xb44>)
 8004e22:	4630      	mov	r0, r6
 8004e24:	4639      	mov	r1, r7
 8004e26:	f7fb fb57 	bl	80004d8 <__aeabi_dmul>
 8004e2a:	4604      	mov	r4, r0
 8004e2c:	460d      	mov	r5, r1
 8004e2e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004e32:	9418      	str	r4, [sp, #96]	; 0x60
 8004e34:	9319      	str	r3, [sp, #100]	; 0x64
 8004e36:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8004e3a:	e79d      	b.n	8004d78 <_strtod_l+0x998>
 8004e3c:	f1b9 0f01 	cmp.w	r9, #1
 8004e40:	d103      	bne.n	8004e4a <_strtod_l+0xa6a>
 8004e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f43f ad8a 	beq.w	800495e <_strtod_l+0x57e>
 8004e4a:	2600      	movs	r6, #0
 8004e4c:	4f36      	ldr	r7, [pc, #216]	; (8004f28 <_strtod_l+0xb48>)
 8004e4e:	2400      	movs	r4, #0
 8004e50:	e791      	b.n	8004d76 <_strtod_l+0x996>
 8004e52:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004e54:	4d33      	ldr	r5, [pc, #204]	; (8004f24 <_strtod_l+0xb44>)
 8004e56:	e7ea      	b.n	8004e2e <_strtod_l+0xa4e>
 8004e58:	4b32      	ldr	r3, [pc, #200]	; (8004f24 <_strtod_l+0xb44>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	4630      	mov	r0, r6
 8004e5e:	4639      	mov	r1, r7
 8004e60:	f7fb fb3a 	bl	80004d8 <__aeabi_dmul>
 8004e64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e66:	4604      	mov	r4, r0
 8004e68:	460d      	mov	r5, r1
 8004e6a:	b933      	cbnz	r3, 8004e7a <_strtod_l+0xa9a>
 8004e6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004e70:	9010      	str	r0, [sp, #64]	; 0x40
 8004e72:	9311      	str	r3, [sp, #68]	; 0x44
 8004e74:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004e78:	e77e      	b.n	8004d78 <_strtod_l+0x998>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004e82:	e7f7      	b.n	8004e74 <_strtod_l+0xa94>
 8004e84:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8004e88:	9b05      	ldr	r3, [sp, #20]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1a8      	bne.n	8004de0 <_strtod_l+0xa00>
 8004e8e:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004e92:	0d1b      	lsrs	r3, r3, #20
 8004e94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004e96:	051b      	lsls	r3, r3, #20
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	4656      	mov	r6, sl
 8004e9c:	d1a0      	bne.n	8004de0 <_strtod_l+0xa00>
 8004e9e:	4629      	mov	r1, r5
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	f7fb fdc9 	bl	8000a38 <__aeabi_d2iz>
 8004ea6:	f7fb faad 	bl	8000404 <__aeabi_i2d>
 8004eaa:	460b      	mov	r3, r1
 8004eac:	4602      	mov	r2, r0
 8004eae:	4629      	mov	r1, r5
 8004eb0:	4620      	mov	r0, r4
 8004eb2:	f7fb f959 	bl	8000168 <__aeabi_dsub>
 8004eb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004eb8:	4604      	mov	r4, r0
 8004eba:	460d      	mov	r5, r1
 8004ebc:	b933      	cbnz	r3, 8004ecc <_strtod_l+0xaec>
 8004ebe:	f1b9 0f00 	cmp.w	r9, #0
 8004ec2:	d103      	bne.n	8004ecc <_strtod_l+0xaec>
 8004ec4:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8004ec8:	2e00      	cmp	r6, #0
 8004eca:	d06a      	beq.n	8004fa2 <_strtod_l+0xbc2>
 8004ecc:	a30a      	add	r3, pc, #40	; (adr r3, 8004ef8 <_strtod_l+0xb18>)
 8004ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed2:	4620      	mov	r0, r4
 8004ed4:	4629      	mov	r1, r5
 8004ed6:	f7fb fd71 	bl	80009bc <__aeabi_dcmplt>
 8004eda:	2800      	cmp	r0, #0
 8004edc:	f47f acad 	bne.w	800483a <_strtod_l+0x45a>
 8004ee0:	a307      	add	r3, pc, #28	; (adr r3, 8004f00 <_strtod_l+0xb20>)
 8004ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee6:	4620      	mov	r0, r4
 8004ee8:	4629      	mov	r1, r5
 8004eea:	f7fb fd85 	bl	80009f8 <__aeabi_dcmpgt>
 8004eee:	2800      	cmp	r0, #0
 8004ef0:	f43f af76 	beq.w	8004de0 <_strtod_l+0xa00>
 8004ef4:	e4a1      	b.n	800483a <_strtod_l+0x45a>
 8004ef6:	bf00      	nop
 8004ef8:	94a03595 	.word	0x94a03595
 8004efc:	3fdfffff 	.word	0x3fdfffff
 8004f00:	35afe535 	.word	0x35afe535
 8004f04:	3fe00000 	.word	0x3fe00000
 8004f08:	000fffff 	.word	0x000fffff
 8004f0c:	7ff00000 	.word	0x7ff00000
 8004f10:	7fefffff 	.word	0x7fefffff
 8004f14:	39500000 	.word	0x39500000
 8004f18:	3ff00000 	.word	0x3ff00000
 8004f1c:	7fe00000 	.word	0x7fe00000
 8004f20:	7c9fffff 	.word	0x7c9fffff
 8004f24:	3fe00000 	.word	0x3fe00000
 8004f28:	bff00000 	.word	0xbff00000
 8004f2c:	9b05      	ldr	r3, [sp, #20]
 8004f2e:	b313      	cbz	r3, 8004f76 <_strtod_l+0xb96>
 8004f30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004f32:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004f36:	d81e      	bhi.n	8004f76 <_strtod_l+0xb96>
 8004f38:	a325      	add	r3, pc, #148	; (adr r3, 8004fd0 <_strtod_l+0xbf0>)
 8004f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3e:	4620      	mov	r0, r4
 8004f40:	4629      	mov	r1, r5
 8004f42:	f7fb fd45 	bl	80009d0 <__aeabi_dcmple>
 8004f46:	b190      	cbz	r0, 8004f6e <_strtod_l+0xb8e>
 8004f48:	4629      	mov	r1, r5
 8004f4a:	4620      	mov	r0, r4
 8004f4c:	f7fb fd9c 	bl	8000a88 <__aeabi_d2uiz>
 8004f50:	2800      	cmp	r0, #0
 8004f52:	bf08      	it	eq
 8004f54:	2001      	moveq	r0, #1
 8004f56:	f7fb fa45 	bl	80003e4 <__aeabi_ui2d>
 8004f5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f5c:	4604      	mov	r4, r0
 8004f5e:	460d      	mov	r5, r1
 8004f60:	b9d3      	cbnz	r3, 8004f98 <_strtod_l+0xbb8>
 8004f62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f66:	9012      	str	r0, [sp, #72]	; 0x48
 8004f68:	9313      	str	r3, [sp, #76]	; 0x4c
 8004f6a:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8004f6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004f70:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004f74:	1a9f      	subs	r7, r3, r2
 8004f76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004f7a:	f001 fd4b 	bl	8006a14 <__ulp>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	460b      	mov	r3, r1
 8004f82:	4630      	mov	r0, r6
 8004f84:	4639      	mov	r1, r7
 8004f86:	f7fb faa7 	bl	80004d8 <__aeabi_dmul>
 8004f8a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004f8e:	f7fb f8ed 	bl	800016c <__adddf3>
 8004f92:	4681      	mov	r9, r0
 8004f94:	468a      	mov	sl, r1
 8004f96:	e777      	b.n	8004e88 <_strtod_l+0xaa8>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8004fa0:	e7e3      	b.n	8004f6a <_strtod_l+0xb8a>
 8004fa2:	a30d      	add	r3, pc, #52	; (adr r3, 8004fd8 <_strtod_l+0xbf8>)
 8004fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa8:	f7fb fd08 	bl	80009bc <__aeabi_dcmplt>
 8004fac:	e79f      	b.n	8004eee <_strtod_l+0xb0e>
 8004fae:	2300      	movs	r3, #0
 8004fb0:	930d      	str	r3, [sp, #52]	; 0x34
 8004fb2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004fb4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004fb6:	6013      	str	r3, [r2, #0]
 8004fb8:	f7ff ba55 	b.w	8004466 <_strtod_l+0x86>
 8004fbc:	2b65      	cmp	r3, #101	; 0x65
 8004fbe:	f04f 0200 	mov.w	r2, #0
 8004fc2:	f43f ab42 	beq.w	800464a <_strtod_l+0x26a>
 8004fc6:	2101      	movs	r1, #1
 8004fc8:	4614      	mov	r4, r2
 8004fca:	9105      	str	r1, [sp, #20]
 8004fcc:	f7ff babf 	b.w	800454e <_strtod_l+0x16e>
 8004fd0:	ffc00000 	.word	0xffc00000
 8004fd4:	41dfffff 	.word	0x41dfffff
 8004fd8:	94a03595 	.word	0x94a03595
 8004fdc:	3fcfffff 	.word	0x3fcfffff

08004fe0 <_strtod_r>:
 8004fe0:	4b05      	ldr	r3, [pc, #20]	; (8004ff8 <_strtod_r+0x18>)
 8004fe2:	b410      	push	{r4}
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4c05      	ldr	r4, [pc, #20]	; (8004ffc <_strtod_r+0x1c>)
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	bf08      	it	eq
 8004fee:	4623      	moveq	r3, r4
 8004ff0:	bc10      	pop	{r4}
 8004ff2:	f7ff b9f5 	b.w	80043e0 <_strtod_l>
 8004ff6:	bf00      	nop
 8004ff8:	2000000c 	.word	0x2000000c
 8004ffc:	20000070 	.word	0x20000070

08005000 <_strtol_l.isra.0>:
 8005000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005004:	4680      	mov	r8, r0
 8005006:	4689      	mov	r9, r1
 8005008:	4692      	mov	sl, r2
 800500a:	461e      	mov	r6, r3
 800500c:	460f      	mov	r7, r1
 800500e:	463d      	mov	r5, r7
 8005010:	9808      	ldr	r0, [sp, #32]
 8005012:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005016:	f001 f9eb 	bl	80063f0 <__locale_ctype_ptr_l>
 800501a:	4420      	add	r0, r4
 800501c:	7843      	ldrb	r3, [r0, #1]
 800501e:	f013 0308 	ands.w	r3, r3, #8
 8005022:	d132      	bne.n	800508a <_strtol_l.isra.0+0x8a>
 8005024:	2c2d      	cmp	r4, #45	; 0x2d
 8005026:	d132      	bne.n	800508e <_strtol_l.isra.0+0x8e>
 8005028:	2201      	movs	r2, #1
 800502a:	787c      	ldrb	r4, [r7, #1]
 800502c:	1cbd      	adds	r5, r7, #2
 800502e:	2e00      	cmp	r6, #0
 8005030:	d05d      	beq.n	80050ee <_strtol_l.isra.0+0xee>
 8005032:	2e10      	cmp	r6, #16
 8005034:	d109      	bne.n	800504a <_strtol_l.isra.0+0x4a>
 8005036:	2c30      	cmp	r4, #48	; 0x30
 8005038:	d107      	bne.n	800504a <_strtol_l.isra.0+0x4a>
 800503a:	782b      	ldrb	r3, [r5, #0]
 800503c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005040:	2b58      	cmp	r3, #88	; 0x58
 8005042:	d14f      	bne.n	80050e4 <_strtol_l.isra.0+0xe4>
 8005044:	2610      	movs	r6, #16
 8005046:	786c      	ldrb	r4, [r5, #1]
 8005048:	3502      	adds	r5, #2
 800504a:	2a00      	cmp	r2, #0
 800504c:	bf14      	ite	ne
 800504e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005052:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005056:	2700      	movs	r7, #0
 8005058:	fbb1 fcf6 	udiv	ip, r1, r6
 800505c:	4638      	mov	r0, r7
 800505e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005062:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005066:	2b09      	cmp	r3, #9
 8005068:	d817      	bhi.n	800509a <_strtol_l.isra.0+0x9a>
 800506a:	461c      	mov	r4, r3
 800506c:	42a6      	cmp	r6, r4
 800506e:	dd23      	ble.n	80050b8 <_strtol_l.isra.0+0xb8>
 8005070:	1c7b      	adds	r3, r7, #1
 8005072:	d007      	beq.n	8005084 <_strtol_l.isra.0+0x84>
 8005074:	4584      	cmp	ip, r0
 8005076:	d31c      	bcc.n	80050b2 <_strtol_l.isra.0+0xb2>
 8005078:	d101      	bne.n	800507e <_strtol_l.isra.0+0x7e>
 800507a:	45a6      	cmp	lr, r4
 800507c:	db19      	blt.n	80050b2 <_strtol_l.isra.0+0xb2>
 800507e:	2701      	movs	r7, #1
 8005080:	fb00 4006 	mla	r0, r0, r6, r4
 8005084:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005088:	e7eb      	b.n	8005062 <_strtol_l.isra.0+0x62>
 800508a:	462f      	mov	r7, r5
 800508c:	e7bf      	b.n	800500e <_strtol_l.isra.0+0xe>
 800508e:	2c2b      	cmp	r4, #43	; 0x2b
 8005090:	bf04      	itt	eq
 8005092:	1cbd      	addeq	r5, r7, #2
 8005094:	787c      	ldrbeq	r4, [r7, #1]
 8005096:	461a      	mov	r2, r3
 8005098:	e7c9      	b.n	800502e <_strtol_l.isra.0+0x2e>
 800509a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800509e:	2b19      	cmp	r3, #25
 80050a0:	d801      	bhi.n	80050a6 <_strtol_l.isra.0+0xa6>
 80050a2:	3c37      	subs	r4, #55	; 0x37
 80050a4:	e7e2      	b.n	800506c <_strtol_l.isra.0+0x6c>
 80050a6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80050aa:	2b19      	cmp	r3, #25
 80050ac:	d804      	bhi.n	80050b8 <_strtol_l.isra.0+0xb8>
 80050ae:	3c57      	subs	r4, #87	; 0x57
 80050b0:	e7dc      	b.n	800506c <_strtol_l.isra.0+0x6c>
 80050b2:	f04f 37ff 	mov.w	r7, #4294967295
 80050b6:	e7e5      	b.n	8005084 <_strtol_l.isra.0+0x84>
 80050b8:	1c7b      	adds	r3, r7, #1
 80050ba:	d108      	bne.n	80050ce <_strtol_l.isra.0+0xce>
 80050bc:	2322      	movs	r3, #34	; 0x22
 80050be:	4608      	mov	r0, r1
 80050c0:	f8c8 3000 	str.w	r3, [r8]
 80050c4:	f1ba 0f00 	cmp.w	sl, #0
 80050c8:	d107      	bne.n	80050da <_strtol_l.isra.0+0xda>
 80050ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050ce:	b102      	cbz	r2, 80050d2 <_strtol_l.isra.0+0xd2>
 80050d0:	4240      	negs	r0, r0
 80050d2:	f1ba 0f00 	cmp.w	sl, #0
 80050d6:	d0f8      	beq.n	80050ca <_strtol_l.isra.0+0xca>
 80050d8:	b10f      	cbz	r7, 80050de <_strtol_l.isra.0+0xde>
 80050da:	f105 39ff 	add.w	r9, r5, #4294967295
 80050de:	f8ca 9000 	str.w	r9, [sl]
 80050e2:	e7f2      	b.n	80050ca <_strtol_l.isra.0+0xca>
 80050e4:	2430      	movs	r4, #48	; 0x30
 80050e6:	2e00      	cmp	r6, #0
 80050e8:	d1af      	bne.n	800504a <_strtol_l.isra.0+0x4a>
 80050ea:	2608      	movs	r6, #8
 80050ec:	e7ad      	b.n	800504a <_strtol_l.isra.0+0x4a>
 80050ee:	2c30      	cmp	r4, #48	; 0x30
 80050f0:	d0a3      	beq.n	800503a <_strtol_l.isra.0+0x3a>
 80050f2:	260a      	movs	r6, #10
 80050f4:	e7a9      	b.n	800504a <_strtol_l.isra.0+0x4a>
	...

080050f8 <_strtol_r>:
 80050f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050fa:	4c06      	ldr	r4, [pc, #24]	; (8005114 <_strtol_r+0x1c>)
 80050fc:	4d06      	ldr	r5, [pc, #24]	; (8005118 <_strtol_r+0x20>)
 80050fe:	6824      	ldr	r4, [r4, #0]
 8005100:	6a24      	ldr	r4, [r4, #32]
 8005102:	2c00      	cmp	r4, #0
 8005104:	bf08      	it	eq
 8005106:	462c      	moveq	r4, r5
 8005108:	9400      	str	r4, [sp, #0]
 800510a:	f7ff ff79 	bl	8005000 <_strtol_l.isra.0>
 800510e:	b003      	add	sp, #12
 8005110:	bd30      	pop	{r4, r5, pc}
 8005112:	bf00      	nop
 8005114:	2000000c 	.word	0x2000000c
 8005118:	20000070 	.word	0x20000070

0800511c <quorem>:
 800511c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005120:	6903      	ldr	r3, [r0, #16]
 8005122:	690c      	ldr	r4, [r1, #16]
 8005124:	4680      	mov	r8, r0
 8005126:	42a3      	cmp	r3, r4
 8005128:	f2c0 8084 	blt.w	8005234 <quorem+0x118>
 800512c:	3c01      	subs	r4, #1
 800512e:	f101 0714 	add.w	r7, r1, #20
 8005132:	f100 0614 	add.w	r6, r0, #20
 8005136:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800513a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800513e:	3501      	adds	r5, #1
 8005140:	fbb0 f5f5 	udiv	r5, r0, r5
 8005144:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005148:	eb06 030c 	add.w	r3, r6, ip
 800514c:	eb07 090c 	add.w	r9, r7, ip
 8005150:	9301      	str	r3, [sp, #4]
 8005152:	b39d      	cbz	r5, 80051bc <quorem+0xa0>
 8005154:	f04f 0a00 	mov.w	sl, #0
 8005158:	4638      	mov	r0, r7
 800515a:	46b6      	mov	lr, r6
 800515c:	46d3      	mov	fp, sl
 800515e:	f850 2b04 	ldr.w	r2, [r0], #4
 8005162:	b293      	uxth	r3, r2
 8005164:	fb05 a303 	mla	r3, r5, r3, sl
 8005168:	0c12      	lsrs	r2, r2, #16
 800516a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800516e:	fb05 a202 	mla	r2, r5, r2, sl
 8005172:	b29b      	uxth	r3, r3
 8005174:	ebab 0303 	sub.w	r3, fp, r3
 8005178:	f8de b000 	ldr.w	fp, [lr]
 800517c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005180:	fa1f fb8b 	uxth.w	fp, fp
 8005184:	445b      	add	r3, fp
 8005186:	fa1f fb82 	uxth.w	fp, r2
 800518a:	f8de 2000 	ldr.w	r2, [lr]
 800518e:	4581      	cmp	r9, r0
 8005190:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005194:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005198:	b29b      	uxth	r3, r3
 800519a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800519e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80051a2:	f84e 3b04 	str.w	r3, [lr], #4
 80051a6:	d2da      	bcs.n	800515e <quorem+0x42>
 80051a8:	f856 300c 	ldr.w	r3, [r6, ip]
 80051ac:	b933      	cbnz	r3, 80051bc <quorem+0xa0>
 80051ae:	9b01      	ldr	r3, [sp, #4]
 80051b0:	3b04      	subs	r3, #4
 80051b2:	429e      	cmp	r6, r3
 80051b4:	461a      	mov	r2, r3
 80051b6:	d331      	bcc.n	800521c <quorem+0x100>
 80051b8:	f8c8 4010 	str.w	r4, [r8, #16]
 80051bc:	4640      	mov	r0, r8
 80051be:	f001 fbb1 	bl	8006924 <__mcmp>
 80051c2:	2800      	cmp	r0, #0
 80051c4:	db26      	blt.n	8005214 <quorem+0xf8>
 80051c6:	4630      	mov	r0, r6
 80051c8:	f04f 0c00 	mov.w	ip, #0
 80051cc:	3501      	adds	r5, #1
 80051ce:	f857 1b04 	ldr.w	r1, [r7], #4
 80051d2:	f8d0 e000 	ldr.w	lr, [r0]
 80051d6:	b28b      	uxth	r3, r1
 80051d8:	ebac 0303 	sub.w	r3, ip, r3
 80051dc:	fa1f f28e 	uxth.w	r2, lr
 80051e0:	4413      	add	r3, r2
 80051e2:	0c0a      	lsrs	r2, r1, #16
 80051e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80051e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80051f2:	45b9      	cmp	r9, r7
 80051f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80051f8:	f840 3b04 	str.w	r3, [r0], #4
 80051fc:	d2e7      	bcs.n	80051ce <quorem+0xb2>
 80051fe:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005202:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005206:	b92a      	cbnz	r2, 8005214 <quorem+0xf8>
 8005208:	3b04      	subs	r3, #4
 800520a:	429e      	cmp	r6, r3
 800520c:	461a      	mov	r2, r3
 800520e:	d30b      	bcc.n	8005228 <quorem+0x10c>
 8005210:	f8c8 4010 	str.w	r4, [r8, #16]
 8005214:	4628      	mov	r0, r5
 8005216:	b003      	add	sp, #12
 8005218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800521c:	6812      	ldr	r2, [r2, #0]
 800521e:	3b04      	subs	r3, #4
 8005220:	2a00      	cmp	r2, #0
 8005222:	d1c9      	bne.n	80051b8 <quorem+0x9c>
 8005224:	3c01      	subs	r4, #1
 8005226:	e7c4      	b.n	80051b2 <quorem+0x96>
 8005228:	6812      	ldr	r2, [r2, #0]
 800522a:	3b04      	subs	r3, #4
 800522c:	2a00      	cmp	r2, #0
 800522e:	d1ef      	bne.n	8005210 <quorem+0xf4>
 8005230:	3c01      	subs	r4, #1
 8005232:	e7ea      	b.n	800520a <quorem+0xee>
 8005234:	2000      	movs	r0, #0
 8005236:	e7ee      	b.n	8005216 <quorem+0xfa>

08005238 <_dtoa_r>:
 8005238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800523c:	4616      	mov	r6, r2
 800523e:	461f      	mov	r7, r3
 8005240:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005242:	b095      	sub	sp, #84	; 0x54
 8005244:	4604      	mov	r4, r0
 8005246:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800524a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800524e:	b93d      	cbnz	r5, 8005260 <_dtoa_r+0x28>
 8005250:	2010      	movs	r0, #16
 8005252:	f001 f8e1 	bl	8006418 <malloc>
 8005256:	6260      	str	r0, [r4, #36]	; 0x24
 8005258:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800525c:	6005      	str	r5, [r0, #0]
 800525e:	60c5      	str	r5, [r0, #12]
 8005260:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005262:	6819      	ldr	r1, [r3, #0]
 8005264:	b151      	cbz	r1, 800527c <_dtoa_r+0x44>
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	2301      	movs	r3, #1
 800526a:	4093      	lsls	r3, r2
 800526c:	604a      	str	r2, [r1, #4]
 800526e:	608b      	str	r3, [r1, #8]
 8005270:	4620      	mov	r0, r4
 8005272:	f001 f938 	bl	80064e6 <_Bfree>
 8005276:	2200      	movs	r2, #0
 8005278:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800527a:	601a      	str	r2, [r3, #0]
 800527c:	1e3b      	subs	r3, r7, #0
 800527e:	bfaf      	iteee	ge
 8005280:	2300      	movge	r3, #0
 8005282:	2201      	movlt	r2, #1
 8005284:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005288:	9303      	strlt	r3, [sp, #12]
 800528a:	bfac      	ite	ge
 800528c:	f8c8 3000 	strge.w	r3, [r8]
 8005290:	f8c8 2000 	strlt.w	r2, [r8]
 8005294:	4bae      	ldr	r3, [pc, #696]	; (8005550 <_dtoa_r+0x318>)
 8005296:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800529a:	ea33 0308 	bics.w	r3, r3, r8
 800529e:	d11b      	bne.n	80052d8 <_dtoa_r+0xa0>
 80052a0:	f242 730f 	movw	r3, #9999	; 0x270f
 80052a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80052a6:	6013      	str	r3, [r2, #0]
 80052a8:	9b02      	ldr	r3, [sp, #8]
 80052aa:	b923      	cbnz	r3, 80052b6 <_dtoa_r+0x7e>
 80052ac:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80052b0:	2800      	cmp	r0, #0
 80052b2:	f000 8545 	beq.w	8005d40 <_dtoa_r+0xb08>
 80052b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80052b8:	b953      	cbnz	r3, 80052d0 <_dtoa_r+0x98>
 80052ba:	4ba6      	ldr	r3, [pc, #664]	; (8005554 <_dtoa_r+0x31c>)
 80052bc:	e021      	b.n	8005302 <_dtoa_r+0xca>
 80052be:	4ba6      	ldr	r3, [pc, #664]	; (8005558 <_dtoa_r+0x320>)
 80052c0:	9306      	str	r3, [sp, #24]
 80052c2:	3308      	adds	r3, #8
 80052c4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80052c6:	6013      	str	r3, [r2, #0]
 80052c8:	9806      	ldr	r0, [sp, #24]
 80052ca:	b015      	add	sp, #84	; 0x54
 80052cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052d0:	4ba0      	ldr	r3, [pc, #640]	; (8005554 <_dtoa_r+0x31c>)
 80052d2:	9306      	str	r3, [sp, #24]
 80052d4:	3303      	adds	r3, #3
 80052d6:	e7f5      	b.n	80052c4 <_dtoa_r+0x8c>
 80052d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80052dc:	2200      	movs	r2, #0
 80052de:	2300      	movs	r3, #0
 80052e0:	4630      	mov	r0, r6
 80052e2:	4639      	mov	r1, r7
 80052e4:	f7fb fb60 	bl	80009a8 <__aeabi_dcmpeq>
 80052e8:	4682      	mov	sl, r0
 80052ea:	b160      	cbz	r0, 8005306 <_dtoa_r+0xce>
 80052ec:	2301      	movs	r3, #1
 80052ee:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80052f0:	6013      	str	r3, [r2, #0]
 80052f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f000 8520 	beq.w	8005d3a <_dtoa_r+0xb02>
 80052fa:	4b98      	ldr	r3, [pc, #608]	; (800555c <_dtoa_r+0x324>)
 80052fc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80052fe:	6013      	str	r3, [r2, #0]
 8005300:	3b01      	subs	r3, #1
 8005302:	9306      	str	r3, [sp, #24]
 8005304:	e7e0      	b.n	80052c8 <_dtoa_r+0x90>
 8005306:	ab12      	add	r3, sp, #72	; 0x48
 8005308:	9301      	str	r3, [sp, #4]
 800530a:	ab13      	add	r3, sp, #76	; 0x4c
 800530c:	9300      	str	r3, [sp, #0]
 800530e:	4632      	mov	r2, r6
 8005310:	463b      	mov	r3, r7
 8005312:	4620      	mov	r0, r4
 8005314:	f001 fbf4 	bl	8006b00 <__d2b>
 8005318:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800531c:	4683      	mov	fp, r0
 800531e:	2d00      	cmp	r5, #0
 8005320:	d07d      	beq.n	800541e <_dtoa_r+0x1e6>
 8005322:	46b0      	mov	r8, r6
 8005324:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005328:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800532c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005330:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005334:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005338:	2200      	movs	r2, #0
 800533a:	4b89      	ldr	r3, [pc, #548]	; (8005560 <_dtoa_r+0x328>)
 800533c:	4640      	mov	r0, r8
 800533e:	4649      	mov	r1, r9
 8005340:	f7fa ff12 	bl	8000168 <__aeabi_dsub>
 8005344:	a37c      	add	r3, pc, #496	; (adr r3, 8005538 <_dtoa_r+0x300>)
 8005346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534a:	f7fb f8c5 	bl	80004d8 <__aeabi_dmul>
 800534e:	a37c      	add	r3, pc, #496	; (adr r3, 8005540 <_dtoa_r+0x308>)
 8005350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005354:	f7fa ff0a 	bl	800016c <__adddf3>
 8005358:	4606      	mov	r6, r0
 800535a:	4628      	mov	r0, r5
 800535c:	460f      	mov	r7, r1
 800535e:	f7fb f851 	bl	8000404 <__aeabi_i2d>
 8005362:	a379      	add	r3, pc, #484	; (adr r3, 8005548 <_dtoa_r+0x310>)
 8005364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005368:	f7fb f8b6 	bl	80004d8 <__aeabi_dmul>
 800536c:	4602      	mov	r2, r0
 800536e:	460b      	mov	r3, r1
 8005370:	4630      	mov	r0, r6
 8005372:	4639      	mov	r1, r7
 8005374:	f7fa fefa 	bl	800016c <__adddf3>
 8005378:	4606      	mov	r6, r0
 800537a:	460f      	mov	r7, r1
 800537c:	f7fb fb5c 	bl	8000a38 <__aeabi_d2iz>
 8005380:	2200      	movs	r2, #0
 8005382:	4682      	mov	sl, r0
 8005384:	2300      	movs	r3, #0
 8005386:	4630      	mov	r0, r6
 8005388:	4639      	mov	r1, r7
 800538a:	f7fb fb17 	bl	80009bc <__aeabi_dcmplt>
 800538e:	b148      	cbz	r0, 80053a4 <_dtoa_r+0x16c>
 8005390:	4650      	mov	r0, sl
 8005392:	f7fb f837 	bl	8000404 <__aeabi_i2d>
 8005396:	4632      	mov	r2, r6
 8005398:	463b      	mov	r3, r7
 800539a:	f7fb fb05 	bl	80009a8 <__aeabi_dcmpeq>
 800539e:	b908      	cbnz	r0, 80053a4 <_dtoa_r+0x16c>
 80053a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80053a4:	f1ba 0f16 	cmp.w	sl, #22
 80053a8:	d85a      	bhi.n	8005460 <_dtoa_r+0x228>
 80053aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053ae:	496d      	ldr	r1, [pc, #436]	; (8005564 <_dtoa_r+0x32c>)
 80053b0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80053b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053b8:	f7fb fb1e 	bl	80009f8 <__aeabi_dcmpgt>
 80053bc:	2800      	cmp	r0, #0
 80053be:	d051      	beq.n	8005464 <_dtoa_r+0x22c>
 80053c0:	2300      	movs	r3, #0
 80053c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80053c6:	930d      	str	r3, [sp, #52]	; 0x34
 80053c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80053ca:	1b5d      	subs	r5, r3, r5
 80053cc:	1e6b      	subs	r3, r5, #1
 80053ce:	9307      	str	r3, [sp, #28]
 80053d0:	bf43      	ittte	mi
 80053d2:	2300      	movmi	r3, #0
 80053d4:	f1c5 0901 	rsbmi	r9, r5, #1
 80053d8:	9307      	strmi	r3, [sp, #28]
 80053da:	f04f 0900 	movpl.w	r9, #0
 80053de:	f1ba 0f00 	cmp.w	sl, #0
 80053e2:	db41      	blt.n	8005468 <_dtoa_r+0x230>
 80053e4:	9b07      	ldr	r3, [sp, #28]
 80053e6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80053ea:	4453      	add	r3, sl
 80053ec:	9307      	str	r3, [sp, #28]
 80053ee:	2300      	movs	r3, #0
 80053f0:	9308      	str	r3, [sp, #32]
 80053f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80053f4:	2b09      	cmp	r3, #9
 80053f6:	f200 808f 	bhi.w	8005518 <_dtoa_r+0x2e0>
 80053fa:	2b05      	cmp	r3, #5
 80053fc:	bfc4      	itt	gt
 80053fe:	3b04      	subgt	r3, #4
 8005400:	931e      	strgt	r3, [sp, #120]	; 0x78
 8005402:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005404:	bfc8      	it	gt
 8005406:	2500      	movgt	r5, #0
 8005408:	f1a3 0302 	sub.w	r3, r3, #2
 800540c:	bfd8      	it	le
 800540e:	2501      	movle	r5, #1
 8005410:	2b03      	cmp	r3, #3
 8005412:	f200 808d 	bhi.w	8005530 <_dtoa_r+0x2f8>
 8005416:	e8df f003 	tbb	[pc, r3]
 800541a:	7d7b      	.short	0x7d7b
 800541c:	6f2f      	.short	0x6f2f
 800541e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005422:	441d      	add	r5, r3
 8005424:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005428:	2820      	cmp	r0, #32
 800542a:	dd13      	ble.n	8005454 <_dtoa_r+0x21c>
 800542c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005430:	9b02      	ldr	r3, [sp, #8]
 8005432:	fa08 f800 	lsl.w	r8, r8, r0
 8005436:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800543a:	fa23 f000 	lsr.w	r0, r3, r0
 800543e:	ea48 0000 	orr.w	r0, r8, r0
 8005442:	f7fa ffcf 	bl	80003e4 <__aeabi_ui2d>
 8005446:	2301      	movs	r3, #1
 8005448:	4680      	mov	r8, r0
 800544a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800544e:	3d01      	subs	r5, #1
 8005450:	9310      	str	r3, [sp, #64]	; 0x40
 8005452:	e771      	b.n	8005338 <_dtoa_r+0x100>
 8005454:	9b02      	ldr	r3, [sp, #8]
 8005456:	f1c0 0020 	rsb	r0, r0, #32
 800545a:	fa03 f000 	lsl.w	r0, r3, r0
 800545e:	e7f0      	b.n	8005442 <_dtoa_r+0x20a>
 8005460:	2301      	movs	r3, #1
 8005462:	e7b0      	b.n	80053c6 <_dtoa_r+0x18e>
 8005464:	900d      	str	r0, [sp, #52]	; 0x34
 8005466:	e7af      	b.n	80053c8 <_dtoa_r+0x190>
 8005468:	f1ca 0300 	rsb	r3, sl, #0
 800546c:	9308      	str	r3, [sp, #32]
 800546e:	2300      	movs	r3, #0
 8005470:	eba9 090a 	sub.w	r9, r9, sl
 8005474:	930c      	str	r3, [sp, #48]	; 0x30
 8005476:	e7bc      	b.n	80053f2 <_dtoa_r+0x1ba>
 8005478:	2301      	movs	r3, #1
 800547a:	9309      	str	r3, [sp, #36]	; 0x24
 800547c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800547e:	2b00      	cmp	r3, #0
 8005480:	dd74      	ble.n	800556c <_dtoa_r+0x334>
 8005482:	4698      	mov	r8, r3
 8005484:	9304      	str	r3, [sp, #16]
 8005486:	2200      	movs	r2, #0
 8005488:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800548a:	6072      	str	r2, [r6, #4]
 800548c:	2204      	movs	r2, #4
 800548e:	f102 0014 	add.w	r0, r2, #20
 8005492:	4298      	cmp	r0, r3
 8005494:	6871      	ldr	r1, [r6, #4]
 8005496:	d96e      	bls.n	8005576 <_dtoa_r+0x33e>
 8005498:	4620      	mov	r0, r4
 800549a:	f000 fff0 	bl	800647e <_Balloc>
 800549e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054a0:	6030      	str	r0, [r6, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f1b8 0f0e 	cmp.w	r8, #14
 80054a8:	9306      	str	r3, [sp, #24]
 80054aa:	f200 80ed 	bhi.w	8005688 <_dtoa_r+0x450>
 80054ae:	2d00      	cmp	r5, #0
 80054b0:	f000 80ea 	beq.w	8005688 <_dtoa_r+0x450>
 80054b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80054b8:	f1ba 0f00 	cmp.w	sl, #0
 80054bc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80054c0:	dd77      	ble.n	80055b2 <_dtoa_r+0x37a>
 80054c2:	4a28      	ldr	r2, [pc, #160]	; (8005564 <_dtoa_r+0x32c>)
 80054c4:	f00a 030f 	and.w	r3, sl, #15
 80054c8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80054cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80054d0:	06f0      	lsls	r0, r6, #27
 80054d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80054da:	d568      	bpl.n	80055ae <_dtoa_r+0x376>
 80054dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80054e0:	4b21      	ldr	r3, [pc, #132]	; (8005568 <_dtoa_r+0x330>)
 80054e2:	2503      	movs	r5, #3
 80054e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80054e8:	f7fb f920 	bl	800072c <__aeabi_ddiv>
 80054ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054f0:	f006 060f 	and.w	r6, r6, #15
 80054f4:	4f1c      	ldr	r7, [pc, #112]	; (8005568 <_dtoa_r+0x330>)
 80054f6:	e04f      	b.n	8005598 <_dtoa_r+0x360>
 80054f8:	2301      	movs	r3, #1
 80054fa:	9309      	str	r3, [sp, #36]	; 0x24
 80054fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80054fe:	4453      	add	r3, sl
 8005500:	f103 0801 	add.w	r8, r3, #1
 8005504:	9304      	str	r3, [sp, #16]
 8005506:	4643      	mov	r3, r8
 8005508:	2b01      	cmp	r3, #1
 800550a:	bfb8      	it	lt
 800550c:	2301      	movlt	r3, #1
 800550e:	e7ba      	b.n	8005486 <_dtoa_r+0x24e>
 8005510:	2300      	movs	r3, #0
 8005512:	e7b2      	b.n	800547a <_dtoa_r+0x242>
 8005514:	2300      	movs	r3, #0
 8005516:	e7f0      	b.n	80054fa <_dtoa_r+0x2c2>
 8005518:	2501      	movs	r5, #1
 800551a:	2300      	movs	r3, #0
 800551c:	9509      	str	r5, [sp, #36]	; 0x24
 800551e:	931e      	str	r3, [sp, #120]	; 0x78
 8005520:	f04f 33ff 	mov.w	r3, #4294967295
 8005524:	2200      	movs	r2, #0
 8005526:	9304      	str	r3, [sp, #16]
 8005528:	4698      	mov	r8, r3
 800552a:	2312      	movs	r3, #18
 800552c:	921f      	str	r2, [sp, #124]	; 0x7c
 800552e:	e7aa      	b.n	8005486 <_dtoa_r+0x24e>
 8005530:	2301      	movs	r3, #1
 8005532:	9309      	str	r3, [sp, #36]	; 0x24
 8005534:	e7f4      	b.n	8005520 <_dtoa_r+0x2e8>
 8005536:	bf00      	nop
 8005538:	636f4361 	.word	0x636f4361
 800553c:	3fd287a7 	.word	0x3fd287a7
 8005540:	8b60c8b3 	.word	0x8b60c8b3
 8005544:	3fc68a28 	.word	0x3fc68a28
 8005548:	509f79fb 	.word	0x509f79fb
 800554c:	3fd34413 	.word	0x3fd34413
 8005550:	7ff00000 	.word	0x7ff00000
 8005554:	08007281 	.word	0x08007281
 8005558:	08007278 	.word	0x08007278
 800555c:	080071fb 	.word	0x080071fb
 8005560:	3ff80000 	.word	0x3ff80000
 8005564:	080072b8 	.word	0x080072b8
 8005568:	08007290 	.word	0x08007290
 800556c:	2301      	movs	r3, #1
 800556e:	9304      	str	r3, [sp, #16]
 8005570:	4698      	mov	r8, r3
 8005572:	461a      	mov	r2, r3
 8005574:	e7da      	b.n	800552c <_dtoa_r+0x2f4>
 8005576:	3101      	adds	r1, #1
 8005578:	6071      	str	r1, [r6, #4]
 800557a:	0052      	lsls	r2, r2, #1
 800557c:	e787      	b.n	800548e <_dtoa_r+0x256>
 800557e:	07f1      	lsls	r1, r6, #31
 8005580:	d508      	bpl.n	8005594 <_dtoa_r+0x35c>
 8005582:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005586:	e9d7 2300 	ldrd	r2, r3, [r7]
 800558a:	f7fa ffa5 	bl	80004d8 <__aeabi_dmul>
 800558e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005592:	3501      	adds	r5, #1
 8005594:	1076      	asrs	r6, r6, #1
 8005596:	3708      	adds	r7, #8
 8005598:	2e00      	cmp	r6, #0
 800559a:	d1f0      	bne.n	800557e <_dtoa_r+0x346>
 800559c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80055a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055a4:	f7fb f8c2 	bl	800072c <__aeabi_ddiv>
 80055a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055ac:	e01b      	b.n	80055e6 <_dtoa_r+0x3ae>
 80055ae:	2502      	movs	r5, #2
 80055b0:	e7a0      	b.n	80054f4 <_dtoa_r+0x2bc>
 80055b2:	f000 80a4 	beq.w	80056fe <_dtoa_r+0x4c6>
 80055b6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80055ba:	f1ca 0600 	rsb	r6, sl, #0
 80055be:	4ba0      	ldr	r3, [pc, #640]	; (8005840 <_dtoa_r+0x608>)
 80055c0:	f006 020f 	and.w	r2, r6, #15
 80055c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055cc:	f7fa ff84 	bl	80004d8 <__aeabi_dmul>
 80055d0:	2502      	movs	r5, #2
 80055d2:	2300      	movs	r3, #0
 80055d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055d8:	4f9a      	ldr	r7, [pc, #616]	; (8005844 <_dtoa_r+0x60c>)
 80055da:	1136      	asrs	r6, r6, #4
 80055dc:	2e00      	cmp	r6, #0
 80055de:	f040 8083 	bne.w	80056e8 <_dtoa_r+0x4b0>
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1e0      	bne.n	80055a8 <_dtoa_r+0x370>
 80055e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f000 808a 	beq.w	8005702 <_dtoa_r+0x4ca>
 80055ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055f2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80055f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80055fa:	2200      	movs	r2, #0
 80055fc:	4b92      	ldr	r3, [pc, #584]	; (8005848 <_dtoa_r+0x610>)
 80055fe:	f7fb f9dd 	bl	80009bc <__aeabi_dcmplt>
 8005602:	2800      	cmp	r0, #0
 8005604:	d07d      	beq.n	8005702 <_dtoa_r+0x4ca>
 8005606:	f1b8 0f00 	cmp.w	r8, #0
 800560a:	d07a      	beq.n	8005702 <_dtoa_r+0x4ca>
 800560c:	9b04      	ldr	r3, [sp, #16]
 800560e:	2b00      	cmp	r3, #0
 8005610:	dd36      	ble.n	8005680 <_dtoa_r+0x448>
 8005612:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005616:	2200      	movs	r2, #0
 8005618:	4b8c      	ldr	r3, [pc, #560]	; (800584c <_dtoa_r+0x614>)
 800561a:	f7fa ff5d 	bl	80004d8 <__aeabi_dmul>
 800561e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005622:	9e04      	ldr	r6, [sp, #16]
 8005624:	f10a 37ff 	add.w	r7, sl, #4294967295
 8005628:	3501      	adds	r5, #1
 800562a:	4628      	mov	r0, r5
 800562c:	f7fa feea 	bl	8000404 <__aeabi_i2d>
 8005630:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005634:	f7fa ff50 	bl	80004d8 <__aeabi_dmul>
 8005638:	2200      	movs	r2, #0
 800563a:	4b85      	ldr	r3, [pc, #532]	; (8005850 <_dtoa_r+0x618>)
 800563c:	f7fa fd96 	bl	800016c <__adddf3>
 8005640:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8005644:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005648:	950b      	str	r5, [sp, #44]	; 0x2c
 800564a:	2e00      	cmp	r6, #0
 800564c:	d15c      	bne.n	8005708 <_dtoa_r+0x4d0>
 800564e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005652:	2200      	movs	r2, #0
 8005654:	4b7f      	ldr	r3, [pc, #508]	; (8005854 <_dtoa_r+0x61c>)
 8005656:	f7fa fd87 	bl	8000168 <__aeabi_dsub>
 800565a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800565c:	462b      	mov	r3, r5
 800565e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005662:	f7fb f9c9 	bl	80009f8 <__aeabi_dcmpgt>
 8005666:	2800      	cmp	r0, #0
 8005668:	f040 8281 	bne.w	8005b6e <_dtoa_r+0x936>
 800566c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005670:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005672:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005676:	f7fb f9a1 	bl	80009bc <__aeabi_dcmplt>
 800567a:	2800      	cmp	r0, #0
 800567c:	f040 8275 	bne.w	8005b6a <_dtoa_r+0x932>
 8005680:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005684:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005688:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800568a:	2b00      	cmp	r3, #0
 800568c:	f2c0 814b 	blt.w	8005926 <_dtoa_r+0x6ee>
 8005690:	f1ba 0f0e 	cmp.w	sl, #14
 8005694:	f300 8147 	bgt.w	8005926 <_dtoa_r+0x6ee>
 8005698:	4b69      	ldr	r3, [pc, #420]	; (8005840 <_dtoa_r+0x608>)
 800569a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800569e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80056a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f280 80d7 	bge.w	800585c <_dtoa_r+0x624>
 80056ae:	f1b8 0f00 	cmp.w	r8, #0
 80056b2:	f300 80d3 	bgt.w	800585c <_dtoa_r+0x624>
 80056b6:	f040 8257 	bne.w	8005b68 <_dtoa_r+0x930>
 80056ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056be:	2200      	movs	r2, #0
 80056c0:	4b64      	ldr	r3, [pc, #400]	; (8005854 <_dtoa_r+0x61c>)
 80056c2:	f7fa ff09 	bl	80004d8 <__aeabi_dmul>
 80056c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80056ca:	f7fb f98b 	bl	80009e4 <__aeabi_dcmpge>
 80056ce:	4646      	mov	r6, r8
 80056d0:	4647      	mov	r7, r8
 80056d2:	2800      	cmp	r0, #0
 80056d4:	f040 822d 	bne.w	8005b32 <_dtoa_r+0x8fa>
 80056d8:	9b06      	ldr	r3, [sp, #24]
 80056da:	9a06      	ldr	r2, [sp, #24]
 80056dc:	1c5d      	adds	r5, r3, #1
 80056de:	2331      	movs	r3, #49	; 0x31
 80056e0:	f10a 0a01 	add.w	sl, sl, #1
 80056e4:	7013      	strb	r3, [r2, #0]
 80056e6:	e228      	b.n	8005b3a <_dtoa_r+0x902>
 80056e8:	07f2      	lsls	r2, r6, #31
 80056ea:	d505      	bpl.n	80056f8 <_dtoa_r+0x4c0>
 80056ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056f0:	f7fa fef2 	bl	80004d8 <__aeabi_dmul>
 80056f4:	2301      	movs	r3, #1
 80056f6:	3501      	adds	r5, #1
 80056f8:	1076      	asrs	r6, r6, #1
 80056fa:	3708      	adds	r7, #8
 80056fc:	e76e      	b.n	80055dc <_dtoa_r+0x3a4>
 80056fe:	2502      	movs	r5, #2
 8005700:	e771      	b.n	80055e6 <_dtoa_r+0x3ae>
 8005702:	4657      	mov	r7, sl
 8005704:	4646      	mov	r6, r8
 8005706:	e790      	b.n	800562a <_dtoa_r+0x3f2>
 8005708:	4b4d      	ldr	r3, [pc, #308]	; (8005840 <_dtoa_r+0x608>)
 800570a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800570e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005714:	2b00      	cmp	r3, #0
 8005716:	d048      	beq.n	80057aa <_dtoa_r+0x572>
 8005718:	4602      	mov	r2, r0
 800571a:	460b      	mov	r3, r1
 800571c:	2000      	movs	r0, #0
 800571e:	494e      	ldr	r1, [pc, #312]	; (8005858 <_dtoa_r+0x620>)
 8005720:	f7fb f804 	bl	800072c <__aeabi_ddiv>
 8005724:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005728:	f7fa fd1e 	bl	8000168 <__aeabi_dsub>
 800572c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005730:	9d06      	ldr	r5, [sp, #24]
 8005732:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005736:	f7fb f97f 	bl	8000a38 <__aeabi_d2iz>
 800573a:	9011      	str	r0, [sp, #68]	; 0x44
 800573c:	f7fa fe62 	bl	8000404 <__aeabi_i2d>
 8005740:	4602      	mov	r2, r0
 8005742:	460b      	mov	r3, r1
 8005744:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005748:	f7fa fd0e 	bl	8000168 <__aeabi_dsub>
 800574c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800574e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005752:	3330      	adds	r3, #48	; 0x30
 8005754:	f805 3b01 	strb.w	r3, [r5], #1
 8005758:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800575c:	f7fb f92e 	bl	80009bc <__aeabi_dcmplt>
 8005760:	2800      	cmp	r0, #0
 8005762:	d163      	bne.n	800582c <_dtoa_r+0x5f4>
 8005764:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005768:	2000      	movs	r0, #0
 800576a:	4937      	ldr	r1, [pc, #220]	; (8005848 <_dtoa_r+0x610>)
 800576c:	f7fa fcfc 	bl	8000168 <__aeabi_dsub>
 8005770:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005774:	f7fb f922 	bl	80009bc <__aeabi_dcmplt>
 8005778:	2800      	cmp	r0, #0
 800577a:	f040 80b5 	bne.w	80058e8 <_dtoa_r+0x6b0>
 800577e:	9b06      	ldr	r3, [sp, #24]
 8005780:	1aeb      	subs	r3, r5, r3
 8005782:	429e      	cmp	r6, r3
 8005784:	f77f af7c 	ble.w	8005680 <_dtoa_r+0x448>
 8005788:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800578c:	2200      	movs	r2, #0
 800578e:	4b2f      	ldr	r3, [pc, #188]	; (800584c <_dtoa_r+0x614>)
 8005790:	f7fa fea2 	bl	80004d8 <__aeabi_dmul>
 8005794:	2200      	movs	r2, #0
 8005796:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800579a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800579e:	4b2b      	ldr	r3, [pc, #172]	; (800584c <_dtoa_r+0x614>)
 80057a0:	f7fa fe9a 	bl	80004d8 <__aeabi_dmul>
 80057a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057a8:	e7c3      	b.n	8005732 <_dtoa_r+0x4fa>
 80057aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80057ae:	f7fa fe93 	bl	80004d8 <__aeabi_dmul>
 80057b2:	9b06      	ldr	r3, [sp, #24]
 80057b4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80057b8:	199d      	adds	r5, r3, r6
 80057ba:	461e      	mov	r6, r3
 80057bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057c0:	f7fb f93a 	bl	8000a38 <__aeabi_d2iz>
 80057c4:	9011      	str	r0, [sp, #68]	; 0x44
 80057c6:	f7fa fe1d 	bl	8000404 <__aeabi_i2d>
 80057ca:	4602      	mov	r2, r0
 80057cc:	460b      	mov	r3, r1
 80057ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057d2:	f7fa fcc9 	bl	8000168 <__aeabi_dsub>
 80057d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80057d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057dc:	3330      	adds	r3, #48	; 0x30
 80057de:	f806 3b01 	strb.w	r3, [r6], #1
 80057e2:	42ae      	cmp	r6, r5
 80057e4:	f04f 0200 	mov.w	r2, #0
 80057e8:	d124      	bne.n	8005834 <_dtoa_r+0x5fc>
 80057ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80057ee:	4b1a      	ldr	r3, [pc, #104]	; (8005858 <_dtoa_r+0x620>)
 80057f0:	f7fa fcbc 	bl	800016c <__adddf3>
 80057f4:	4602      	mov	r2, r0
 80057f6:	460b      	mov	r3, r1
 80057f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057fc:	f7fb f8fc 	bl	80009f8 <__aeabi_dcmpgt>
 8005800:	2800      	cmp	r0, #0
 8005802:	d171      	bne.n	80058e8 <_dtoa_r+0x6b0>
 8005804:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005808:	2000      	movs	r0, #0
 800580a:	4913      	ldr	r1, [pc, #76]	; (8005858 <_dtoa_r+0x620>)
 800580c:	f7fa fcac 	bl	8000168 <__aeabi_dsub>
 8005810:	4602      	mov	r2, r0
 8005812:	460b      	mov	r3, r1
 8005814:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005818:	f7fb f8d0 	bl	80009bc <__aeabi_dcmplt>
 800581c:	2800      	cmp	r0, #0
 800581e:	f43f af2f 	beq.w	8005680 <_dtoa_r+0x448>
 8005822:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005826:	1e6a      	subs	r2, r5, #1
 8005828:	2b30      	cmp	r3, #48	; 0x30
 800582a:	d001      	beq.n	8005830 <_dtoa_r+0x5f8>
 800582c:	46ba      	mov	sl, r7
 800582e:	e04a      	b.n	80058c6 <_dtoa_r+0x68e>
 8005830:	4615      	mov	r5, r2
 8005832:	e7f6      	b.n	8005822 <_dtoa_r+0x5ea>
 8005834:	4b05      	ldr	r3, [pc, #20]	; (800584c <_dtoa_r+0x614>)
 8005836:	f7fa fe4f 	bl	80004d8 <__aeabi_dmul>
 800583a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800583e:	e7bd      	b.n	80057bc <_dtoa_r+0x584>
 8005840:	080072b8 	.word	0x080072b8
 8005844:	08007290 	.word	0x08007290
 8005848:	3ff00000 	.word	0x3ff00000
 800584c:	40240000 	.word	0x40240000
 8005850:	401c0000 	.word	0x401c0000
 8005854:	40140000 	.word	0x40140000
 8005858:	3fe00000 	.word	0x3fe00000
 800585c:	9d06      	ldr	r5, [sp, #24]
 800585e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005862:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005866:	4630      	mov	r0, r6
 8005868:	4639      	mov	r1, r7
 800586a:	f7fa ff5f 	bl	800072c <__aeabi_ddiv>
 800586e:	f7fb f8e3 	bl	8000a38 <__aeabi_d2iz>
 8005872:	4681      	mov	r9, r0
 8005874:	f7fa fdc6 	bl	8000404 <__aeabi_i2d>
 8005878:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800587c:	f7fa fe2c 	bl	80004d8 <__aeabi_dmul>
 8005880:	4602      	mov	r2, r0
 8005882:	460b      	mov	r3, r1
 8005884:	4630      	mov	r0, r6
 8005886:	4639      	mov	r1, r7
 8005888:	f7fa fc6e 	bl	8000168 <__aeabi_dsub>
 800588c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8005890:	f805 6b01 	strb.w	r6, [r5], #1
 8005894:	9e06      	ldr	r6, [sp, #24]
 8005896:	4602      	mov	r2, r0
 8005898:	1bae      	subs	r6, r5, r6
 800589a:	45b0      	cmp	r8, r6
 800589c:	460b      	mov	r3, r1
 800589e:	d135      	bne.n	800590c <_dtoa_r+0x6d4>
 80058a0:	f7fa fc64 	bl	800016c <__adddf3>
 80058a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058a8:	4606      	mov	r6, r0
 80058aa:	460f      	mov	r7, r1
 80058ac:	f7fb f8a4 	bl	80009f8 <__aeabi_dcmpgt>
 80058b0:	b9c8      	cbnz	r0, 80058e6 <_dtoa_r+0x6ae>
 80058b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058b6:	4630      	mov	r0, r6
 80058b8:	4639      	mov	r1, r7
 80058ba:	f7fb f875 	bl	80009a8 <__aeabi_dcmpeq>
 80058be:	b110      	cbz	r0, 80058c6 <_dtoa_r+0x68e>
 80058c0:	f019 0f01 	tst.w	r9, #1
 80058c4:	d10f      	bne.n	80058e6 <_dtoa_r+0x6ae>
 80058c6:	4659      	mov	r1, fp
 80058c8:	4620      	mov	r0, r4
 80058ca:	f000 fe0c 	bl	80064e6 <_Bfree>
 80058ce:	2300      	movs	r3, #0
 80058d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80058d2:	702b      	strb	r3, [r5, #0]
 80058d4:	f10a 0301 	add.w	r3, sl, #1
 80058d8:	6013      	str	r3, [r2, #0]
 80058da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f43f acf3 	beq.w	80052c8 <_dtoa_r+0x90>
 80058e2:	601d      	str	r5, [r3, #0]
 80058e4:	e4f0      	b.n	80052c8 <_dtoa_r+0x90>
 80058e6:	4657      	mov	r7, sl
 80058e8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80058ec:	1e6b      	subs	r3, r5, #1
 80058ee:	2a39      	cmp	r2, #57	; 0x39
 80058f0:	d106      	bne.n	8005900 <_dtoa_r+0x6c8>
 80058f2:	9a06      	ldr	r2, [sp, #24]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d107      	bne.n	8005908 <_dtoa_r+0x6d0>
 80058f8:	2330      	movs	r3, #48	; 0x30
 80058fa:	7013      	strb	r3, [r2, #0]
 80058fc:	4613      	mov	r3, r2
 80058fe:	3701      	adds	r7, #1
 8005900:	781a      	ldrb	r2, [r3, #0]
 8005902:	3201      	adds	r2, #1
 8005904:	701a      	strb	r2, [r3, #0]
 8005906:	e791      	b.n	800582c <_dtoa_r+0x5f4>
 8005908:	461d      	mov	r5, r3
 800590a:	e7ed      	b.n	80058e8 <_dtoa_r+0x6b0>
 800590c:	2200      	movs	r2, #0
 800590e:	4b99      	ldr	r3, [pc, #612]	; (8005b74 <_dtoa_r+0x93c>)
 8005910:	f7fa fde2 	bl	80004d8 <__aeabi_dmul>
 8005914:	2200      	movs	r2, #0
 8005916:	2300      	movs	r3, #0
 8005918:	4606      	mov	r6, r0
 800591a:	460f      	mov	r7, r1
 800591c:	f7fb f844 	bl	80009a8 <__aeabi_dcmpeq>
 8005920:	2800      	cmp	r0, #0
 8005922:	d09e      	beq.n	8005862 <_dtoa_r+0x62a>
 8005924:	e7cf      	b.n	80058c6 <_dtoa_r+0x68e>
 8005926:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005928:	2a00      	cmp	r2, #0
 800592a:	f000 8088 	beq.w	8005a3e <_dtoa_r+0x806>
 800592e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005930:	2a01      	cmp	r2, #1
 8005932:	dc6d      	bgt.n	8005a10 <_dtoa_r+0x7d8>
 8005934:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005936:	2a00      	cmp	r2, #0
 8005938:	d066      	beq.n	8005a08 <_dtoa_r+0x7d0>
 800593a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800593e:	464d      	mov	r5, r9
 8005940:	9e08      	ldr	r6, [sp, #32]
 8005942:	9a07      	ldr	r2, [sp, #28]
 8005944:	2101      	movs	r1, #1
 8005946:	441a      	add	r2, r3
 8005948:	4620      	mov	r0, r4
 800594a:	4499      	add	r9, r3
 800594c:	9207      	str	r2, [sp, #28]
 800594e:	f000 fea8 	bl	80066a2 <__i2b>
 8005952:	4607      	mov	r7, r0
 8005954:	2d00      	cmp	r5, #0
 8005956:	dd0b      	ble.n	8005970 <_dtoa_r+0x738>
 8005958:	9b07      	ldr	r3, [sp, #28]
 800595a:	2b00      	cmp	r3, #0
 800595c:	dd08      	ble.n	8005970 <_dtoa_r+0x738>
 800595e:	42ab      	cmp	r3, r5
 8005960:	bfa8      	it	ge
 8005962:	462b      	movge	r3, r5
 8005964:	9a07      	ldr	r2, [sp, #28]
 8005966:	eba9 0903 	sub.w	r9, r9, r3
 800596a:	1aed      	subs	r5, r5, r3
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	9307      	str	r3, [sp, #28]
 8005970:	9b08      	ldr	r3, [sp, #32]
 8005972:	b1eb      	cbz	r3, 80059b0 <_dtoa_r+0x778>
 8005974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005976:	2b00      	cmp	r3, #0
 8005978:	d065      	beq.n	8005a46 <_dtoa_r+0x80e>
 800597a:	b18e      	cbz	r6, 80059a0 <_dtoa_r+0x768>
 800597c:	4639      	mov	r1, r7
 800597e:	4632      	mov	r2, r6
 8005980:	4620      	mov	r0, r4
 8005982:	f000 ff2d 	bl	80067e0 <__pow5mult>
 8005986:	465a      	mov	r2, fp
 8005988:	4601      	mov	r1, r0
 800598a:	4607      	mov	r7, r0
 800598c:	4620      	mov	r0, r4
 800598e:	f000 fe91 	bl	80066b4 <__multiply>
 8005992:	4659      	mov	r1, fp
 8005994:	900a      	str	r0, [sp, #40]	; 0x28
 8005996:	4620      	mov	r0, r4
 8005998:	f000 fda5 	bl	80064e6 <_Bfree>
 800599c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800599e:	469b      	mov	fp, r3
 80059a0:	9b08      	ldr	r3, [sp, #32]
 80059a2:	1b9a      	subs	r2, r3, r6
 80059a4:	d004      	beq.n	80059b0 <_dtoa_r+0x778>
 80059a6:	4659      	mov	r1, fp
 80059a8:	4620      	mov	r0, r4
 80059aa:	f000 ff19 	bl	80067e0 <__pow5mult>
 80059ae:	4683      	mov	fp, r0
 80059b0:	2101      	movs	r1, #1
 80059b2:	4620      	mov	r0, r4
 80059b4:	f000 fe75 	bl	80066a2 <__i2b>
 80059b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059ba:	4606      	mov	r6, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f000 81c6 	beq.w	8005d4e <_dtoa_r+0xb16>
 80059c2:	461a      	mov	r2, r3
 80059c4:	4601      	mov	r1, r0
 80059c6:	4620      	mov	r0, r4
 80059c8:	f000 ff0a 	bl	80067e0 <__pow5mult>
 80059cc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80059ce:	4606      	mov	r6, r0
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	dc3e      	bgt.n	8005a52 <_dtoa_r+0x81a>
 80059d4:	9b02      	ldr	r3, [sp, #8]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d137      	bne.n	8005a4a <_dtoa_r+0x812>
 80059da:	9b03      	ldr	r3, [sp, #12]
 80059dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d134      	bne.n	8005a4e <_dtoa_r+0x816>
 80059e4:	9b03      	ldr	r3, [sp, #12]
 80059e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80059ea:	0d1b      	lsrs	r3, r3, #20
 80059ec:	051b      	lsls	r3, r3, #20
 80059ee:	b12b      	cbz	r3, 80059fc <_dtoa_r+0x7c4>
 80059f0:	9b07      	ldr	r3, [sp, #28]
 80059f2:	f109 0901 	add.w	r9, r9, #1
 80059f6:	3301      	adds	r3, #1
 80059f8:	9307      	str	r3, [sp, #28]
 80059fa:	2301      	movs	r3, #1
 80059fc:	9308      	str	r3, [sp, #32]
 80059fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d128      	bne.n	8005a56 <_dtoa_r+0x81e>
 8005a04:	2001      	movs	r0, #1
 8005a06:	e02e      	b.n	8005a66 <_dtoa_r+0x82e>
 8005a08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a0a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005a0e:	e796      	b.n	800593e <_dtoa_r+0x706>
 8005a10:	9b08      	ldr	r3, [sp, #32]
 8005a12:	f108 36ff 	add.w	r6, r8, #4294967295
 8005a16:	42b3      	cmp	r3, r6
 8005a18:	bfb7      	itett	lt
 8005a1a:	9b08      	ldrlt	r3, [sp, #32]
 8005a1c:	1b9e      	subge	r6, r3, r6
 8005a1e:	1af2      	sublt	r2, r6, r3
 8005a20:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005a22:	bfbf      	itttt	lt
 8005a24:	9608      	strlt	r6, [sp, #32]
 8005a26:	189b      	addlt	r3, r3, r2
 8005a28:	930c      	strlt	r3, [sp, #48]	; 0x30
 8005a2a:	2600      	movlt	r6, #0
 8005a2c:	f1b8 0f00 	cmp.w	r8, #0
 8005a30:	bfb9      	ittee	lt
 8005a32:	eba9 0508 	sublt.w	r5, r9, r8
 8005a36:	2300      	movlt	r3, #0
 8005a38:	464d      	movge	r5, r9
 8005a3a:	4643      	movge	r3, r8
 8005a3c:	e781      	b.n	8005942 <_dtoa_r+0x70a>
 8005a3e:	9e08      	ldr	r6, [sp, #32]
 8005a40:	464d      	mov	r5, r9
 8005a42:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005a44:	e786      	b.n	8005954 <_dtoa_r+0x71c>
 8005a46:	9a08      	ldr	r2, [sp, #32]
 8005a48:	e7ad      	b.n	80059a6 <_dtoa_r+0x76e>
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	e7d6      	b.n	80059fc <_dtoa_r+0x7c4>
 8005a4e:	9b02      	ldr	r3, [sp, #8]
 8005a50:	e7d4      	b.n	80059fc <_dtoa_r+0x7c4>
 8005a52:	2300      	movs	r3, #0
 8005a54:	9308      	str	r3, [sp, #32]
 8005a56:	6933      	ldr	r3, [r6, #16]
 8005a58:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005a5c:	6918      	ldr	r0, [r3, #16]
 8005a5e:	f000 fdd2 	bl	8006606 <__hi0bits>
 8005a62:	f1c0 0020 	rsb	r0, r0, #32
 8005a66:	9b07      	ldr	r3, [sp, #28]
 8005a68:	4418      	add	r0, r3
 8005a6a:	f010 001f 	ands.w	r0, r0, #31
 8005a6e:	d047      	beq.n	8005b00 <_dtoa_r+0x8c8>
 8005a70:	f1c0 0320 	rsb	r3, r0, #32
 8005a74:	2b04      	cmp	r3, #4
 8005a76:	dd3b      	ble.n	8005af0 <_dtoa_r+0x8b8>
 8005a78:	9b07      	ldr	r3, [sp, #28]
 8005a7a:	f1c0 001c 	rsb	r0, r0, #28
 8005a7e:	4481      	add	r9, r0
 8005a80:	4405      	add	r5, r0
 8005a82:	4403      	add	r3, r0
 8005a84:	9307      	str	r3, [sp, #28]
 8005a86:	f1b9 0f00 	cmp.w	r9, #0
 8005a8a:	dd05      	ble.n	8005a98 <_dtoa_r+0x860>
 8005a8c:	4659      	mov	r1, fp
 8005a8e:	464a      	mov	r2, r9
 8005a90:	4620      	mov	r0, r4
 8005a92:	f000 fef3 	bl	800687c <__lshift>
 8005a96:	4683      	mov	fp, r0
 8005a98:	9b07      	ldr	r3, [sp, #28]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	dd05      	ble.n	8005aaa <_dtoa_r+0x872>
 8005a9e:	4631      	mov	r1, r6
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	4620      	mov	r0, r4
 8005aa4:	f000 feea 	bl	800687c <__lshift>
 8005aa8:	4606      	mov	r6, r0
 8005aaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005aac:	b353      	cbz	r3, 8005b04 <_dtoa_r+0x8cc>
 8005aae:	4631      	mov	r1, r6
 8005ab0:	4658      	mov	r0, fp
 8005ab2:	f000 ff37 	bl	8006924 <__mcmp>
 8005ab6:	2800      	cmp	r0, #0
 8005ab8:	da24      	bge.n	8005b04 <_dtoa_r+0x8cc>
 8005aba:	2300      	movs	r3, #0
 8005abc:	4659      	mov	r1, fp
 8005abe:	220a      	movs	r2, #10
 8005ac0:	4620      	mov	r0, r4
 8005ac2:	f000 fd27 	bl	8006514 <__multadd>
 8005ac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ac8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005acc:	4683      	mov	fp, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f000 8144 	beq.w	8005d5c <_dtoa_r+0xb24>
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	4639      	mov	r1, r7
 8005ad8:	220a      	movs	r2, #10
 8005ada:	4620      	mov	r0, r4
 8005adc:	f000 fd1a 	bl	8006514 <__multadd>
 8005ae0:	9b04      	ldr	r3, [sp, #16]
 8005ae2:	4607      	mov	r7, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	dc4d      	bgt.n	8005b84 <_dtoa_r+0x94c>
 8005ae8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	dd4a      	ble.n	8005b84 <_dtoa_r+0x94c>
 8005aee:	e011      	b.n	8005b14 <_dtoa_r+0x8dc>
 8005af0:	d0c9      	beq.n	8005a86 <_dtoa_r+0x84e>
 8005af2:	9a07      	ldr	r2, [sp, #28]
 8005af4:	331c      	adds	r3, #28
 8005af6:	441a      	add	r2, r3
 8005af8:	4499      	add	r9, r3
 8005afa:	441d      	add	r5, r3
 8005afc:	4613      	mov	r3, r2
 8005afe:	e7c1      	b.n	8005a84 <_dtoa_r+0x84c>
 8005b00:	4603      	mov	r3, r0
 8005b02:	e7f6      	b.n	8005af2 <_dtoa_r+0x8ba>
 8005b04:	f1b8 0f00 	cmp.w	r8, #0
 8005b08:	dc36      	bgt.n	8005b78 <_dtoa_r+0x940>
 8005b0a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005b0c:	2b02      	cmp	r3, #2
 8005b0e:	dd33      	ble.n	8005b78 <_dtoa_r+0x940>
 8005b10:	f8cd 8010 	str.w	r8, [sp, #16]
 8005b14:	9b04      	ldr	r3, [sp, #16]
 8005b16:	b963      	cbnz	r3, 8005b32 <_dtoa_r+0x8fa>
 8005b18:	4631      	mov	r1, r6
 8005b1a:	2205      	movs	r2, #5
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	f000 fcf9 	bl	8006514 <__multadd>
 8005b22:	4601      	mov	r1, r0
 8005b24:	4606      	mov	r6, r0
 8005b26:	4658      	mov	r0, fp
 8005b28:	f000 fefc 	bl	8006924 <__mcmp>
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	f73f add3 	bgt.w	80056d8 <_dtoa_r+0x4a0>
 8005b32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005b34:	9d06      	ldr	r5, [sp, #24]
 8005b36:	ea6f 0a03 	mvn.w	sl, r3
 8005b3a:	f04f 0900 	mov.w	r9, #0
 8005b3e:	4631      	mov	r1, r6
 8005b40:	4620      	mov	r0, r4
 8005b42:	f000 fcd0 	bl	80064e6 <_Bfree>
 8005b46:	2f00      	cmp	r7, #0
 8005b48:	f43f aebd 	beq.w	80058c6 <_dtoa_r+0x68e>
 8005b4c:	f1b9 0f00 	cmp.w	r9, #0
 8005b50:	d005      	beq.n	8005b5e <_dtoa_r+0x926>
 8005b52:	45b9      	cmp	r9, r7
 8005b54:	d003      	beq.n	8005b5e <_dtoa_r+0x926>
 8005b56:	4649      	mov	r1, r9
 8005b58:	4620      	mov	r0, r4
 8005b5a:	f000 fcc4 	bl	80064e6 <_Bfree>
 8005b5e:	4639      	mov	r1, r7
 8005b60:	4620      	mov	r0, r4
 8005b62:	f000 fcc0 	bl	80064e6 <_Bfree>
 8005b66:	e6ae      	b.n	80058c6 <_dtoa_r+0x68e>
 8005b68:	2600      	movs	r6, #0
 8005b6a:	4637      	mov	r7, r6
 8005b6c:	e7e1      	b.n	8005b32 <_dtoa_r+0x8fa>
 8005b6e:	46ba      	mov	sl, r7
 8005b70:	4637      	mov	r7, r6
 8005b72:	e5b1      	b.n	80056d8 <_dtoa_r+0x4a0>
 8005b74:	40240000 	.word	0x40240000
 8005b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b7a:	f8cd 8010 	str.w	r8, [sp, #16]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f000 80f3 	beq.w	8005d6a <_dtoa_r+0xb32>
 8005b84:	2d00      	cmp	r5, #0
 8005b86:	dd05      	ble.n	8005b94 <_dtoa_r+0x95c>
 8005b88:	4639      	mov	r1, r7
 8005b8a:	462a      	mov	r2, r5
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	f000 fe75 	bl	800687c <__lshift>
 8005b92:	4607      	mov	r7, r0
 8005b94:	9b08      	ldr	r3, [sp, #32]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d04c      	beq.n	8005c34 <_dtoa_r+0x9fc>
 8005b9a:	6879      	ldr	r1, [r7, #4]
 8005b9c:	4620      	mov	r0, r4
 8005b9e:	f000 fc6e 	bl	800647e <_Balloc>
 8005ba2:	4605      	mov	r5, r0
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	f107 010c 	add.w	r1, r7, #12
 8005baa:	3202      	adds	r2, #2
 8005bac:	0092      	lsls	r2, r2, #2
 8005bae:	300c      	adds	r0, #12
 8005bb0:	f000 fc5a 	bl	8006468 <memcpy>
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	4629      	mov	r1, r5
 8005bb8:	4620      	mov	r0, r4
 8005bba:	f000 fe5f 	bl	800687c <__lshift>
 8005bbe:	46b9      	mov	r9, r7
 8005bc0:	4607      	mov	r7, r0
 8005bc2:	9b06      	ldr	r3, [sp, #24]
 8005bc4:	9307      	str	r3, [sp, #28]
 8005bc6:	9b02      	ldr	r3, [sp, #8]
 8005bc8:	f003 0301 	and.w	r3, r3, #1
 8005bcc:	9308      	str	r3, [sp, #32]
 8005bce:	4631      	mov	r1, r6
 8005bd0:	4658      	mov	r0, fp
 8005bd2:	f7ff faa3 	bl	800511c <quorem>
 8005bd6:	4649      	mov	r1, r9
 8005bd8:	4605      	mov	r5, r0
 8005bda:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005bde:	4658      	mov	r0, fp
 8005be0:	f000 fea0 	bl	8006924 <__mcmp>
 8005be4:	463a      	mov	r2, r7
 8005be6:	9002      	str	r0, [sp, #8]
 8005be8:	4631      	mov	r1, r6
 8005bea:	4620      	mov	r0, r4
 8005bec:	f000 feb4 	bl	8006958 <__mdiff>
 8005bf0:	68c3      	ldr	r3, [r0, #12]
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	bb03      	cbnz	r3, 8005c38 <_dtoa_r+0xa00>
 8005bf6:	4601      	mov	r1, r0
 8005bf8:	9009      	str	r0, [sp, #36]	; 0x24
 8005bfa:	4658      	mov	r0, fp
 8005bfc:	f000 fe92 	bl	8006924 <__mcmp>
 8005c00:	4603      	mov	r3, r0
 8005c02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c04:	4611      	mov	r1, r2
 8005c06:	4620      	mov	r0, r4
 8005c08:	9309      	str	r3, [sp, #36]	; 0x24
 8005c0a:	f000 fc6c 	bl	80064e6 <_Bfree>
 8005c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c10:	b9a3      	cbnz	r3, 8005c3c <_dtoa_r+0xa04>
 8005c12:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005c14:	b992      	cbnz	r2, 8005c3c <_dtoa_r+0xa04>
 8005c16:	9a08      	ldr	r2, [sp, #32]
 8005c18:	b982      	cbnz	r2, 8005c3c <_dtoa_r+0xa04>
 8005c1a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005c1e:	d029      	beq.n	8005c74 <_dtoa_r+0xa3c>
 8005c20:	9b02      	ldr	r3, [sp, #8]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	dd01      	ble.n	8005c2a <_dtoa_r+0x9f2>
 8005c26:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005c2a:	9b07      	ldr	r3, [sp, #28]
 8005c2c:	1c5d      	adds	r5, r3, #1
 8005c2e:	f883 8000 	strb.w	r8, [r3]
 8005c32:	e784      	b.n	8005b3e <_dtoa_r+0x906>
 8005c34:	4638      	mov	r0, r7
 8005c36:	e7c2      	b.n	8005bbe <_dtoa_r+0x986>
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e7e3      	b.n	8005c04 <_dtoa_r+0x9cc>
 8005c3c:	9a02      	ldr	r2, [sp, #8]
 8005c3e:	2a00      	cmp	r2, #0
 8005c40:	db04      	blt.n	8005c4c <_dtoa_r+0xa14>
 8005c42:	d123      	bne.n	8005c8c <_dtoa_r+0xa54>
 8005c44:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005c46:	bb0a      	cbnz	r2, 8005c8c <_dtoa_r+0xa54>
 8005c48:	9a08      	ldr	r2, [sp, #32]
 8005c4a:	b9fa      	cbnz	r2, 8005c8c <_dtoa_r+0xa54>
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	ddec      	ble.n	8005c2a <_dtoa_r+0x9f2>
 8005c50:	4659      	mov	r1, fp
 8005c52:	2201      	movs	r2, #1
 8005c54:	4620      	mov	r0, r4
 8005c56:	f000 fe11 	bl	800687c <__lshift>
 8005c5a:	4631      	mov	r1, r6
 8005c5c:	4683      	mov	fp, r0
 8005c5e:	f000 fe61 	bl	8006924 <__mcmp>
 8005c62:	2800      	cmp	r0, #0
 8005c64:	dc03      	bgt.n	8005c6e <_dtoa_r+0xa36>
 8005c66:	d1e0      	bne.n	8005c2a <_dtoa_r+0x9f2>
 8005c68:	f018 0f01 	tst.w	r8, #1
 8005c6c:	d0dd      	beq.n	8005c2a <_dtoa_r+0x9f2>
 8005c6e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005c72:	d1d8      	bne.n	8005c26 <_dtoa_r+0x9ee>
 8005c74:	9b07      	ldr	r3, [sp, #28]
 8005c76:	9a07      	ldr	r2, [sp, #28]
 8005c78:	1c5d      	adds	r5, r3, #1
 8005c7a:	2339      	movs	r3, #57	; 0x39
 8005c7c:	7013      	strb	r3, [r2, #0]
 8005c7e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005c82:	1e6a      	subs	r2, r5, #1
 8005c84:	2b39      	cmp	r3, #57	; 0x39
 8005c86:	d04d      	beq.n	8005d24 <_dtoa_r+0xaec>
 8005c88:	3301      	adds	r3, #1
 8005c8a:	e052      	b.n	8005d32 <_dtoa_r+0xafa>
 8005c8c:	9a07      	ldr	r2, [sp, #28]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	f102 0501 	add.w	r5, r2, #1
 8005c94:	dd06      	ble.n	8005ca4 <_dtoa_r+0xa6c>
 8005c96:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005c9a:	d0eb      	beq.n	8005c74 <_dtoa_r+0xa3c>
 8005c9c:	f108 0801 	add.w	r8, r8, #1
 8005ca0:	9b07      	ldr	r3, [sp, #28]
 8005ca2:	e7c4      	b.n	8005c2e <_dtoa_r+0x9f6>
 8005ca4:	9b06      	ldr	r3, [sp, #24]
 8005ca6:	9a04      	ldr	r2, [sp, #16]
 8005ca8:	1aeb      	subs	r3, r5, r3
 8005caa:	4293      	cmp	r3, r2
 8005cac:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005cb0:	d021      	beq.n	8005cf6 <_dtoa_r+0xabe>
 8005cb2:	4659      	mov	r1, fp
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	220a      	movs	r2, #10
 8005cb8:	4620      	mov	r0, r4
 8005cba:	f000 fc2b 	bl	8006514 <__multadd>
 8005cbe:	45b9      	cmp	r9, r7
 8005cc0:	4683      	mov	fp, r0
 8005cc2:	f04f 0300 	mov.w	r3, #0
 8005cc6:	f04f 020a 	mov.w	r2, #10
 8005cca:	4649      	mov	r1, r9
 8005ccc:	4620      	mov	r0, r4
 8005cce:	d105      	bne.n	8005cdc <_dtoa_r+0xaa4>
 8005cd0:	f000 fc20 	bl	8006514 <__multadd>
 8005cd4:	4681      	mov	r9, r0
 8005cd6:	4607      	mov	r7, r0
 8005cd8:	9507      	str	r5, [sp, #28]
 8005cda:	e778      	b.n	8005bce <_dtoa_r+0x996>
 8005cdc:	f000 fc1a 	bl	8006514 <__multadd>
 8005ce0:	4639      	mov	r1, r7
 8005ce2:	4681      	mov	r9, r0
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	220a      	movs	r2, #10
 8005ce8:	4620      	mov	r0, r4
 8005cea:	f000 fc13 	bl	8006514 <__multadd>
 8005cee:	4607      	mov	r7, r0
 8005cf0:	e7f2      	b.n	8005cd8 <_dtoa_r+0xaa0>
 8005cf2:	f04f 0900 	mov.w	r9, #0
 8005cf6:	4659      	mov	r1, fp
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	4620      	mov	r0, r4
 8005cfc:	f000 fdbe 	bl	800687c <__lshift>
 8005d00:	4631      	mov	r1, r6
 8005d02:	4683      	mov	fp, r0
 8005d04:	f000 fe0e 	bl	8006924 <__mcmp>
 8005d08:	2800      	cmp	r0, #0
 8005d0a:	dcb8      	bgt.n	8005c7e <_dtoa_r+0xa46>
 8005d0c:	d102      	bne.n	8005d14 <_dtoa_r+0xadc>
 8005d0e:	f018 0f01 	tst.w	r8, #1
 8005d12:	d1b4      	bne.n	8005c7e <_dtoa_r+0xa46>
 8005d14:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005d18:	1e6a      	subs	r2, r5, #1
 8005d1a:	2b30      	cmp	r3, #48	; 0x30
 8005d1c:	f47f af0f 	bne.w	8005b3e <_dtoa_r+0x906>
 8005d20:	4615      	mov	r5, r2
 8005d22:	e7f7      	b.n	8005d14 <_dtoa_r+0xadc>
 8005d24:	9b06      	ldr	r3, [sp, #24]
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d105      	bne.n	8005d36 <_dtoa_r+0xafe>
 8005d2a:	2331      	movs	r3, #49	; 0x31
 8005d2c:	9a06      	ldr	r2, [sp, #24]
 8005d2e:	f10a 0a01 	add.w	sl, sl, #1
 8005d32:	7013      	strb	r3, [r2, #0]
 8005d34:	e703      	b.n	8005b3e <_dtoa_r+0x906>
 8005d36:	4615      	mov	r5, r2
 8005d38:	e7a1      	b.n	8005c7e <_dtoa_r+0xa46>
 8005d3a:	4b17      	ldr	r3, [pc, #92]	; (8005d98 <_dtoa_r+0xb60>)
 8005d3c:	f7ff bae1 	b.w	8005302 <_dtoa_r+0xca>
 8005d40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f47f aabb 	bne.w	80052be <_dtoa_r+0x86>
 8005d48:	4b14      	ldr	r3, [pc, #80]	; (8005d9c <_dtoa_r+0xb64>)
 8005d4a:	f7ff bada 	b.w	8005302 <_dtoa_r+0xca>
 8005d4e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	f77f ae3f 	ble.w	80059d4 <_dtoa_r+0x79c>
 8005d56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d58:	9308      	str	r3, [sp, #32]
 8005d5a:	e653      	b.n	8005a04 <_dtoa_r+0x7cc>
 8005d5c:	9b04      	ldr	r3, [sp, #16]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	dc03      	bgt.n	8005d6a <_dtoa_r+0xb32>
 8005d62:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	f73f aed5 	bgt.w	8005b14 <_dtoa_r+0x8dc>
 8005d6a:	9d06      	ldr	r5, [sp, #24]
 8005d6c:	4631      	mov	r1, r6
 8005d6e:	4658      	mov	r0, fp
 8005d70:	f7ff f9d4 	bl	800511c <quorem>
 8005d74:	9b06      	ldr	r3, [sp, #24]
 8005d76:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005d7a:	f805 8b01 	strb.w	r8, [r5], #1
 8005d7e:	9a04      	ldr	r2, [sp, #16]
 8005d80:	1aeb      	subs	r3, r5, r3
 8005d82:	429a      	cmp	r2, r3
 8005d84:	ddb5      	ble.n	8005cf2 <_dtoa_r+0xaba>
 8005d86:	4659      	mov	r1, fp
 8005d88:	2300      	movs	r3, #0
 8005d8a:	220a      	movs	r2, #10
 8005d8c:	4620      	mov	r0, r4
 8005d8e:	f000 fbc1 	bl	8006514 <__multadd>
 8005d92:	4683      	mov	fp, r0
 8005d94:	e7ea      	b.n	8005d6c <_dtoa_r+0xb34>
 8005d96:	bf00      	nop
 8005d98:	080071fa 	.word	0x080071fa
 8005d9c:	08007278 	.word	0x08007278

08005da0 <rshift>:
 8005da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005da2:	6906      	ldr	r6, [r0, #16]
 8005da4:	114b      	asrs	r3, r1, #5
 8005da6:	429e      	cmp	r6, r3
 8005da8:	f100 0414 	add.w	r4, r0, #20
 8005dac:	dd31      	ble.n	8005e12 <rshift+0x72>
 8005dae:	f011 011f 	ands.w	r1, r1, #31
 8005db2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8005db6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8005dba:	d108      	bne.n	8005dce <rshift+0x2e>
 8005dbc:	4621      	mov	r1, r4
 8005dbe:	42b2      	cmp	r2, r6
 8005dc0:	460b      	mov	r3, r1
 8005dc2:	d211      	bcs.n	8005de8 <rshift+0x48>
 8005dc4:	f852 3b04 	ldr.w	r3, [r2], #4
 8005dc8:	f841 3b04 	str.w	r3, [r1], #4
 8005dcc:	e7f7      	b.n	8005dbe <rshift+0x1e>
 8005dce:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8005dd2:	4623      	mov	r3, r4
 8005dd4:	f1c1 0c20 	rsb	ip, r1, #32
 8005dd8:	40cd      	lsrs	r5, r1
 8005dda:	3204      	adds	r2, #4
 8005ddc:	42b2      	cmp	r2, r6
 8005dde:	4617      	mov	r7, r2
 8005de0:	d30d      	bcc.n	8005dfe <rshift+0x5e>
 8005de2:	601d      	str	r5, [r3, #0]
 8005de4:	b105      	cbz	r5, 8005de8 <rshift+0x48>
 8005de6:	3304      	adds	r3, #4
 8005de8:	42a3      	cmp	r3, r4
 8005dea:	eba3 0204 	sub.w	r2, r3, r4
 8005dee:	bf08      	it	eq
 8005df0:	2300      	moveq	r3, #0
 8005df2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005df6:	6102      	str	r2, [r0, #16]
 8005df8:	bf08      	it	eq
 8005dfa:	6143      	streq	r3, [r0, #20]
 8005dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dfe:	683f      	ldr	r7, [r7, #0]
 8005e00:	fa07 f70c 	lsl.w	r7, r7, ip
 8005e04:	433d      	orrs	r5, r7
 8005e06:	f843 5b04 	str.w	r5, [r3], #4
 8005e0a:	f852 5b04 	ldr.w	r5, [r2], #4
 8005e0e:	40cd      	lsrs	r5, r1
 8005e10:	e7e4      	b.n	8005ddc <rshift+0x3c>
 8005e12:	4623      	mov	r3, r4
 8005e14:	e7e8      	b.n	8005de8 <rshift+0x48>

08005e16 <__hexdig_fun>:
 8005e16:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005e1a:	2b09      	cmp	r3, #9
 8005e1c:	d802      	bhi.n	8005e24 <__hexdig_fun+0xe>
 8005e1e:	3820      	subs	r0, #32
 8005e20:	b2c0      	uxtb	r0, r0
 8005e22:	4770      	bx	lr
 8005e24:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005e28:	2b05      	cmp	r3, #5
 8005e2a:	d801      	bhi.n	8005e30 <__hexdig_fun+0x1a>
 8005e2c:	3847      	subs	r0, #71	; 0x47
 8005e2e:	e7f7      	b.n	8005e20 <__hexdig_fun+0xa>
 8005e30:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005e34:	2b05      	cmp	r3, #5
 8005e36:	d801      	bhi.n	8005e3c <__hexdig_fun+0x26>
 8005e38:	3827      	subs	r0, #39	; 0x27
 8005e3a:	e7f1      	b.n	8005e20 <__hexdig_fun+0xa>
 8005e3c:	2000      	movs	r0, #0
 8005e3e:	4770      	bx	lr

08005e40 <__gethex>:
 8005e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e44:	b08b      	sub	sp, #44	; 0x2c
 8005e46:	9002      	str	r0, [sp, #8]
 8005e48:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005e4a:	468a      	mov	sl, r1
 8005e4c:	4690      	mov	r8, r2
 8005e4e:	9306      	str	r3, [sp, #24]
 8005e50:	f000 fad1 	bl	80063f6 <__localeconv_l>
 8005e54:	6803      	ldr	r3, [r0, #0]
 8005e56:	f04f 0b00 	mov.w	fp, #0
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	9303      	str	r3, [sp, #12]
 8005e5e:	f7fa f977 	bl	8000150 <strlen>
 8005e62:	9b03      	ldr	r3, [sp, #12]
 8005e64:	9001      	str	r0, [sp, #4]
 8005e66:	4403      	add	r3, r0
 8005e68:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005e6c:	9307      	str	r3, [sp, #28]
 8005e6e:	f8da 3000 	ldr.w	r3, [sl]
 8005e72:	3302      	adds	r3, #2
 8005e74:	461f      	mov	r7, r3
 8005e76:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005e7a:	2830      	cmp	r0, #48	; 0x30
 8005e7c:	d06c      	beq.n	8005f58 <__gethex+0x118>
 8005e7e:	f7ff ffca 	bl	8005e16 <__hexdig_fun>
 8005e82:	4604      	mov	r4, r0
 8005e84:	2800      	cmp	r0, #0
 8005e86:	d16a      	bne.n	8005f5e <__gethex+0x11e>
 8005e88:	9a01      	ldr	r2, [sp, #4]
 8005e8a:	9903      	ldr	r1, [sp, #12]
 8005e8c:	4638      	mov	r0, r7
 8005e8e:	f001 f905 	bl	800709c <strncmp>
 8005e92:	2800      	cmp	r0, #0
 8005e94:	d166      	bne.n	8005f64 <__gethex+0x124>
 8005e96:	9b01      	ldr	r3, [sp, #4]
 8005e98:	5cf8      	ldrb	r0, [r7, r3]
 8005e9a:	18fe      	adds	r6, r7, r3
 8005e9c:	f7ff ffbb 	bl	8005e16 <__hexdig_fun>
 8005ea0:	2800      	cmp	r0, #0
 8005ea2:	d062      	beq.n	8005f6a <__gethex+0x12a>
 8005ea4:	4633      	mov	r3, r6
 8005ea6:	7818      	ldrb	r0, [r3, #0]
 8005ea8:	461f      	mov	r7, r3
 8005eaa:	2830      	cmp	r0, #48	; 0x30
 8005eac:	f103 0301 	add.w	r3, r3, #1
 8005eb0:	d0f9      	beq.n	8005ea6 <__gethex+0x66>
 8005eb2:	f7ff ffb0 	bl	8005e16 <__hexdig_fun>
 8005eb6:	fab0 f580 	clz	r5, r0
 8005eba:	4634      	mov	r4, r6
 8005ebc:	f04f 0b01 	mov.w	fp, #1
 8005ec0:	096d      	lsrs	r5, r5, #5
 8005ec2:	463a      	mov	r2, r7
 8005ec4:	4616      	mov	r6, r2
 8005ec6:	7830      	ldrb	r0, [r6, #0]
 8005ec8:	3201      	adds	r2, #1
 8005eca:	f7ff ffa4 	bl	8005e16 <__hexdig_fun>
 8005ece:	2800      	cmp	r0, #0
 8005ed0:	d1f8      	bne.n	8005ec4 <__gethex+0x84>
 8005ed2:	9a01      	ldr	r2, [sp, #4]
 8005ed4:	9903      	ldr	r1, [sp, #12]
 8005ed6:	4630      	mov	r0, r6
 8005ed8:	f001 f8e0 	bl	800709c <strncmp>
 8005edc:	b950      	cbnz	r0, 8005ef4 <__gethex+0xb4>
 8005ede:	b954      	cbnz	r4, 8005ef6 <__gethex+0xb6>
 8005ee0:	9b01      	ldr	r3, [sp, #4]
 8005ee2:	18f4      	adds	r4, r6, r3
 8005ee4:	4622      	mov	r2, r4
 8005ee6:	4616      	mov	r6, r2
 8005ee8:	7830      	ldrb	r0, [r6, #0]
 8005eea:	3201      	adds	r2, #1
 8005eec:	f7ff ff93 	bl	8005e16 <__hexdig_fun>
 8005ef0:	2800      	cmp	r0, #0
 8005ef2:	d1f8      	bne.n	8005ee6 <__gethex+0xa6>
 8005ef4:	b10c      	cbz	r4, 8005efa <__gethex+0xba>
 8005ef6:	1ba4      	subs	r4, r4, r6
 8005ef8:	00a4      	lsls	r4, r4, #2
 8005efa:	7833      	ldrb	r3, [r6, #0]
 8005efc:	2b50      	cmp	r3, #80	; 0x50
 8005efe:	d001      	beq.n	8005f04 <__gethex+0xc4>
 8005f00:	2b70      	cmp	r3, #112	; 0x70
 8005f02:	d140      	bne.n	8005f86 <__gethex+0x146>
 8005f04:	7873      	ldrb	r3, [r6, #1]
 8005f06:	2b2b      	cmp	r3, #43	; 0x2b
 8005f08:	d031      	beq.n	8005f6e <__gethex+0x12e>
 8005f0a:	2b2d      	cmp	r3, #45	; 0x2d
 8005f0c:	d033      	beq.n	8005f76 <__gethex+0x136>
 8005f0e:	f04f 0900 	mov.w	r9, #0
 8005f12:	1c71      	adds	r1, r6, #1
 8005f14:	7808      	ldrb	r0, [r1, #0]
 8005f16:	f7ff ff7e 	bl	8005e16 <__hexdig_fun>
 8005f1a:	1e43      	subs	r3, r0, #1
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b18      	cmp	r3, #24
 8005f20:	d831      	bhi.n	8005f86 <__gethex+0x146>
 8005f22:	f1a0 0210 	sub.w	r2, r0, #16
 8005f26:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005f2a:	f7ff ff74 	bl	8005e16 <__hexdig_fun>
 8005f2e:	1e43      	subs	r3, r0, #1
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b18      	cmp	r3, #24
 8005f34:	d922      	bls.n	8005f7c <__gethex+0x13c>
 8005f36:	f1b9 0f00 	cmp.w	r9, #0
 8005f3a:	d000      	beq.n	8005f3e <__gethex+0xfe>
 8005f3c:	4252      	negs	r2, r2
 8005f3e:	4414      	add	r4, r2
 8005f40:	f8ca 1000 	str.w	r1, [sl]
 8005f44:	b30d      	cbz	r5, 8005f8a <__gethex+0x14a>
 8005f46:	f1bb 0f00 	cmp.w	fp, #0
 8005f4a:	bf0c      	ite	eq
 8005f4c:	2706      	moveq	r7, #6
 8005f4e:	2700      	movne	r7, #0
 8005f50:	4638      	mov	r0, r7
 8005f52:	b00b      	add	sp, #44	; 0x2c
 8005f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f58:	f10b 0b01 	add.w	fp, fp, #1
 8005f5c:	e78a      	b.n	8005e74 <__gethex+0x34>
 8005f5e:	2500      	movs	r5, #0
 8005f60:	462c      	mov	r4, r5
 8005f62:	e7ae      	b.n	8005ec2 <__gethex+0x82>
 8005f64:	463e      	mov	r6, r7
 8005f66:	2501      	movs	r5, #1
 8005f68:	e7c7      	b.n	8005efa <__gethex+0xba>
 8005f6a:	4604      	mov	r4, r0
 8005f6c:	e7fb      	b.n	8005f66 <__gethex+0x126>
 8005f6e:	f04f 0900 	mov.w	r9, #0
 8005f72:	1cb1      	adds	r1, r6, #2
 8005f74:	e7ce      	b.n	8005f14 <__gethex+0xd4>
 8005f76:	f04f 0901 	mov.w	r9, #1
 8005f7a:	e7fa      	b.n	8005f72 <__gethex+0x132>
 8005f7c:	230a      	movs	r3, #10
 8005f7e:	fb03 0202 	mla	r2, r3, r2, r0
 8005f82:	3a10      	subs	r2, #16
 8005f84:	e7cf      	b.n	8005f26 <__gethex+0xe6>
 8005f86:	4631      	mov	r1, r6
 8005f88:	e7da      	b.n	8005f40 <__gethex+0x100>
 8005f8a:	4629      	mov	r1, r5
 8005f8c:	1bf3      	subs	r3, r6, r7
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	2b07      	cmp	r3, #7
 8005f92:	dc49      	bgt.n	8006028 <__gethex+0x1e8>
 8005f94:	9802      	ldr	r0, [sp, #8]
 8005f96:	f000 fa72 	bl	800647e <_Balloc>
 8005f9a:	f04f 0b00 	mov.w	fp, #0
 8005f9e:	4605      	mov	r5, r0
 8005fa0:	46da      	mov	sl, fp
 8005fa2:	9b01      	ldr	r3, [sp, #4]
 8005fa4:	f100 0914 	add.w	r9, r0, #20
 8005fa8:	f1c3 0301 	rsb	r3, r3, #1
 8005fac:	f8cd 9010 	str.w	r9, [sp, #16]
 8005fb0:	9308      	str	r3, [sp, #32]
 8005fb2:	42b7      	cmp	r7, r6
 8005fb4:	d33b      	bcc.n	800602e <__gethex+0x1ee>
 8005fb6:	9804      	ldr	r0, [sp, #16]
 8005fb8:	f840 ab04 	str.w	sl, [r0], #4
 8005fbc:	eba0 0009 	sub.w	r0, r0, r9
 8005fc0:	1080      	asrs	r0, r0, #2
 8005fc2:	6128      	str	r0, [r5, #16]
 8005fc4:	0147      	lsls	r7, r0, #5
 8005fc6:	4650      	mov	r0, sl
 8005fc8:	f000 fb1d 	bl	8006606 <__hi0bits>
 8005fcc:	f8d8 6000 	ldr.w	r6, [r8]
 8005fd0:	1a3f      	subs	r7, r7, r0
 8005fd2:	42b7      	cmp	r7, r6
 8005fd4:	dd64      	ble.n	80060a0 <__gethex+0x260>
 8005fd6:	1bbf      	subs	r7, r7, r6
 8005fd8:	4639      	mov	r1, r7
 8005fda:	4628      	mov	r0, r5
 8005fdc:	f000 fe27 	bl	8006c2e <__any_on>
 8005fe0:	4682      	mov	sl, r0
 8005fe2:	b178      	cbz	r0, 8006004 <__gethex+0x1c4>
 8005fe4:	f04f 0a01 	mov.w	sl, #1
 8005fe8:	1e7b      	subs	r3, r7, #1
 8005fea:	1159      	asrs	r1, r3, #5
 8005fec:	f003 021f 	and.w	r2, r3, #31
 8005ff0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005ff4:	fa0a f202 	lsl.w	r2, sl, r2
 8005ff8:	420a      	tst	r2, r1
 8005ffa:	d003      	beq.n	8006004 <__gethex+0x1c4>
 8005ffc:	4553      	cmp	r3, sl
 8005ffe:	dc46      	bgt.n	800608e <__gethex+0x24e>
 8006000:	f04f 0a02 	mov.w	sl, #2
 8006004:	4639      	mov	r1, r7
 8006006:	4628      	mov	r0, r5
 8006008:	f7ff feca 	bl	8005da0 <rshift>
 800600c:	443c      	add	r4, r7
 800600e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006012:	42a3      	cmp	r3, r4
 8006014:	da52      	bge.n	80060bc <__gethex+0x27c>
 8006016:	4629      	mov	r1, r5
 8006018:	9802      	ldr	r0, [sp, #8]
 800601a:	f000 fa64 	bl	80064e6 <_Bfree>
 800601e:	2300      	movs	r3, #0
 8006020:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006022:	27a3      	movs	r7, #163	; 0xa3
 8006024:	6013      	str	r3, [r2, #0]
 8006026:	e793      	b.n	8005f50 <__gethex+0x110>
 8006028:	3101      	adds	r1, #1
 800602a:	105b      	asrs	r3, r3, #1
 800602c:	e7b0      	b.n	8005f90 <__gethex+0x150>
 800602e:	1e73      	subs	r3, r6, #1
 8006030:	9305      	str	r3, [sp, #20]
 8006032:	9a07      	ldr	r2, [sp, #28]
 8006034:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006038:	4293      	cmp	r3, r2
 800603a:	d018      	beq.n	800606e <__gethex+0x22e>
 800603c:	f1bb 0f20 	cmp.w	fp, #32
 8006040:	d107      	bne.n	8006052 <__gethex+0x212>
 8006042:	9b04      	ldr	r3, [sp, #16]
 8006044:	f8c3 a000 	str.w	sl, [r3]
 8006048:	f04f 0a00 	mov.w	sl, #0
 800604c:	46d3      	mov	fp, sl
 800604e:	3304      	adds	r3, #4
 8006050:	9304      	str	r3, [sp, #16]
 8006052:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006056:	f7ff fede 	bl	8005e16 <__hexdig_fun>
 800605a:	f000 000f 	and.w	r0, r0, #15
 800605e:	fa00 f00b 	lsl.w	r0, r0, fp
 8006062:	ea4a 0a00 	orr.w	sl, sl, r0
 8006066:	f10b 0b04 	add.w	fp, fp, #4
 800606a:	9b05      	ldr	r3, [sp, #20]
 800606c:	e00d      	b.n	800608a <__gethex+0x24a>
 800606e:	9b05      	ldr	r3, [sp, #20]
 8006070:	9a08      	ldr	r2, [sp, #32]
 8006072:	4413      	add	r3, r2
 8006074:	42bb      	cmp	r3, r7
 8006076:	d3e1      	bcc.n	800603c <__gethex+0x1fc>
 8006078:	4618      	mov	r0, r3
 800607a:	9a01      	ldr	r2, [sp, #4]
 800607c:	9903      	ldr	r1, [sp, #12]
 800607e:	9309      	str	r3, [sp, #36]	; 0x24
 8006080:	f001 f80c 	bl	800709c <strncmp>
 8006084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006086:	2800      	cmp	r0, #0
 8006088:	d1d8      	bne.n	800603c <__gethex+0x1fc>
 800608a:	461e      	mov	r6, r3
 800608c:	e791      	b.n	8005fb2 <__gethex+0x172>
 800608e:	1eb9      	subs	r1, r7, #2
 8006090:	4628      	mov	r0, r5
 8006092:	f000 fdcc 	bl	8006c2e <__any_on>
 8006096:	2800      	cmp	r0, #0
 8006098:	d0b2      	beq.n	8006000 <__gethex+0x1c0>
 800609a:	f04f 0a03 	mov.w	sl, #3
 800609e:	e7b1      	b.n	8006004 <__gethex+0x1c4>
 80060a0:	da09      	bge.n	80060b6 <__gethex+0x276>
 80060a2:	1bf7      	subs	r7, r6, r7
 80060a4:	4629      	mov	r1, r5
 80060a6:	463a      	mov	r2, r7
 80060a8:	9802      	ldr	r0, [sp, #8]
 80060aa:	f000 fbe7 	bl	800687c <__lshift>
 80060ae:	4605      	mov	r5, r0
 80060b0:	1be4      	subs	r4, r4, r7
 80060b2:	f100 0914 	add.w	r9, r0, #20
 80060b6:	f04f 0a00 	mov.w	sl, #0
 80060ba:	e7a8      	b.n	800600e <__gethex+0x1ce>
 80060bc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80060c0:	42a0      	cmp	r0, r4
 80060c2:	dd6b      	ble.n	800619c <__gethex+0x35c>
 80060c4:	1b04      	subs	r4, r0, r4
 80060c6:	42a6      	cmp	r6, r4
 80060c8:	dc2e      	bgt.n	8006128 <__gethex+0x2e8>
 80060ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d022      	beq.n	8006118 <__gethex+0x2d8>
 80060d2:	2b03      	cmp	r3, #3
 80060d4:	d024      	beq.n	8006120 <__gethex+0x2e0>
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d115      	bne.n	8006106 <__gethex+0x2c6>
 80060da:	42a6      	cmp	r6, r4
 80060dc:	d113      	bne.n	8006106 <__gethex+0x2c6>
 80060de:	2e01      	cmp	r6, #1
 80060e0:	dc0b      	bgt.n	80060fa <__gethex+0x2ba>
 80060e2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80060e6:	9a06      	ldr	r2, [sp, #24]
 80060e8:	2762      	movs	r7, #98	; 0x62
 80060ea:	6013      	str	r3, [r2, #0]
 80060ec:	2301      	movs	r3, #1
 80060ee:	612b      	str	r3, [r5, #16]
 80060f0:	f8c9 3000 	str.w	r3, [r9]
 80060f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80060f6:	601d      	str	r5, [r3, #0]
 80060f8:	e72a      	b.n	8005f50 <__gethex+0x110>
 80060fa:	1e71      	subs	r1, r6, #1
 80060fc:	4628      	mov	r0, r5
 80060fe:	f000 fd96 	bl	8006c2e <__any_on>
 8006102:	2800      	cmp	r0, #0
 8006104:	d1ed      	bne.n	80060e2 <__gethex+0x2a2>
 8006106:	4629      	mov	r1, r5
 8006108:	9802      	ldr	r0, [sp, #8]
 800610a:	f000 f9ec 	bl	80064e6 <_Bfree>
 800610e:	2300      	movs	r3, #0
 8006110:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006112:	2750      	movs	r7, #80	; 0x50
 8006114:	6013      	str	r3, [r2, #0]
 8006116:	e71b      	b.n	8005f50 <__gethex+0x110>
 8006118:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800611a:	2b00      	cmp	r3, #0
 800611c:	d0e1      	beq.n	80060e2 <__gethex+0x2a2>
 800611e:	e7f2      	b.n	8006106 <__gethex+0x2c6>
 8006120:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1dd      	bne.n	80060e2 <__gethex+0x2a2>
 8006126:	e7ee      	b.n	8006106 <__gethex+0x2c6>
 8006128:	1e67      	subs	r7, r4, #1
 800612a:	f1ba 0f00 	cmp.w	sl, #0
 800612e:	d132      	bne.n	8006196 <__gethex+0x356>
 8006130:	b127      	cbz	r7, 800613c <__gethex+0x2fc>
 8006132:	4639      	mov	r1, r7
 8006134:	4628      	mov	r0, r5
 8006136:	f000 fd7a 	bl	8006c2e <__any_on>
 800613a:	4682      	mov	sl, r0
 800613c:	2301      	movs	r3, #1
 800613e:	117a      	asrs	r2, r7, #5
 8006140:	f007 071f 	and.w	r7, r7, #31
 8006144:	fa03 f707 	lsl.w	r7, r3, r7
 8006148:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800614c:	4621      	mov	r1, r4
 800614e:	421f      	tst	r7, r3
 8006150:	f04f 0702 	mov.w	r7, #2
 8006154:	4628      	mov	r0, r5
 8006156:	bf18      	it	ne
 8006158:	f04a 0a02 	orrne.w	sl, sl, #2
 800615c:	1b36      	subs	r6, r6, r4
 800615e:	f7ff fe1f 	bl	8005da0 <rshift>
 8006162:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8006166:	f1ba 0f00 	cmp.w	sl, #0
 800616a:	d048      	beq.n	80061fe <__gethex+0x3be>
 800616c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006170:	2b02      	cmp	r3, #2
 8006172:	d015      	beq.n	80061a0 <__gethex+0x360>
 8006174:	2b03      	cmp	r3, #3
 8006176:	d017      	beq.n	80061a8 <__gethex+0x368>
 8006178:	2b01      	cmp	r3, #1
 800617a:	d109      	bne.n	8006190 <__gethex+0x350>
 800617c:	f01a 0f02 	tst.w	sl, #2
 8006180:	d006      	beq.n	8006190 <__gethex+0x350>
 8006182:	f8d9 3000 	ldr.w	r3, [r9]
 8006186:	ea4a 0a03 	orr.w	sl, sl, r3
 800618a:	f01a 0f01 	tst.w	sl, #1
 800618e:	d10e      	bne.n	80061ae <__gethex+0x36e>
 8006190:	f047 0710 	orr.w	r7, r7, #16
 8006194:	e033      	b.n	80061fe <__gethex+0x3be>
 8006196:	f04f 0a01 	mov.w	sl, #1
 800619a:	e7cf      	b.n	800613c <__gethex+0x2fc>
 800619c:	2701      	movs	r7, #1
 800619e:	e7e2      	b.n	8006166 <__gethex+0x326>
 80061a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80061a2:	f1c3 0301 	rsb	r3, r3, #1
 80061a6:	9315      	str	r3, [sp, #84]	; 0x54
 80061a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d0f0      	beq.n	8006190 <__gethex+0x350>
 80061ae:	f04f 0c00 	mov.w	ip, #0
 80061b2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80061b6:	f105 0314 	add.w	r3, r5, #20
 80061ba:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80061be:	eb03 010a 	add.w	r1, r3, sl
 80061c2:	4618      	mov	r0, r3
 80061c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80061c8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80061cc:	d01c      	beq.n	8006208 <__gethex+0x3c8>
 80061ce:	3201      	adds	r2, #1
 80061d0:	6002      	str	r2, [r0, #0]
 80061d2:	2f02      	cmp	r7, #2
 80061d4:	f105 0314 	add.w	r3, r5, #20
 80061d8:	d138      	bne.n	800624c <__gethex+0x40c>
 80061da:	f8d8 2000 	ldr.w	r2, [r8]
 80061de:	3a01      	subs	r2, #1
 80061e0:	42b2      	cmp	r2, r6
 80061e2:	d10a      	bne.n	80061fa <__gethex+0x3ba>
 80061e4:	2201      	movs	r2, #1
 80061e6:	1171      	asrs	r1, r6, #5
 80061e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80061ec:	f006 061f 	and.w	r6, r6, #31
 80061f0:	fa02 f606 	lsl.w	r6, r2, r6
 80061f4:	421e      	tst	r6, r3
 80061f6:	bf18      	it	ne
 80061f8:	4617      	movne	r7, r2
 80061fa:	f047 0720 	orr.w	r7, r7, #32
 80061fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006200:	601d      	str	r5, [r3, #0]
 8006202:	9b06      	ldr	r3, [sp, #24]
 8006204:	601c      	str	r4, [r3, #0]
 8006206:	e6a3      	b.n	8005f50 <__gethex+0x110>
 8006208:	4299      	cmp	r1, r3
 800620a:	f843 cc04 	str.w	ip, [r3, #-4]
 800620e:	d8d8      	bhi.n	80061c2 <__gethex+0x382>
 8006210:	68ab      	ldr	r3, [r5, #8]
 8006212:	4599      	cmp	r9, r3
 8006214:	db12      	blt.n	800623c <__gethex+0x3fc>
 8006216:	6869      	ldr	r1, [r5, #4]
 8006218:	9802      	ldr	r0, [sp, #8]
 800621a:	3101      	adds	r1, #1
 800621c:	f000 f92f 	bl	800647e <_Balloc>
 8006220:	4683      	mov	fp, r0
 8006222:	692a      	ldr	r2, [r5, #16]
 8006224:	f105 010c 	add.w	r1, r5, #12
 8006228:	3202      	adds	r2, #2
 800622a:	0092      	lsls	r2, r2, #2
 800622c:	300c      	adds	r0, #12
 800622e:	f000 f91b 	bl	8006468 <memcpy>
 8006232:	4629      	mov	r1, r5
 8006234:	9802      	ldr	r0, [sp, #8]
 8006236:	f000 f956 	bl	80064e6 <_Bfree>
 800623a:	465d      	mov	r5, fp
 800623c:	692b      	ldr	r3, [r5, #16]
 800623e:	1c5a      	adds	r2, r3, #1
 8006240:	612a      	str	r2, [r5, #16]
 8006242:	2201      	movs	r2, #1
 8006244:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006248:	615a      	str	r2, [r3, #20]
 800624a:	e7c2      	b.n	80061d2 <__gethex+0x392>
 800624c:	692a      	ldr	r2, [r5, #16]
 800624e:	454a      	cmp	r2, r9
 8006250:	dd0b      	ble.n	800626a <__gethex+0x42a>
 8006252:	2101      	movs	r1, #1
 8006254:	4628      	mov	r0, r5
 8006256:	f7ff fda3 	bl	8005da0 <rshift>
 800625a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800625e:	3401      	adds	r4, #1
 8006260:	42a3      	cmp	r3, r4
 8006262:	f6ff aed8 	blt.w	8006016 <__gethex+0x1d6>
 8006266:	2701      	movs	r7, #1
 8006268:	e7c7      	b.n	80061fa <__gethex+0x3ba>
 800626a:	f016 061f 	ands.w	r6, r6, #31
 800626e:	d0fa      	beq.n	8006266 <__gethex+0x426>
 8006270:	449a      	add	sl, r3
 8006272:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006276:	f000 f9c6 	bl	8006606 <__hi0bits>
 800627a:	f1c6 0620 	rsb	r6, r6, #32
 800627e:	42b0      	cmp	r0, r6
 8006280:	dbe7      	blt.n	8006252 <__gethex+0x412>
 8006282:	e7f0      	b.n	8006266 <__gethex+0x426>

08006284 <L_shift>:
 8006284:	f1c2 0208 	rsb	r2, r2, #8
 8006288:	0092      	lsls	r2, r2, #2
 800628a:	b570      	push	{r4, r5, r6, lr}
 800628c:	f1c2 0620 	rsb	r6, r2, #32
 8006290:	6843      	ldr	r3, [r0, #4]
 8006292:	6804      	ldr	r4, [r0, #0]
 8006294:	fa03 f506 	lsl.w	r5, r3, r6
 8006298:	432c      	orrs	r4, r5
 800629a:	40d3      	lsrs	r3, r2
 800629c:	6004      	str	r4, [r0, #0]
 800629e:	f840 3f04 	str.w	r3, [r0, #4]!
 80062a2:	4288      	cmp	r0, r1
 80062a4:	d3f4      	bcc.n	8006290 <L_shift+0xc>
 80062a6:	bd70      	pop	{r4, r5, r6, pc}

080062a8 <__match>:
 80062a8:	b530      	push	{r4, r5, lr}
 80062aa:	6803      	ldr	r3, [r0, #0]
 80062ac:	3301      	adds	r3, #1
 80062ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062b2:	b914      	cbnz	r4, 80062ba <__match+0x12>
 80062b4:	6003      	str	r3, [r0, #0]
 80062b6:	2001      	movs	r0, #1
 80062b8:	bd30      	pop	{r4, r5, pc}
 80062ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062be:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80062c2:	2d19      	cmp	r5, #25
 80062c4:	bf98      	it	ls
 80062c6:	3220      	addls	r2, #32
 80062c8:	42a2      	cmp	r2, r4
 80062ca:	d0f0      	beq.n	80062ae <__match+0x6>
 80062cc:	2000      	movs	r0, #0
 80062ce:	e7f3      	b.n	80062b8 <__match+0x10>

080062d0 <__hexnan>:
 80062d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d4:	2500      	movs	r5, #0
 80062d6:	680b      	ldr	r3, [r1, #0]
 80062d8:	4682      	mov	sl, r0
 80062da:	115f      	asrs	r7, r3, #5
 80062dc:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80062e0:	f013 031f 	ands.w	r3, r3, #31
 80062e4:	bf18      	it	ne
 80062e6:	3704      	addne	r7, #4
 80062e8:	1f3e      	subs	r6, r7, #4
 80062ea:	4690      	mov	r8, r2
 80062ec:	46b1      	mov	r9, r6
 80062ee:	4634      	mov	r4, r6
 80062f0:	46ab      	mov	fp, r5
 80062f2:	b087      	sub	sp, #28
 80062f4:	6801      	ldr	r1, [r0, #0]
 80062f6:	9301      	str	r3, [sp, #4]
 80062f8:	f847 5c04 	str.w	r5, [r7, #-4]
 80062fc:	9502      	str	r5, [sp, #8]
 80062fe:	784a      	ldrb	r2, [r1, #1]
 8006300:	1c4b      	adds	r3, r1, #1
 8006302:	9303      	str	r3, [sp, #12]
 8006304:	b342      	cbz	r2, 8006358 <__hexnan+0x88>
 8006306:	4610      	mov	r0, r2
 8006308:	9105      	str	r1, [sp, #20]
 800630a:	9204      	str	r2, [sp, #16]
 800630c:	f7ff fd83 	bl	8005e16 <__hexdig_fun>
 8006310:	2800      	cmp	r0, #0
 8006312:	d143      	bne.n	800639c <__hexnan+0xcc>
 8006314:	9a04      	ldr	r2, [sp, #16]
 8006316:	9905      	ldr	r1, [sp, #20]
 8006318:	2a20      	cmp	r2, #32
 800631a:	d818      	bhi.n	800634e <__hexnan+0x7e>
 800631c:	9b02      	ldr	r3, [sp, #8]
 800631e:	459b      	cmp	fp, r3
 8006320:	dd13      	ble.n	800634a <__hexnan+0x7a>
 8006322:	454c      	cmp	r4, r9
 8006324:	d206      	bcs.n	8006334 <__hexnan+0x64>
 8006326:	2d07      	cmp	r5, #7
 8006328:	dc04      	bgt.n	8006334 <__hexnan+0x64>
 800632a:	462a      	mov	r2, r5
 800632c:	4649      	mov	r1, r9
 800632e:	4620      	mov	r0, r4
 8006330:	f7ff ffa8 	bl	8006284 <L_shift>
 8006334:	4544      	cmp	r4, r8
 8006336:	d944      	bls.n	80063c2 <__hexnan+0xf2>
 8006338:	2300      	movs	r3, #0
 800633a:	f1a4 0904 	sub.w	r9, r4, #4
 800633e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006342:	461d      	mov	r5, r3
 8006344:	464c      	mov	r4, r9
 8006346:	f8cd b008 	str.w	fp, [sp, #8]
 800634a:	9903      	ldr	r1, [sp, #12]
 800634c:	e7d7      	b.n	80062fe <__hexnan+0x2e>
 800634e:	2a29      	cmp	r2, #41	; 0x29
 8006350:	d14a      	bne.n	80063e8 <__hexnan+0x118>
 8006352:	3102      	adds	r1, #2
 8006354:	f8ca 1000 	str.w	r1, [sl]
 8006358:	f1bb 0f00 	cmp.w	fp, #0
 800635c:	d044      	beq.n	80063e8 <__hexnan+0x118>
 800635e:	454c      	cmp	r4, r9
 8006360:	d206      	bcs.n	8006370 <__hexnan+0xa0>
 8006362:	2d07      	cmp	r5, #7
 8006364:	dc04      	bgt.n	8006370 <__hexnan+0xa0>
 8006366:	462a      	mov	r2, r5
 8006368:	4649      	mov	r1, r9
 800636a:	4620      	mov	r0, r4
 800636c:	f7ff ff8a 	bl	8006284 <L_shift>
 8006370:	4544      	cmp	r4, r8
 8006372:	d928      	bls.n	80063c6 <__hexnan+0xf6>
 8006374:	4643      	mov	r3, r8
 8006376:	f854 2b04 	ldr.w	r2, [r4], #4
 800637a:	42a6      	cmp	r6, r4
 800637c:	f843 2b04 	str.w	r2, [r3], #4
 8006380:	d2f9      	bcs.n	8006376 <__hexnan+0xa6>
 8006382:	2200      	movs	r2, #0
 8006384:	f843 2b04 	str.w	r2, [r3], #4
 8006388:	429e      	cmp	r6, r3
 800638a:	d2fb      	bcs.n	8006384 <__hexnan+0xb4>
 800638c:	6833      	ldr	r3, [r6, #0]
 800638e:	b91b      	cbnz	r3, 8006398 <__hexnan+0xc8>
 8006390:	4546      	cmp	r6, r8
 8006392:	d127      	bne.n	80063e4 <__hexnan+0x114>
 8006394:	2301      	movs	r3, #1
 8006396:	6033      	str	r3, [r6, #0]
 8006398:	2005      	movs	r0, #5
 800639a:	e026      	b.n	80063ea <__hexnan+0x11a>
 800639c:	3501      	adds	r5, #1
 800639e:	2d08      	cmp	r5, #8
 80063a0:	f10b 0b01 	add.w	fp, fp, #1
 80063a4:	dd06      	ble.n	80063b4 <__hexnan+0xe4>
 80063a6:	4544      	cmp	r4, r8
 80063a8:	d9cf      	bls.n	800634a <__hexnan+0x7a>
 80063aa:	2300      	movs	r3, #0
 80063ac:	2501      	movs	r5, #1
 80063ae:	f844 3c04 	str.w	r3, [r4, #-4]
 80063b2:	3c04      	subs	r4, #4
 80063b4:	6822      	ldr	r2, [r4, #0]
 80063b6:	f000 000f 	and.w	r0, r0, #15
 80063ba:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80063be:	6020      	str	r0, [r4, #0]
 80063c0:	e7c3      	b.n	800634a <__hexnan+0x7a>
 80063c2:	2508      	movs	r5, #8
 80063c4:	e7c1      	b.n	800634a <__hexnan+0x7a>
 80063c6:	9b01      	ldr	r3, [sp, #4]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d0df      	beq.n	800638c <__hexnan+0xbc>
 80063cc:	f04f 32ff 	mov.w	r2, #4294967295
 80063d0:	f1c3 0320 	rsb	r3, r3, #32
 80063d4:	fa22 f303 	lsr.w	r3, r2, r3
 80063d8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80063dc:	401a      	ands	r2, r3
 80063de:	f847 2c04 	str.w	r2, [r7, #-4]
 80063e2:	e7d3      	b.n	800638c <__hexnan+0xbc>
 80063e4:	3e04      	subs	r6, #4
 80063e6:	e7d1      	b.n	800638c <__hexnan+0xbc>
 80063e8:	2004      	movs	r0, #4
 80063ea:	b007      	add	sp, #28
 80063ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080063f0 <__locale_ctype_ptr_l>:
 80063f0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80063f4:	4770      	bx	lr

080063f6 <__localeconv_l>:
 80063f6:	30f0      	adds	r0, #240	; 0xf0
 80063f8:	4770      	bx	lr
	...

080063fc <_localeconv_r>:
 80063fc:	4b04      	ldr	r3, [pc, #16]	; (8006410 <_localeconv_r+0x14>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6a18      	ldr	r0, [r3, #32]
 8006402:	4b04      	ldr	r3, [pc, #16]	; (8006414 <_localeconv_r+0x18>)
 8006404:	2800      	cmp	r0, #0
 8006406:	bf08      	it	eq
 8006408:	4618      	moveq	r0, r3
 800640a:	30f0      	adds	r0, #240	; 0xf0
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop
 8006410:	2000000c 	.word	0x2000000c
 8006414:	20000070 	.word	0x20000070

08006418 <malloc>:
 8006418:	4b02      	ldr	r3, [pc, #8]	; (8006424 <malloc+0xc>)
 800641a:	4601      	mov	r1, r0
 800641c:	6818      	ldr	r0, [r3, #0]
 800641e:	f000 bc81 	b.w	8006d24 <_malloc_r>
 8006422:	bf00      	nop
 8006424:	2000000c 	.word	0x2000000c

08006428 <__ascii_mbtowc>:
 8006428:	b082      	sub	sp, #8
 800642a:	b901      	cbnz	r1, 800642e <__ascii_mbtowc+0x6>
 800642c:	a901      	add	r1, sp, #4
 800642e:	b142      	cbz	r2, 8006442 <__ascii_mbtowc+0x1a>
 8006430:	b14b      	cbz	r3, 8006446 <__ascii_mbtowc+0x1e>
 8006432:	7813      	ldrb	r3, [r2, #0]
 8006434:	600b      	str	r3, [r1, #0]
 8006436:	7812      	ldrb	r2, [r2, #0]
 8006438:	1c10      	adds	r0, r2, #0
 800643a:	bf18      	it	ne
 800643c:	2001      	movne	r0, #1
 800643e:	b002      	add	sp, #8
 8006440:	4770      	bx	lr
 8006442:	4610      	mov	r0, r2
 8006444:	e7fb      	b.n	800643e <__ascii_mbtowc+0x16>
 8006446:	f06f 0001 	mvn.w	r0, #1
 800644a:	e7f8      	b.n	800643e <__ascii_mbtowc+0x16>

0800644c <memchr>:
 800644c:	b510      	push	{r4, lr}
 800644e:	b2c9      	uxtb	r1, r1
 8006450:	4402      	add	r2, r0
 8006452:	4290      	cmp	r0, r2
 8006454:	4603      	mov	r3, r0
 8006456:	d101      	bne.n	800645c <memchr+0x10>
 8006458:	2300      	movs	r3, #0
 800645a:	e003      	b.n	8006464 <memchr+0x18>
 800645c:	781c      	ldrb	r4, [r3, #0]
 800645e:	3001      	adds	r0, #1
 8006460:	428c      	cmp	r4, r1
 8006462:	d1f6      	bne.n	8006452 <memchr+0x6>
 8006464:	4618      	mov	r0, r3
 8006466:	bd10      	pop	{r4, pc}

08006468 <memcpy>:
 8006468:	b510      	push	{r4, lr}
 800646a:	1e43      	subs	r3, r0, #1
 800646c:	440a      	add	r2, r1
 800646e:	4291      	cmp	r1, r2
 8006470:	d100      	bne.n	8006474 <memcpy+0xc>
 8006472:	bd10      	pop	{r4, pc}
 8006474:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006478:	f803 4f01 	strb.w	r4, [r3, #1]!
 800647c:	e7f7      	b.n	800646e <memcpy+0x6>

0800647e <_Balloc>:
 800647e:	b570      	push	{r4, r5, r6, lr}
 8006480:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006482:	4604      	mov	r4, r0
 8006484:	460e      	mov	r6, r1
 8006486:	b93d      	cbnz	r5, 8006498 <_Balloc+0x1a>
 8006488:	2010      	movs	r0, #16
 800648a:	f7ff ffc5 	bl	8006418 <malloc>
 800648e:	6260      	str	r0, [r4, #36]	; 0x24
 8006490:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006494:	6005      	str	r5, [r0, #0]
 8006496:	60c5      	str	r5, [r0, #12]
 8006498:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800649a:	68eb      	ldr	r3, [r5, #12]
 800649c:	b183      	cbz	r3, 80064c0 <_Balloc+0x42>
 800649e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80064a6:	b9b8      	cbnz	r0, 80064d8 <_Balloc+0x5a>
 80064a8:	2101      	movs	r1, #1
 80064aa:	fa01 f506 	lsl.w	r5, r1, r6
 80064ae:	1d6a      	adds	r2, r5, #5
 80064b0:	0092      	lsls	r2, r2, #2
 80064b2:	4620      	mov	r0, r4
 80064b4:	f000 fbdc 	bl	8006c70 <_calloc_r>
 80064b8:	b160      	cbz	r0, 80064d4 <_Balloc+0x56>
 80064ba:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80064be:	e00e      	b.n	80064de <_Balloc+0x60>
 80064c0:	2221      	movs	r2, #33	; 0x21
 80064c2:	2104      	movs	r1, #4
 80064c4:	4620      	mov	r0, r4
 80064c6:	f000 fbd3 	bl	8006c70 <_calloc_r>
 80064ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064cc:	60e8      	str	r0, [r5, #12]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1e4      	bne.n	800649e <_Balloc+0x20>
 80064d4:	2000      	movs	r0, #0
 80064d6:	bd70      	pop	{r4, r5, r6, pc}
 80064d8:	6802      	ldr	r2, [r0, #0]
 80064da:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80064de:	2300      	movs	r3, #0
 80064e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80064e4:	e7f7      	b.n	80064d6 <_Balloc+0x58>

080064e6 <_Bfree>:
 80064e6:	b570      	push	{r4, r5, r6, lr}
 80064e8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80064ea:	4606      	mov	r6, r0
 80064ec:	460d      	mov	r5, r1
 80064ee:	b93c      	cbnz	r4, 8006500 <_Bfree+0x1a>
 80064f0:	2010      	movs	r0, #16
 80064f2:	f7ff ff91 	bl	8006418 <malloc>
 80064f6:	6270      	str	r0, [r6, #36]	; 0x24
 80064f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80064fc:	6004      	str	r4, [r0, #0]
 80064fe:	60c4      	str	r4, [r0, #12]
 8006500:	b13d      	cbz	r5, 8006512 <_Bfree+0x2c>
 8006502:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006504:	686a      	ldr	r2, [r5, #4]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800650c:	6029      	str	r1, [r5, #0]
 800650e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006512:	bd70      	pop	{r4, r5, r6, pc}

08006514 <__multadd>:
 8006514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006518:	461f      	mov	r7, r3
 800651a:	4606      	mov	r6, r0
 800651c:	460c      	mov	r4, r1
 800651e:	2300      	movs	r3, #0
 8006520:	690d      	ldr	r5, [r1, #16]
 8006522:	f101 0c14 	add.w	ip, r1, #20
 8006526:	f8dc 0000 	ldr.w	r0, [ip]
 800652a:	3301      	adds	r3, #1
 800652c:	b281      	uxth	r1, r0
 800652e:	fb02 7101 	mla	r1, r2, r1, r7
 8006532:	0c00      	lsrs	r0, r0, #16
 8006534:	0c0f      	lsrs	r7, r1, #16
 8006536:	fb02 7000 	mla	r0, r2, r0, r7
 800653a:	b289      	uxth	r1, r1
 800653c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006540:	429d      	cmp	r5, r3
 8006542:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006546:	f84c 1b04 	str.w	r1, [ip], #4
 800654a:	dcec      	bgt.n	8006526 <__multadd+0x12>
 800654c:	b1d7      	cbz	r7, 8006584 <__multadd+0x70>
 800654e:	68a3      	ldr	r3, [r4, #8]
 8006550:	42ab      	cmp	r3, r5
 8006552:	dc12      	bgt.n	800657a <__multadd+0x66>
 8006554:	6861      	ldr	r1, [r4, #4]
 8006556:	4630      	mov	r0, r6
 8006558:	3101      	adds	r1, #1
 800655a:	f7ff ff90 	bl	800647e <_Balloc>
 800655e:	4680      	mov	r8, r0
 8006560:	6922      	ldr	r2, [r4, #16]
 8006562:	f104 010c 	add.w	r1, r4, #12
 8006566:	3202      	adds	r2, #2
 8006568:	0092      	lsls	r2, r2, #2
 800656a:	300c      	adds	r0, #12
 800656c:	f7ff ff7c 	bl	8006468 <memcpy>
 8006570:	4621      	mov	r1, r4
 8006572:	4630      	mov	r0, r6
 8006574:	f7ff ffb7 	bl	80064e6 <_Bfree>
 8006578:	4644      	mov	r4, r8
 800657a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800657e:	3501      	adds	r5, #1
 8006580:	615f      	str	r7, [r3, #20]
 8006582:	6125      	str	r5, [r4, #16]
 8006584:	4620      	mov	r0, r4
 8006586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800658a <__s2b>:
 800658a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800658e:	4615      	mov	r5, r2
 8006590:	2209      	movs	r2, #9
 8006592:	461f      	mov	r7, r3
 8006594:	3308      	adds	r3, #8
 8006596:	460c      	mov	r4, r1
 8006598:	fb93 f3f2 	sdiv	r3, r3, r2
 800659c:	4606      	mov	r6, r0
 800659e:	2201      	movs	r2, #1
 80065a0:	2100      	movs	r1, #0
 80065a2:	429a      	cmp	r2, r3
 80065a4:	db20      	blt.n	80065e8 <__s2b+0x5e>
 80065a6:	4630      	mov	r0, r6
 80065a8:	f7ff ff69 	bl	800647e <_Balloc>
 80065ac:	9b08      	ldr	r3, [sp, #32]
 80065ae:	2d09      	cmp	r5, #9
 80065b0:	6143      	str	r3, [r0, #20]
 80065b2:	f04f 0301 	mov.w	r3, #1
 80065b6:	6103      	str	r3, [r0, #16]
 80065b8:	dd19      	ble.n	80065ee <__s2b+0x64>
 80065ba:	f104 0809 	add.w	r8, r4, #9
 80065be:	46c1      	mov	r9, r8
 80065c0:	442c      	add	r4, r5
 80065c2:	f819 3b01 	ldrb.w	r3, [r9], #1
 80065c6:	4601      	mov	r1, r0
 80065c8:	3b30      	subs	r3, #48	; 0x30
 80065ca:	220a      	movs	r2, #10
 80065cc:	4630      	mov	r0, r6
 80065ce:	f7ff ffa1 	bl	8006514 <__multadd>
 80065d2:	45a1      	cmp	r9, r4
 80065d4:	d1f5      	bne.n	80065c2 <__s2b+0x38>
 80065d6:	eb08 0405 	add.w	r4, r8, r5
 80065da:	3c08      	subs	r4, #8
 80065dc:	1b2d      	subs	r5, r5, r4
 80065de:	1963      	adds	r3, r4, r5
 80065e0:	42bb      	cmp	r3, r7
 80065e2:	db07      	blt.n	80065f4 <__s2b+0x6a>
 80065e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065e8:	0052      	lsls	r2, r2, #1
 80065ea:	3101      	adds	r1, #1
 80065ec:	e7d9      	b.n	80065a2 <__s2b+0x18>
 80065ee:	340a      	adds	r4, #10
 80065f0:	2509      	movs	r5, #9
 80065f2:	e7f3      	b.n	80065dc <__s2b+0x52>
 80065f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80065f8:	4601      	mov	r1, r0
 80065fa:	3b30      	subs	r3, #48	; 0x30
 80065fc:	220a      	movs	r2, #10
 80065fe:	4630      	mov	r0, r6
 8006600:	f7ff ff88 	bl	8006514 <__multadd>
 8006604:	e7eb      	b.n	80065de <__s2b+0x54>

08006606 <__hi0bits>:
 8006606:	0c02      	lsrs	r2, r0, #16
 8006608:	0412      	lsls	r2, r2, #16
 800660a:	4603      	mov	r3, r0
 800660c:	b9b2      	cbnz	r2, 800663c <__hi0bits+0x36>
 800660e:	0403      	lsls	r3, r0, #16
 8006610:	2010      	movs	r0, #16
 8006612:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006616:	bf04      	itt	eq
 8006618:	021b      	lsleq	r3, r3, #8
 800661a:	3008      	addeq	r0, #8
 800661c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006620:	bf04      	itt	eq
 8006622:	011b      	lsleq	r3, r3, #4
 8006624:	3004      	addeq	r0, #4
 8006626:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800662a:	bf04      	itt	eq
 800662c:	009b      	lsleq	r3, r3, #2
 800662e:	3002      	addeq	r0, #2
 8006630:	2b00      	cmp	r3, #0
 8006632:	db06      	blt.n	8006642 <__hi0bits+0x3c>
 8006634:	005b      	lsls	r3, r3, #1
 8006636:	d503      	bpl.n	8006640 <__hi0bits+0x3a>
 8006638:	3001      	adds	r0, #1
 800663a:	4770      	bx	lr
 800663c:	2000      	movs	r0, #0
 800663e:	e7e8      	b.n	8006612 <__hi0bits+0xc>
 8006640:	2020      	movs	r0, #32
 8006642:	4770      	bx	lr

08006644 <__lo0bits>:
 8006644:	6803      	ldr	r3, [r0, #0]
 8006646:	4601      	mov	r1, r0
 8006648:	f013 0207 	ands.w	r2, r3, #7
 800664c:	d00b      	beq.n	8006666 <__lo0bits+0x22>
 800664e:	07da      	lsls	r2, r3, #31
 8006650:	d423      	bmi.n	800669a <__lo0bits+0x56>
 8006652:	0798      	lsls	r0, r3, #30
 8006654:	bf49      	itett	mi
 8006656:	085b      	lsrmi	r3, r3, #1
 8006658:	089b      	lsrpl	r3, r3, #2
 800665a:	2001      	movmi	r0, #1
 800665c:	600b      	strmi	r3, [r1, #0]
 800665e:	bf5c      	itt	pl
 8006660:	600b      	strpl	r3, [r1, #0]
 8006662:	2002      	movpl	r0, #2
 8006664:	4770      	bx	lr
 8006666:	b298      	uxth	r0, r3
 8006668:	b9a8      	cbnz	r0, 8006696 <__lo0bits+0x52>
 800666a:	2010      	movs	r0, #16
 800666c:	0c1b      	lsrs	r3, r3, #16
 800666e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006672:	bf04      	itt	eq
 8006674:	0a1b      	lsreq	r3, r3, #8
 8006676:	3008      	addeq	r0, #8
 8006678:	071a      	lsls	r2, r3, #28
 800667a:	bf04      	itt	eq
 800667c:	091b      	lsreq	r3, r3, #4
 800667e:	3004      	addeq	r0, #4
 8006680:	079a      	lsls	r2, r3, #30
 8006682:	bf04      	itt	eq
 8006684:	089b      	lsreq	r3, r3, #2
 8006686:	3002      	addeq	r0, #2
 8006688:	07da      	lsls	r2, r3, #31
 800668a:	d402      	bmi.n	8006692 <__lo0bits+0x4e>
 800668c:	085b      	lsrs	r3, r3, #1
 800668e:	d006      	beq.n	800669e <__lo0bits+0x5a>
 8006690:	3001      	adds	r0, #1
 8006692:	600b      	str	r3, [r1, #0]
 8006694:	4770      	bx	lr
 8006696:	4610      	mov	r0, r2
 8006698:	e7e9      	b.n	800666e <__lo0bits+0x2a>
 800669a:	2000      	movs	r0, #0
 800669c:	4770      	bx	lr
 800669e:	2020      	movs	r0, #32
 80066a0:	4770      	bx	lr

080066a2 <__i2b>:
 80066a2:	b510      	push	{r4, lr}
 80066a4:	460c      	mov	r4, r1
 80066a6:	2101      	movs	r1, #1
 80066a8:	f7ff fee9 	bl	800647e <_Balloc>
 80066ac:	2201      	movs	r2, #1
 80066ae:	6144      	str	r4, [r0, #20]
 80066b0:	6102      	str	r2, [r0, #16]
 80066b2:	bd10      	pop	{r4, pc}

080066b4 <__multiply>:
 80066b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b8:	4614      	mov	r4, r2
 80066ba:	690a      	ldr	r2, [r1, #16]
 80066bc:	6923      	ldr	r3, [r4, #16]
 80066be:	4688      	mov	r8, r1
 80066c0:	429a      	cmp	r2, r3
 80066c2:	bfbe      	ittt	lt
 80066c4:	460b      	movlt	r3, r1
 80066c6:	46a0      	movlt	r8, r4
 80066c8:	461c      	movlt	r4, r3
 80066ca:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80066ce:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80066d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80066d6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80066da:	eb07 0609 	add.w	r6, r7, r9
 80066de:	42b3      	cmp	r3, r6
 80066e0:	bfb8      	it	lt
 80066e2:	3101      	addlt	r1, #1
 80066e4:	f7ff fecb 	bl	800647e <_Balloc>
 80066e8:	f100 0514 	add.w	r5, r0, #20
 80066ec:	462b      	mov	r3, r5
 80066ee:	2200      	movs	r2, #0
 80066f0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80066f4:	4573      	cmp	r3, lr
 80066f6:	d316      	bcc.n	8006726 <__multiply+0x72>
 80066f8:	f104 0214 	add.w	r2, r4, #20
 80066fc:	f108 0114 	add.w	r1, r8, #20
 8006700:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006704:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006708:	9300      	str	r3, [sp, #0]
 800670a:	9b00      	ldr	r3, [sp, #0]
 800670c:	9201      	str	r2, [sp, #4]
 800670e:	4293      	cmp	r3, r2
 8006710:	d80c      	bhi.n	800672c <__multiply+0x78>
 8006712:	2e00      	cmp	r6, #0
 8006714:	dd03      	ble.n	800671e <__multiply+0x6a>
 8006716:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800671a:	2b00      	cmp	r3, #0
 800671c:	d05d      	beq.n	80067da <__multiply+0x126>
 800671e:	6106      	str	r6, [r0, #16]
 8006720:	b003      	add	sp, #12
 8006722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006726:	f843 2b04 	str.w	r2, [r3], #4
 800672a:	e7e3      	b.n	80066f4 <__multiply+0x40>
 800672c:	f8b2 b000 	ldrh.w	fp, [r2]
 8006730:	f1bb 0f00 	cmp.w	fp, #0
 8006734:	d023      	beq.n	800677e <__multiply+0xca>
 8006736:	4689      	mov	r9, r1
 8006738:	46ac      	mov	ip, r5
 800673a:	f04f 0800 	mov.w	r8, #0
 800673e:	f859 4b04 	ldr.w	r4, [r9], #4
 8006742:	f8dc a000 	ldr.w	sl, [ip]
 8006746:	b2a3      	uxth	r3, r4
 8006748:	fa1f fa8a 	uxth.w	sl, sl
 800674c:	fb0b a303 	mla	r3, fp, r3, sl
 8006750:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006754:	f8dc 4000 	ldr.w	r4, [ip]
 8006758:	4443      	add	r3, r8
 800675a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800675e:	fb0b 840a 	mla	r4, fp, sl, r8
 8006762:	46e2      	mov	sl, ip
 8006764:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006768:	b29b      	uxth	r3, r3
 800676a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800676e:	454f      	cmp	r7, r9
 8006770:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006774:	f84a 3b04 	str.w	r3, [sl], #4
 8006778:	d82b      	bhi.n	80067d2 <__multiply+0x11e>
 800677a:	f8cc 8004 	str.w	r8, [ip, #4]
 800677e:	9b01      	ldr	r3, [sp, #4]
 8006780:	3204      	adds	r2, #4
 8006782:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006786:	f1ba 0f00 	cmp.w	sl, #0
 800678a:	d020      	beq.n	80067ce <__multiply+0x11a>
 800678c:	4689      	mov	r9, r1
 800678e:	46a8      	mov	r8, r5
 8006790:	f04f 0b00 	mov.w	fp, #0
 8006794:	682b      	ldr	r3, [r5, #0]
 8006796:	f8b9 c000 	ldrh.w	ip, [r9]
 800679a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800679e:	b29b      	uxth	r3, r3
 80067a0:	fb0a 440c 	mla	r4, sl, ip, r4
 80067a4:	46c4      	mov	ip, r8
 80067a6:	445c      	add	r4, fp
 80067a8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80067ac:	f84c 3b04 	str.w	r3, [ip], #4
 80067b0:	f859 3b04 	ldr.w	r3, [r9], #4
 80067b4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80067b8:	0c1b      	lsrs	r3, r3, #16
 80067ba:	fb0a b303 	mla	r3, sl, r3, fp
 80067be:	454f      	cmp	r7, r9
 80067c0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80067c4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80067c8:	d805      	bhi.n	80067d6 <__multiply+0x122>
 80067ca:	f8c8 3004 	str.w	r3, [r8, #4]
 80067ce:	3504      	adds	r5, #4
 80067d0:	e79b      	b.n	800670a <__multiply+0x56>
 80067d2:	46d4      	mov	ip, sl
 80067d4:	e7b3      	b.n	800673e <__multiply+0x8a>
 80067d6:	46e0      	mov	r8, ip
 80067d8:	e7dd      	b.n	8006796 <__multiply+0xe2>
 80067da:	3e01      	subs	r6, #1
 80067dc:	e799      	b.n	8006712 <__multiply+0x5e>
	...

080067e0 <__pow5mult>:
 80067e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067e4:	4615      	mov	r5, r2
 80067e6:	f012 0203 	ands.w	r2, r2, #3
 80067ea:	4606      	mov	r6, r0
 80067ec:	460f      	mov	r7, r1
 80067ee:	d007      	beq.n	8006800 <__pow5mult+0x20>
 80067f0:	4c21      	ldr	r4, [pc, #132]	; (8006878 <__pow5mult+0x98>)
 80067f2:	3a01      	subs	r2, #1
 80067f4:	2300      	movs	r3, #0
 80067f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80067fa:	f7ff fe8b 	bl	8006514 <__multadd>
 80067fe:	4607      	mov	r7, r0
 8006800:	10ad      	asrs	r5, r5, #2
 8006802:	d035      	beq.n	8006870 <__pow5mult+0x90>
 8006804:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006806:	b93c      	cbnz	r4, 8006818 <__pow5mult+0x38>
 8006808:	2010      	movs	r0, #16
 800680a:	f7ff fe05 	bl	8006418 <malloc>
 800680e:	6270      	str	r0, [r6, #36]	; 0x24
 8006810:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006814:	6004      	str	r4, [r0, #0]
 8006816:	60c4      	str	r4, [r0, #12]
 8006818:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800681c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006820:	b94c      	cbnz	r4, 8006836 <__pow5mult+0x56>
 8006822:	f240 2171 	movw	r1, #625	; 0x271
 8006826:	4630      	mov	r0, r6
 8006828:	f7ff ff3b 	bl	80066a2 <__i2b>
 800682c:	2300      	movs	r3, #0
 800682e:	4604      	mov	r4, r0
 8006830:	f8c8 0008 	str.w	r0, [r8, #8]
 8006834:	6003      	str	r3, [r0, #0]
 8006836:	f04f 0800 	mov.w	r8, #0
 800683a:	07eb      	lsls	r3, r5, #31
 800683c:	d50a      	bpl.n	8006854 <__pow5mult+0x74>
 800683e:	4639      	mov	r1, r7
 8006840:	4622      	mov	r2, r4
 8006842:	4630      	mov	r0, r6
 8006844:	f7ff ff36 	bl	80066b4 <__multiply>
 8006848:	4681      	mov	r9, r0
 800684a:	4639      	mov	r1, r7
 800684c:	4630      	mov	r0, r6
 800684e:	f7ff fe4a 	bl	80064e6 <_Bfree>
 8006852:	464f      	mov	r7, r9
 8006854:	106d      	asrs	r5, r5, #1
 8006856:	d00b      	beq.n	8006870 <__pow5mult+0x90>
 8006858:	6820      	ldr	r0, [r4, #0]
 800685a:	b938      	cbnz	r0, 800686c <__pow5mult+0x8c>
 800685c:	4622      	mov	r2, r4
 800685e:	4621      	mov	r1, r4
 8006860:	4630      	mov	r0, r6
 8006862:	f7ff ff27 	bl	80066b4 <__multiply>
 8006866:	6020      	str	r0, [r4, #0]
 8006868:	f8c0 8000 	str.w	r8, [r0]
 800686c:	4604      	mov	r4, r0
 800686e:	e7e4      	b.n	800683a <__pow5mult+0x5a>
 8006870:	4638      	mov	r0, r7
 8006872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006876:	bf00      	nop
 8006878:	08007380 	.word	0x08007380

0800687c <__lshift>:
 800687c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006880:	460c      	mov	r4, r1
 8006882:	4607      	mov	r7, r0
 8006884:	4616      	mov	r6, r2
 8006886:	6923      	ldr	r3, [r4, #16]
 8006888:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800688c:	eb0a 0903 	add.w	r9, sl, r3
 8006890:	6849      	ldr	r1, [r1, #4]
 8006892:	68a3      	ldr	r3, [r4, #8]
 8006894:	f109 0501 	add.w	r5, r9, #1
 8006898:	42ab      	cmp	r3, r5
 800689a:	db32      	blt.n	8006902 <__lshift+0x86>
 800689c:	4638      	mov	r0, r7
 800689e:	f7ff fdee 	bl	800647e <_Balloc>
 80068a2:	2300      	movs	r3, #0
 80068a4:	4680      	mov	r8, r0
 80068a6:	461a      	mov	r2, r3
 80068a8:	f100 0114 	add.w	r1, r0, #20
 80068ac:	4553      	cmp	r3, sl
 80068ae:	db2b      	blt.n	8006908 <__lshift+0x8c>
 80068b0:	6920      	ldr	r0, [r4, #16]
 80068b2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80068b6:	f104 0314 	add.w	r3, r4, #20
 80068ba:	f016 021f 	ands.w	r2, r6, #31
 80068be:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80068c2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80068c6:	d025      	beq.n	8006914 <__lshift+0x98>
 80068c8:	2000      	movs	r0, #0
 80068ca:	f1c2 0e20 	rsb	lr, r2, #32
 80068ce:	468a      	mov	sl, r1
 80068d0:	681e      	ldr	r6, [r3, #0]
 80068d2:	4096      	lsls	r6, r2
 80068d4:	4330      	orrs	r0, r6
 80068d6:	f84a 0b04 	str.w	r0, [sl], #4
 80068da:	f853 0b04 	ldr.w	r0, [r3], #4
 80068de:	459c      	cmp	ip, r3
 80068e0:	fa20 f00e 	lsr.w	r0, r0, lr
 80068e4:	d814      	bhi.n	8006910 <__lshift+0x94>
 80068e6:	6048      	str	r0, [r1, #4]
 80068e8:	b108      	cbz	r0, 80068ee <__lshift+0x72>
 80068ea:	f109 0502 	add.w	r5, r9, #2
 80068ee:	3d01      	subs	r5, #1
 80068f0:	4638      	mov	r0, r7
 80068f2:	f8c8 5010 	str.w	r5, [r8, #16]
 80068f6:	4621      	mov	r1, r4
 80068f8:	f7ff fdf5 	bl	80064e6 <_Bfree>
 80068fc:	4640      	mov	r0, r8
 80068fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006902:	3101      	adds	r1, #1
 8006904:	005b      	lsls	r3, r3, #1
 8006906:	e7c7      	b.n	8006898 <__lshift+0x1c>
 8006908:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800690c:	3301      	adds	r3, #1
 800690e:	e7cd      	b.n	80068ac <__lshift+0x30>
 8006910:	4651      	mov	r1, sl
 8006912:	e7dc      	b.n	80068ce <__lshift+0x52>
 8006914:	3904      	subs	r1, #4
 8006916:	f853 2b04 	ldr.w	r2, [r3], #4
 800691a:	459c      	cmp	ip, r3
 800691c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006920:	d8f9      	bhi.n	8006916 <__lshift+0x9a>
 8006922:	e7e4      	b.n	80068ee <__lshift+0x72>

08006924 <__mcmp>:
 8006924:	6903      	ldr	r3, [r0, #16]
 8006926:	690a      	ldr	r2, [r1, #16]
 8006928:	b530      	push	{r4, r5, lr}
 800692a:	1a9b      	subs	r3, r3, r2
 800692c:	d10c      	bne.n	8006948 <__mcmp+0x24>
 800692e:	0092      	lsls	r2, r2, #2
 8006930:	3014      	adds	r0, #20
 8006932:	3114      	adds	r1, #20
 8006934:	1884      	adds	r4, r0, r2
 8006936:	4411      	add	r1, r2
 8006938:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800693c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006940:	4295      	cmp	r5, r2
 8006942:	d003      	beq.n	800694c <__mcmp+0x28>
 8006944:	d305      	bcc.n	8006952 <__mcmp+0x2e>
 8006946:	2301      	movs	r3, #1
 8006948:	4618      	mov	r0, r3
 800694a:	bd30      	pop	{r4, r5, pc}
 800694c:	42a0      	cmp	r0, r4
 800694e:	d3f3      	bcc.n	8006938 <__mcmp+0x14>
 8006950:	e7fa      	b.n	8006948 <__mcmp+0x24>
 8006952:	f04f 33ff 	mov.w	r3, #4294967295
 8006956:	e7f7      	b.n	8006948 <__mcmp+0x24>

08006958 <__mdiff>:
 8006958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800695c:	460d      	mov	r5, r1
 800695e:	4607      	mov	r7, r0
 8006960:	4611      	mov	r1, r2
 8006962:	4628      	mov	r0, r5
 8006964:	4614      	mov	r4, r2
 8006966:	f7ff ffdd 	bl	8006924 <__mcmp>
 800696a:	1e06      	subs	r6, r0, #0
 800696c:	d108      	bne.n	8006980 <__mdiff+0x28>
 800696e:	4631      	mov	r1, r6
 8006970:	4638      	mov	r0, r7
 8006972:	f7ff fd84 	bl	800647e <_Balloc>
 8006976:	2301      	movs	r3, #1
 8006978:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800697c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006980:	bfa4      	itt	ge
 8006982:	4623      	movge	r3, r4
 8006984:	462c      	movge	r4, r5
 8006986:	4638      	mov	r0, r7
 8006988:	6861      	ldr	r1, [r4, #4]
 800698a:	bfa6      	itte	ge
 800698c:	461d      	movge	r5, r3
 800698e:	2600      	movge	r6, #0
 8006990:	2601      	movlt	r6, #1
 8006992:	f7ff fd74 	bl	800647e <_Balloc>
 8006996:	f04f 0e00 	mov.w	lr, #0
 800699a:	60c6      	str	r6, [r0, #12]
 800699c:	692b      	ldr	r3, [r5, #16]
 800699e:	6926      	ldr	r6, [r4, #16]
 80069a0:	f104 0214 	add.w	r2, r4, #20
 80069a4:	f105 0914 	add.w	r9, r5, #20
 80069a8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80069ac:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80069b0:	f100 0114 	add.w	r1, r0, #20
 80069b4:	f852 ab04 	ldr.w	sl, [r2], #4
 80069b8:	f859 5b04 	ldr.w	r5, [r9], #4
 80069bc:	fa1f f38a 	uxth.w	r3, sl
 80069c0:	4473      	add	r3, lr
 80069c2:	b2ac      	uxth	r4, r5
 80069c4:	1b1b      	subs	r3, r3, r4
 80069c6:	0c2c      	lsrs	r4, r5, #16
 80069c8:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80069cc:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80069d6:	45c8      	cmp	r8, r9
 80069d8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80069dc:	4694      	mov	ip, r2
 80069de:	f841 4b04 	str.w	r4, [r1], #4
 80069e2:	d8e7      	bhi.n	80069b4 <__mdiff+0x5c>
 80069e4:	45bc      	cmp	ip, r7
 80069e6:	d304      	bcc.n	80069f2 <__mdiff+0x9a>
 80069e8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80069ec:	b183      	cbz	r3, 8006a10 <__mdiff+0xb8>
 80069ee:	6106      	str	r6, [r0, #16]
 80069f0:	e7c4      	b.n	800697c <__mdiff+0x24>
 80069f2:	f85c 4b04 	ldr.w	r4, [ip], #4
 80069f6:	b2a2      	uxth	r2, r4
 80069f8:	4472      	add	r2, lr
 80069fa:	1413      	asrs	r3, r2, #16
 80069fc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006a00:	b292      	uxth	r2, r2
 8006a02:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006a06:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006a0a:	f841 2b04 	str.w	r2, [r1], #4
 8006a0e:	e7e9      	b.n	80069e4 <__mdiff+0x8c>
 8006a10:	3e01      	subs	r6, #1
 8006a12:	e7e9      	b.n	80069e8 <__mdiff+0x90>

08006a14 <__ulp>:
 8006a14:	4b10      	ldr	r3, [pc, #64]	; (8006a58 <__ulp+0x44>)
 8006a16:	400b      	ands	r3, r1
 8006a18:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	dd02      	ble.n	8006a26 <__ulp+0x12>
 8006a20:	2000      	movs	r0, #0
 8006a22:	4619      	mov	r1, r3
 8006a24:	4770      	bx	lr
 8006a26:	425b      	negs	r3, r3
 8006a28:	151b      	asrs	r3, r3, #20
 8006a2a:	2b13      	cmp	r3, #19
 8006a2c:	f04f 0000 	mov.w	r0, #0
 8006a30:	f04f 0100 	mov.w	r1, #0
 8006a34:	dc04      	bgt.n	8006a40 <__ulp+0x2c>
 8006a36:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006a3a:	fa42 f103 	asr.w	r1, r2, r3
 8006a3e:	4770      	bx	lr
 8006a40:	2201      	movs	r2, #1
 8006a42:	3b14      	subs	r3, #20
 8006a44:	2b1e      	cmp	r3, #30
 8006a46:	bfce      	itee	gt
 8006a48:	4613      	movgt	r3, r2
 8006a4a:	f1c3 031f 	rsble	r3, r3, #31
 8006a4e:	fa02 f303 	lslle.w	r3, r2, r3
 8006a52:	4618      	mov	r0, r3
 8006a54:	4770      	bx	lr
 8006a56:	bf00      	nop
 8006a58:	7ff00000 	.word	0x7ff00000

08006a5c <__b2d>:
 8006a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a60:	6907      	ldr	r7, [r0, #16]
 8006a62:	f100 0914 	add.w	r9, r0, #20
 8006a66:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8006a6a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8006a6e:	f1a7 0804 	sub.w	r8, r7, #4
 8006a72:	4630      	mov	r0, r6
 8006a74:	f7ff fdc7 	bl	8006606 <__hi0bits>
 8006a78:	f1c0 0320 	rsb	r3, r0, #32
 8006a7c:	280a      	cmp	r0, #10
 8006a7e:	600b      	str	r3, [r1, #0]
 8006a80:	491e      	ldr	r1, [pc, #120]	; (8006afc <__b2d+0xa0>)
 8006a82:	dc17      	bgt.n	8006ab4 <__b2d+0x58>
 8006a84:	45c1      	cmp	r9, r8
 8006a86:	bf28      	it	cs
 8006a88:	2200      	movcs	r2, #0
 8006a8a:	f1c0 0c0b 	rsb	ip, r0, #11
 8006a8e:	fa26 f30c 	lsr.w	r3, r6, ip
 8006a92:	bf38      	it	cc
 8006a94:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006a98:	ea43 0501 	orr.w	r5, r3, r1
 8006a9c:	f100 0315 	add.w	r3, r0, #21
 8006aa0:	fa06 f303 	lsl.w	r3, r6, r3
 8006aa4:	fa22 f20c 	lsr.w	r2, r2, ip
 8006aa8:	ea43 0402 	orr.w	r4, r3, r2
 8006aac:	4620      	mov	r0, r4
 8006aae:	4629      	mov	r1, r5
 8006ab0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ab4:	45c1      	cmp	r9, r8
 8006ab6:	bf3a      	itte	cc
 8006ab8:	f1a7 0808 	subcc.w	r8, r7, #8
 8006abc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006ac0:	2200      	movcs	r2, #0
 8006ac2:	f1b0 030b 	subs.w	r3, r0, #11
 8006ac6:	d015      	beq.n	8006af4 <__b2d+0x98>
 8006ac8:	409e      	lsls	r6, r3
 8006aca:	f1c3 0720 	rsb	r7, r3, #32
 8006ace:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 8006ad2:	fa22 f107 	lsr.w	r1, r2, r7
 8006ad6:	45c8      	cmp	r8, r9
 8006ad8:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8006adc:	ea46 0501 	orr.w	r5, r6, r1
 8006ae0:	bf94      	ite	ls
 8006ae2:	2100      	movls	r1, #0
 8006ae4:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8006ae8:	fa02 f003 	lsl.w	r0, r2, r3
 8006aec:	40f9      	lsrs	r1, r7
 8006aee:	ea40 0401 	orr.w	r4, r0, r1
 8006af2:	e7db      	b.n	8006aac <__b2d+0x50>
 8006af4:	ea46 0501 	orr.w	r5, r6, r1
 8006af8:	4614      	mov	r4, r2
 8006afa:	e7d7      	b.n	8006aac <__b2d+0x50>
 8006afc:	3ff00000 	.word	0x3ff00000

08006b00 <__d2b>:
 8006b00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006b04:	461c      	mov	r4, r3
 8006b06:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8006b0a:	2101      	movs	r1, #1
 8006b0c:	4690      	mov	r8, r2
 8006b0e:	f7ff fcb6 	bl	800647e <_Balloc>
 8006b12:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8006b16:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8006b1a:	4607      	mov	r7, r0
 8006b1c:	bb34      	cbnz	r4, 8006b6c <__d2b+0x6c>
 8006b1e:	9201      	str	r2, [sp, #4]
 8006b20:	f1b8 0200 	subs.w	r2, r8, #0
 8006b24:	d027      	beq.n	8006b76 <__d2b+0x76>
 8006b26:	a802      	add	r0, sp, #8
 8006b28:	f840 2d08 	str.w	r2, [r0, #-8]!
 8006b2c:	f7ff fd8a 	bl	8006644 <__lo0bits>
 8006b30:	9900      	ldr	r1, [sp, #0]
 8006b32:	b1f0      	cbz	r0, 8006b72 <__d2b+0x72>
 8006b34:	9a01      	ldr	r2, [sp, #4]
 8006b36:	f1c0 0320 	rsb	r3, r0, #32
 8006b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b3e:	430b      	orrs	r3, r1
 8006b40:	40c2      	lsrs	r2, r0
 8006b42:	617b      	str	r3, [r7, #20]
 8006b44:	9201      	str	r2, [sp, #4]
 8006b46:	9b01      	ldr	r3, [sp, #4]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	bf14      	ite	ne
 8006b4c:	2102      	movne	r1, #2
 8006b4e:	2101      	moveq	r1, #1
 8006b50:	61bb      	str	r3, [r7, #24]
 8006b52:	6139      	str	r1, [r7, #16]
 8006b54:	b1c4      	cbz	r4, 8006b88 <__d2b+0x88>
 8006b56:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006b5a:	4404      	add	r4, r0
 8006b5c:	6034      	str	r4, [r6, #0]
 8006b5e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006b62:	6028      	str	r0, [r5, #0]
 8006b64:	4638      	mov	r0, r7
 8006b66:	b002      	add	sp, #8
 8006b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b6c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006b70:	e7d5      	b.n	8006b1e <__d2b+0x1e>
 8006b72:	6179      	str	r1, [r7, #20]
 8006b74:	e7e7      	b.n	8006b46 <__d2b+0x46>
 8006b76:	a801      	add	r0, sp, #4
 8006b78:	f7ff fd64 	bl	8006644 <__lo0bits>
 8006b7c:	2101      	movs	r1, #1
 8006b7e:	9b01      	ldr	r3, [sp, #4]
 8006b80:	6139      	str	r1, [r7, #16]
 8006b82:	617b      	str	r3, [r7, #20]
 8006b84:	3020      	adds	r0, #32
 8006b86:	e7e5      	b.n	8006b54 <__d2b+0x54>
 8006b88:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006b8c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006b90:	6030      	str	r0, [r6, #0]
 8006b92:	6918      	ldr	r0, [r3, #16]
 8006b94:	f7ff fd37 	bl	8006606 <__hi0bits>
 8006b98:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006b9c:	e7e1      	b.n	8006b62 <__d2b+0x62>

08006b9e <__ratio>:
 8006b9e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ba2:	4688      	mov	r8, r1
 8006ba4:	4669      	mov	r1, sp
 8006ba6:	4681      	mov	r9, r0
 8006ba8:	f7ff ff58 	bl	8006a5c <__b2d>
 8006bac:	468b      	mov	fp, r1
 8006bae:	4606      	mov	r6, r0
 8006bb0:	460f      	mov	r7, r1
 8006bb2:	4640      	mov	r0, r8
 8006bb4:	a901      	add	r1, sp, #4
 8006bb6:	f7ff ff51 	bl	8006a5c <__b2d>
 8006bba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006bbe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006bc2:	460d      	mov	r5, r1
 8006bc4:	eba3 0c02 	sub.w	ip, r3, r2
 8006bc8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006bcc:	1a9b      	subs	r3, r3, r2
 8006bce:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	bfd5      	itete	le
 8006bd6:	460a      	movle	r2, r1
 8006bd8:	463a      	movgt	r2, r7
 8006bda:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006bde:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8006be2:	bfd8      	it	le
 8006be4:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8006be8:	462b      	mov	r3, r5
 8006bea:	4602      	mov	r2, r0
 8006bec:	4659      	mov	r1, fp
 8006bee:	4630      	mov	r0, r6
 8006bf0:	f7f9 fd9c 	bl	800072c <__aeabi_ddiv>
 8006bf4:	b003      	add	sp, #12
 8006bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006bfa <__copybits>:
 8006bfa:	3901      	subs	r1, #1
 8006bfc:	b510      	push	{r4, lr}
 8006bfe:	1149      	asrs	r1, r1, #5
 8006c00:	6914      	ldr	r4, [r2, #16]
 8006c02:	3101      	adds	r1, #1
 8006c04:	f102 0314 	add.w	r3, r2, #20
 8006c08:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006c0c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006c10:	42a3      	cmp	r3, r4
 8006c12:	4602      	mov	r2, r0
 8006c14:	d303      	bcc.n	8006c1e <__copybits+0x24>
 8006c16:	2300      	movs	r3, #0
 8006c18:	428a      	cmp	r2, r1
 8006c1a:	d305      	bcc.n	8006c28 <__copybits+0x2e>
 8006c1c:	bd10      	pop	{r4, pc}
 8006c1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c22:	f840 2b04 	str.w	r2, [r0], #4
 8006c26:	e7f3      	b.n	8006c10 <__copybits+0x16>
 8006c28:	f842 3b04 	str.w	r3, [r2], #4
 8006c2c:	e7f4      	b.n	8006c18 <__copybits+0x1e>

08006c2e <__any_on>:
 8006c2e:	f100 0214 	add.w	r2, r0, #20
 8006c32:	6900      	ldr	r0, [r0, #16]
 8006c34:	114b      	asrs	r3, r1, #5
 8006c36:	4298      	cmp	r0, r3
 8006c38:	b510      	push	{r4, lr}
 8006c3a:	db11      	blt.n	8006c60 <__any_on+0x32>
 8006c3c:	dd0a      	ble.n	8006c54 <__any_on+0x26>
 8006c3e:	f011 011f 	ands.w	r1, r1, #31
 8006c42:	d007      	beq.n	8006c54 <__any_on+0x26>
 8006c44:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006c48:	fa24 f001 	lsr.w	r0, r4, r1
 8006c4c:	fa00 f101 	lsl.w	r1, r0, r1
 8006c50:	428c      	cmp	r4, r1
 8006c52:	d10b      	bne.n	8006c6c <__any_on+0x3e>
 8006c54:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d803      	bhi.n	8006c64 <__any_on+0x36>
 8006c5c:	2000      	movs	r0, #0
 8006c5e:	bd10      	pop	{r4, pc}
 8006c60:	4603      	mov	r3, r0
 8006c62:	e7f7      	b.n	8006c54 <__any_on+0x26>
 8006c64:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006c68:	2900      	cmp	r1, #0
 8006c6a:	d0f5      	beq.n	8006c58 <__any_on+0x2a>
 8006c6c:	2001      	movs	r0, #1
 8006c6e:	e7f6      	b.n	8006c5e <__any_on+0x30>

08006c70 <_calloc_r>:
 8006c70:	b538      	push	{r3, r4, r5, lr}
 8006c72:	fb02 f401 	mul.w	r4, r2, r1
 8006c76:	4621      	mov	r1, r4
 8006c78:	f000 f854 	bl	8006d24 <_malloc_r>
 8006c7c:	4605      	mov	r5, r0
 8006c7e:	b118      	cbz	r0, 8006c88 <_calloc_r+0x18>
 8006c80:	4622      	mov	r2, r4
 8006c82:	2100      	movs	r1, #0
 8006c84:	f7fc fd2e 	bl	80036e4 <memset>
 8006c88:	4628      	mov	r0, r5
 8006c8a:	bd38      	pop	{r3, r4, r5, pc}

08006c8c <_free_r>:
 8006c8c:	b538      	push	{r3, r4, r5, lr}
 8006c8e:	4605      	mov	r5, r0
 8006c90:	2900      	cmp	r1, #0
 8006c92:	d043      	beq.n	8006d1c <_free_r+0x90>
 8006c94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c98:	1f0c      	subs	r4, r1, #4
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	bfb8      	it	lt
 8006c9e:	18e4      	addlt	r4, r4, r3
 8006ca0:	f000 fa34 	bl	800710c <__malloc_lock>
 8006ca4:	4a1e      	ldr	r2, [pc, #120]	; (8006d20 <_free_r+0x94>)
 8006ca6:	6813      	ldr	r3, [r2, #0]
 8006ca8:	4610      	mov	r0, r2
 8006caa:	b933      	cbnz	r3, 8006cba <_free_r+0x2e>
 8006cac:	6063      	str	r3, [r4, #4]
 8006cae:	6014      	str	r4, [r2, #0]
 8006cb0:	4628      	mov	r0, r5
 8006cb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cb6:	f000 ba2a 	b.w	800710e <__malloc_unlock>
 8006cba:	42a3      	cmp	r3, r4
 8006cbc:	d90b      	bls.n	8006cd6 <_free_r+0x4a>
 8006cbe:	6821      	ldr	r1, [r4, #0]
 8006cc0:	1862      	adds	r2, r4, r1
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	bf01      	itttt	eq
 8006cc6:	681a      	ldreq	r2, [r3, #0]
 8006cc8:	685b      	ldreq	r3, [r3, #4]
 8006cca:	1852      	addeq	r2, r2, r1
 8006ccc:	6022      	streq	r2, [r4, #0]
 8006cce:	6063      	str	r3, [r4, #4]
 8006cd0:	6004      	str	r4, [r0, #0]
 8006cd2:	e7ed      	b.n	8006cb0 <_free_r+0x24>
 8006cd4:	4613      	mov	r3, r2
 8006cd6:	685a      	ldr	r2, [r3, #4]
 8006cd8:	b10a      	cbz	r2, 8006cde <_free_r+0x52>
 8006cda:	42a2      	cmp	r2, r4
 8006cdc:	d9fa      	bls.n	8006cd4 <_free_r+0x48>
 8006cde:	6819      	ldr	r1, [r3, #0]
 8006ce0:	1858      	adds	r0, r3, r1
 8006ce2:	42a0      	cmp	r0, r4
 8006ce4:	d10b      	bne.n	8006cfe <_free_r+0x72>
 8006ce6:	6820      	ldr	r0, [r4, #0]
 8006ce8:	4401      	add	r1, r0
 8006cea:	1858      	adds	r0, r3, r1
 8006cec:	4282      	cmp	r2, r0
 8006cee:	6019      	str	r1, [r3, #0]
 8006cf0:	d1de      	bne.n	8006cb0 <_free_r+0x24>
 8006cf2:	6810      	ldr	r0, [r2, #0]
 8006cf4:	6852      	ldr	r2, [r2, #4]
 8006cf6:	4401      	add	r1, r0
 8006cf8:	6019      	str	r1, [r3, #0]
 8006cfa:	605a      	str	r2, [r3, #4]
 8006cfc:	e7d8      	b.n	8006cb0 <_free_r+0x24>
 8006cfe:	d902      	bls.n	8006d06 <_free_r+0x7a>
 8006d00:	230c      	movs	r3, #12
 8006d02:	602b      	str	r3, [r5, #0]
 8006d04:	e7d4      	b.n	8006cb0 <_free_r+0x24>
 8006d06:	6820      	ldr	r0, [r4, #0]
 8006d08:	1821      	adds	r1, r4, r0
 8006d0a:	428a      	cmp	r2, r1
 8006d0c:	bf01      	itttt	eq
 8006d0e:	6811      	ldreq	r1, [r2, #0]
 8006d10:	6852      	ldreq	r2, [r2, #4]
 8006d12:	1809      	addeq	r1, r1, r0
 8006d14:	6021      	streq	r1, [r4, #0]
 8006d16:	6062      	str	r2, [r4, #4]
 8006d18:	605c      	str	r4, [r3, #4]
 8006d1a:	e7c9      	b.n	8006cb0 <_free_r+0x24>
 8006d1c:	bd38      	pop	{r3, r4, r5, pc}
 8006d1e:	bf00      	nop
 8006d20:	20000204 	.word	0x20000204

08006d24 <_malloc_r>:
 8006d24:	b570      	push	{r4, r5, r6, lr}
 8006d26:	1ccd      	adds	r5, r1, #3
 8006d28:	f025 0503 	bic.w	r5, r5, #3
 8006d2c:	3508      	adds	r5, #8
 8006d2e:	2d0c      	cmp	r5, #12
 8006d30:	bf38      	it	cc
 8006d32:	250c      	movcc	r5, #12
 8006d34:	2d00      	cmp	r5, #0
 8006d36:	4606      	mov	r6, r0
 8006d38:	db01      	blt.n	8006d3e <_malloc_r+0x1a>
 8006d3a:	42a9      	cmp	r1, r5
 8006d3c:	d903      	bls.n	8006d46 <_malloc_r+0x22>
 8006d3e:	230c      	movs	r3, #12
 8006d40:	6033      	str	r3, [r6, #0]
 8006d42:	2000      	movs	r0, #0
 8006d44:	bd70      	pop	{r4, r5, r6, pc}
 8006d46:	f000 f9e1 	bl	800710c <__malloc_lock>
 8006d4a:	4a21      	ldr	r2, [pc, #132]	; (8006dd0 <_malloc_r+0xac>)
 8006d4c:	6814      	ldr	r4, [r2, #0]
 8006d4e:	4621      	mov	r1, r4
 8006d50:	b991      	cbnz	r1, 8006d78 <_malloc_r+0x54>
 8006d52:	4c20      	ldr	r4, [pc, #128]	; (8006dd4 <_malloc_r+0xb0>)
 8006d54:	6823      	ldr	r3, [r4, #0]
 8006d56:	b91b      	cbnz	r3, 8006d60 <_malloc_r+0x3c>
 8006d58:	4630      	mov	r0, r6
 8006d5a:	f000 f98f 	bl	800707c <_sbrk_r>
 8006d5e:	6020      	str	r0, [r4, #0]
 8006d60:	4629      	mov	r1, r5
 8006d62:	4630      	mov	r0, r6
 8006d64:	f000 f98a 	bl	800707c <_sbrk_r>
 8006d68:	1c43      	adds	r3, r0, #1
 8006d6a:	d124      	bne.n	8006db6 <_malloc_r+0x92>
 8006d6c:	230c      	movs	r3, #12
 8006d6e:	4630      	mov	r0, r6
 8006d70:	6033      	str	r3, [r6, #0]
 8006d72:	f000 f9cc 	bl	800710e <__malloc_unlock>
 8006d76:	e7e4      	b.n	8006d42 <_malloc_r+0x1e>
 8006d78:	680b      	ldr	r3, [r1, #0]
 8006d7a:	1b5b      	subs	r3, r3, r5
 8006d7c:	d418      	bmi.n	8006db0 <_malloc_r+0x8c>
 8006d7e:	2b0b      	cmp	r3, #11
 8006d80:	d90f      	bls.n	8006da2 <_malloc_r+0x7e>
 8006d82:	600b      	str	r3, [r1, #0]
 8006d84:	18cc      	adds	r4, r1, r3
 8006d86:	50cd      	str	r5, [r1, r3]
 8006d88:	4630      	mov	r0, r6
 8006d8a:	f000 f9c0 	bl	800710e <__malloc_unlock>
 8006d8e:	f104 000b 	add.w	r0, r4, #11
 8006d92:	1d23      	adds	r3, r4, #4
 8006d94:	f020 0007 	bic.w	r0, r0, #7
 8006d98:	1ac3      	subs	r3, r0, r3
 8006d9a:	d0d3      	beq.n	8006d44 <_malloc_r+0x20>
 8006d9c:	425a      	negs	r2, r3
 8006d9e:	50e2      	str	r2, [r4, r3]
 8006da0:	e7d0      	b.n	8006d44 <_malloc_r+0x20>
 8006da2:	684b      	ldr	r3, [r1, #4]
 8006da4:	428c      	cmp	r4, r1
 8006da6:	bf16      	itet	ne
 8006da8:	6063      	strne	r3, [r4, #4]
 8006daa:	6013      	streq	r3, [r2, #0]
 8006dac:	460c      	movne	r4, r1
 8006dae:	e7eb      	b.n	8006d88 <_malloc_r+0x64>
 8006db0:	460c      	mov	r4, r1
 8006db2:	6849      	ldr	r1, [r1, #4]
 8006db4:	e7cc      	b.n	8006d50 <_malloc_r+0x2c>
 8006db6:	1cc4      	adds	r4, r0, #3
 8006db8:	f024 0403 	bic.w	r4, r4, #3
 8006dbc:	42a0      	cmp	r0, r4
 8006dbe:	d005      	beq.n	8006dcc <_malloc_r+0xa8>
 8006dc0:	1a21      	subs	r1, r4, r0
 8006dc2:	4630      	mov	r0, r6
 8006dc4:	f000 f95a 	bl	800707c <_sbrk_r>
 8006dc8:	3001      	adds	r0, #1
 8006dca:	d0cf      	beq.n	8006d6c <_malloc_r+0x48>
 8006dcc:	6025      	str	r5, [r4, #0]
 8006dce:	e7db      	b.n	8006d88 <_malloc_r+0x64>
 8006dd0:	20000204 	.word	0x20000204
 8006dd4:	20000208 	.word	0x20000208

08006dd8 <__ssputs_r>:
 8006dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ddc:	688e      	ldr	r6, [r1, #8]
 8006dde:	4682      	mov	sl, r0
 8006de0:	429e      	cmp	r6, r3
 8006de2:	460c      	mov	r4, r1
 8006de4:	4690      	mov	r8, r2
 8006de6:	4699      	mov	r9, r3
 8006de8:	d837      	bhi.n	8006e5a <__ssputs_r+0x82>
 8006dea:	898a      	ldrh	r2, [r1, #12]
 8006dec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006df0:	d031      	beq.n	8006e56 <__ssputs_r+0x7e>
 8006df2:	2302      	movs	r3, #2
 8006df4:	6825      	ldr	r5, [r4, #0]
 8006df6:	6909      	ldr	r1, [r1, #16]
 8006df8:	1a6f      	subs	r7, r5, r1
 8006dfa:	6965      	ldr	r5, [r4, #20]
 8006dfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e00:	fb95 f5f3 	sdiv	r5, r5, r3
 8006e04:	f109 0301 	add.w	r3, r9, #1
 8006e08:	443b      	add	r3, r7
 8006e0a:	429d      	cmp	r5, r3
 8006e0c:	bf38      	it	cc
 8006e0e:	461d      	movcc	r5, r3
 8006e10:	0553      	lsls	r3, r2, #21
 8006e12:	d530      	bpl.n	8006e76 <__ssputs_r+0x9e>
 8006e14:	4629      	mov	r1, r5
 8006e16:	f7ff ff85 	bl	8006d24 <_malloc_r>
 8006e1a:	4606      	mov	r6, r0
 8006e1c:	b950      	cbnz	r0, 8006e34 <__ssputs_r+0x5c>
 8006e1e:	230c      	movs	r3, #12
 8006e20:	f04f 30ff 	mov.w	r0, #4294967295
 8006e24:	f8ca 3000 	str.w	r3, [sl]
 8006e28:	89a3      	ldrh	r3, [r4, #12]
 8006e2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e2e:	81a3      	strh	r3, [r4, #12]
 8006e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e34:	463a      	mov	r2, r7
 8006e36:	6921      	ldr	r1, [r4, #16]
 8006e38:	f7ff fb16 	bl	8006468 <memcpy>
 8006e3c:	89a3      	ldrh	r3, [r4, #12]
 8006e3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e46:	81a3      	strh	r3, [r4, #12]
 8006e48:	6126      	str	r6, [r4, #16]
 8006e4a:	443e      	add	r6, r7
 8006e4c:	6026      	str	r6, [r4, #0]
 8006e4e:	464e      	mov	r6, r9
 8006e50:	6165      	str	r5, [r4, #20]
 8006e52:	1bed      	subs	r5, r5, r7
 8006e54:	60a5      	str	r5, [r4, #8]
 8006e56:	454e      	cmp	r6, r9
 8006e58:	d900      	bls.n	8006e5c <__ssputs_r+0x84>
 8006e5a:	464e      	mov	r6, r9
 8006e5c:	4632      	mov	r2, r6
 8006e5e:	4641      	mov	r1, r8
 8006e60:	6820      	ldr	r0, [r4, #0]
 8006e62:	f000 f93a 	bl	80070da <memmove>
 8006e66:	68a3      	ldr	r3, [r4, #8]
 8006e68:	2000      	movs	r0, #0
 8006e6a:	1b9b      	subs	r3, r3, r6
 8006e6c:	60a3      	str	r3, [r4, #8]
 8006e6e:	6823      	ldr	r3, [r4, #0]
 8006e70:	441e      	add	r6, r3
 8006e72:	6026      	str	r6, [r4, #0]
 8006e74:	e7dc      	b.n	8006e30 <__ssputs_r+0x58>
 8006e76:	462a      	mov	r2, r5
 8006e78:	f000 f94a 	bl	8007110 <_realloc_r>
 8006e7c:	4606      	mov	r6, r0
 8006e7e:	2800      	cmp	r0, #0
 8006e80:	d1e2      	bne.n	8006e48 <__ssputs_r+0x70>
 8006e82:	6921      	ldr	r1, [r4, #16]
 8006e84:	4650      	mov	r0, sl
 8006e86:	f7ff ff01 	bl	8006c8c <_free_r>
 8006e8a:	e7c8      	b.n	8006e1e <__ssputs_r+0x46>

08006e8c <_svfiprintf_r>:
 8006e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e90:	461d      	mov	r5, r3
 8006e92:	898b      	ldrh	r3, [r1, #12]
 8006e94:	b09d      	sub	sp, #116	; 0x74
 8006e96:	061f      	lsls	r7, r3, #24
 8006e98:	4680      	mov	r8, r0
 8006e9a:	460c      	mov	r4, r1
 8006e9c:	4616      	mov	r6, r2
 8006e9e:	d50f      	bpl.n	8006ec0 <_svfiprintf_r+0x34>
 8006ea0:	690b      	ldr	r3, [r1, #16]
 8006ea2:	b96b      	cbnz	r3, 8006ec0 <_svfiprintf_r+0x34>
 8006ea4:	2140      	movs	r1, #64	; 0x40
 8006ea6:	f7ff ff3d 	bl	8006d24 <_malloc_r>
 8006eaa:	6020      	str	r0, [r4, #0]
 8006eac:	6120      	str	r0, [r4, #16]
 8006eae:	b928      	cbnz	r0, 8006ebc <_svfiprintf_r+0x30>
 8006eb0:	230c      	movs	r3, #12
 8006eb2:	f8c8 3000 	str.w	r3, [r8]
 8006eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8006eba:	e0c8      	b.n	800704e <_svfiprintf_r+0x1c2>
 8006ebc:	2340      	movs	r3, #64	; 0x40
 8006ebe:	6163      	str	r3, [r4, #20]
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	9309      	str	r3, [sp, #36]	; 0x24
 8006ec4:	2320      	movs	r3, #32
 8006ec6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006eca:	2330      	movs	r3, #48	; 0x30
 8006ecc:	f04f 0b01 	mov.w	fp, #1
 8006ed0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ed4:	9503      	str	r5, [sp, #12]
 8006ed6:	4637      	mov	r7, r6
 8006ed8:	463d      	mov	r5, r7
 8006eda:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006ede:	b10b      	cbz	r3, 8006ee4 <_svfiprintf_r+0x58>
 8006ee0:	2b25      	cmp	r3, #37	; 0x25
 8006ee2:	d13e      	bne.n	8006f62 <_svfiprintf_r+0xd6>
 8006ee4:	ebb7 0a06 	subs.w	sl, r7, r6
 8006ee8:	d00b      	beq.n	8006f02 <_svfiprintf_r+0x76>
 8006eea:	4653      	mov	r3, sl
 8006eec:	4632      	mov	r2, r6
 8006eee:	4621      	mov	r1, r4
 8006ef0:	4640      	mov	r0, r8
 8006ef2:	f7ff ff71 	bl	8006dd8 <__ssputs_r>
 8006ef6:	3001      	adds	r0, #1
 8006ef8:	f000 80a4 	beq.w	8007044 <_svfiprintf_r+0x1b8>
 8006efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006efe:	4453      	add	r3, sl
 8006f00:	9309      	str	r3, [sp, #36]	; 0x24
 8006f02:	783b      	ldrb	r3, [r7, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	f000 809d 	beq.w	8007044 <_svfiprintf_r+0x1b8>
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f14:	9304      	str	r3, [sp, #16]
 8006f16:	9307      	str	r3, [sp, #28]
 8006f18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f1c:	931a      	str	r3, [sp, #104]	; 0x68
 8006f1e:	462f      	mov	r7, r5
 8006f20:	2205      	movs	r2, #5
 8006f22:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006f26:	4850      	ldr	r0, [pc, #320]	; (8007068 <_svfiprintf_r+0x1dc>)
 8006f28:	f7ff fa90 	bl	800644c <memchr>
 8006f2c:	9b04      	ldr	r3, [sp, #16]
 8006f2e:	b9d0      	cbnz	r0, 8006f66 <_svfiprintf_r+0xda>
 8006f30:	06d9      	lsls	r1, r3, #27
 8006f32:	bf44      	itt	mi
 8006f34:	2220      	movmi	r2, #32
 8006f36:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006f3a:	071a      	lsls	r2, r3, #28
 8006f3c:	bf44      	itt	mi
 8006f3e:	222b      	movmi	r2, #43	; 0x2b
 8006f40:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006f44:	782a      	ldrb	r2, [r5, #0]
 8006f46:	2a2a      	cmp	r2, #42	; 0x2a
 8006f48:	d015      	beq.n	8006f76 <_svfiprintf_r+0xea>
 8006f4a:	462f      	mov	r7, r5
 8006f4c:	2000      	movs	r0, #0
 8006f4e:	250a      	movs	r5, #10
 8006f50:	9a07      	ldr	r2, [sp, #28]
 8006f52:	4639      	mov	r1, r7
 8006f54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f58:	3b30      	subs	r3, #48	; 0x30
 8006f5a:	2b09      	cmp	r3, #9
 8006f5c:	d94d      	bls.n	8006ffa <_svfiprintf_r+0x16e>
 8006f5e:	b1b8      	cbz	r0, 8006f90 <_svfiprintf_r+0x104>
 8006f60:	e00f      	b.n	8006f82 <_svfiprintf_r+0xf6>
 8006f62:	462f      	mov	r7, r5
 8006f64:	e7b8      	b.n	8006ed8 <_svfiprintf_r+0x4c>
 8006f66:	4a40      	ldr	r2, [pc, #256]	; (8007068 <_svfiprintf_r+0x1dc>)
 8006f68:	463d      	mov	r5, r7
 8006f6a:	1a80      	subs	r0, r0, r2
 8006f6c:	fa0b f000 	lsl.w	r0, fp, r0
 8006f70:	4318      	orrs	r0, r3
 8006f72:	9004      	str	r0, [sp, #16]
 8006f74:	e7d3      	b.n	8006f1e <_svfiprintf_r+0x92>
 8006f76:	9a03      	ldr	r2, [sp, #12]
 8006f78:	1d11      	adds	r1, r2, #4
 8006f7a:	6812      	ldr	r2, [r2, #0]
 8006f7c:	9103      	str	r1, [sp, #12]
 8006f7e:	2a00      	cmp	r2, #0
 8006f80:	db01      	blt.n	8006f86 <_svfiprintf_r+0xfa>
 8006f82:	9207      	str	r2, [sp, #28]
 8006f84:	e004      	b.n	8006f90 <_svfiprintf_r+0x104>
 8006f86:	4252      	negs	r2, r2
 8006f88:	f043 0302 	orr.w	r3, r3, #2
 8006f8c:	9207      	str	r2, [sp, #28]
 8006f8e:	9304      	str	r3, [sp, #16]
 8006f90:	783b      	ldrb	r3, [r7, #0]
 8006f92:	2b2e      	cmp	r3, #46	; 0x2e
 8006f94:	d10c      	bne.n	8006fb0 <_svfiprintf_r+0x124>
 8006f96:	787b      	ldrb	r3, [r7, #1]
 8006f98:	2b2a      	cmp	r3, #42	; 0x2a
 8006f9a:	d133      	bne.n	8007004 <_svfiprintf_r+0x178>
 8006f9c:	9b03      	ldr	r3, [sp, #12]
 8006f9e:	3702      	adds	r7, #2
 8006fa0:	1d1a      	adds	r2, r3, #4
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	9203      	str	r2, [sp, #12]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	bfb8      	it	lt
 8006faa:	f04f 33ff 	movlt.w	r3, #4294967295
 8006fae:	9305      	str	r3, [sp, #20]
 8006fb0:	4d2e      	ldr	r5, [pc, #184]	; (800706c <_svfiprintf_r+0x1e0>)
 8006fb2:	2203      	movs	r2, #3
 8006fb4:	7839      	ldrb	r1, [r7, #0]
 8006fb6:	4628      	mov	r0, r5
 8006fb8:	f7ff fa48 	bl	800644c <memchr>
 8006fbc:	b138      	cbz	r0, 8006fce <_svfiprintf_r+0x142>
 8006fbe:	2340      	movs	r3, #64	; 0x40
 8006fc0:	1b40      	subs	r0, r0, r5
 8006fc2:	fa03 f000 	lsl.w	r0, r3, r0
 8006fc6:	9b04      	ldr	r3, [sp, #16]
 8006fc8:	3701      	adds	r7, #1
 8006fca:	4303      	orrs	r3, r0
 8006fcc:	9304      	str	r3, [sp, #16]
 8006fce:	7839      	ldrb	r1, [r7, #0]
 8006fd0:	2206      	movs	r2, #6
 8006fd2:	4827      	ldr	r0, [pc, #156]	; (8007070 <_svfiprintf_r+0x1e4>)
 8006fd4:	1c7e      	adds	r6, r7, #1
 8006fd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006fda:	f7ff fa37 	bl	800644c <memchr>
 8006fde:	2800      	cmp	r0, #0
 8006fe0:	d038      	beq.n	8007054 <_svfiprintf_r+0x1c8>
 8006fe2:	4b24      	ldr	r3, [pc, #144]	; (8007074 <_svfiprintf_r+0x1e8>)
 8006fe4:	bb13      	cbnz	r3, 800702c <_svfiprintf_r+0x1a0>
 8006fe6:	9b03      	ldr	r3, [sp, #12]
 8006fe8:	3307      	adds	r3, #7
 8006fea:	f023 0307 	bic.w	r3, r3, #7
 8006fee:	3308      	adds	r3, #8
 8006ff0:	9303      	str	r3, [sp, #12]
 8006ff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ff4:	444b      	add	r3, r9
 8006ff6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ff8:	e76d      	b.n	8006ed6 <_svfiprintf_r+0x4a>
 8006ffa:	fb05 3202 	mla	r2, r5, r2, r3
 8006ffe:	2001      	movs	r0, #1
 8007000:	460f      	mov	r7, r1
 8007002:	e7a6      	b.n	8006f52 <_svfiprintf_r+0xc6>
 8007004:	2300      	movs	r3, #0
 8007006:	250a      	movs	r5, #10
 8007008:	4619      	mov	r1, r3
 800700a:	3701      	adds	r7, #1
 800700c:	9305      	str	r3, [sp, #20]
 800700e:	4638      	mov	r0, r7
 8007010:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007014:	3a30      	subs	r2, #48	; 0x30
 8007016:	2a09      	cmp	r2, #9
 8007018:	d903      	bls.n	8007022 <_svfiprintf_r+0x196>
 800701a:	2b00      	cmp	r3, #0
 800701c:	d0c8      	beq.n	8006fb0 <_svfiprintf_r+0x124>
 800701e:	9105      	str	r1, [sp, #20]
 8007020:	e7c6      	b.n	8006fb0 <_svfiprintf_r+0x124>
 8007022:	fb05 2101 	mla	r1, r5, r1, r2
 8007026:	2301      	movs	r3, #1
 8007028:	4607      	mov	r7, r0
 800702a:	e7f0      	b.n	800700e <_svfiprintf_r+0x182>
 800702c:	ab03      	add	r3, sp, #12
 800702e:	9300      	str	r3, [sp, #0]
 8007030:	4622      	mov	r2, r4
 8007032:	4b11      	ldr	r3, [pc, #68]	; (8007078 <_svfiprintf_r+0x1ec>)
 8007034:	a904      	add	r1, sp, #16
 8007036:	4640      	mov	r0, r8
 8007038:	f7fc fbee 	bl	8003818 <_printf_float>
 800703c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007040:	4681      	mov	r9, r0
 8007042:	d1d6      	bne.n	8006ff2 <_svfiprintf_r+0x166>
 8007044:	89a3      	ldrh	r3, [r4, #12]
 8007046:	065b      	lsls	r3, r3, #25
 8007048:	f53f af35 	bmi.w	8006eb6 <_svfiprintf_r+0x2a>
 800704c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800704e:	b01d      	add	sp, #116	; 0x74
 8007050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007054:	ab03      	add	r3, sp, #12
 8007056:	9300      	str	r3, [sp, #0]
 8007058:	4622      	mov	r2, r4
 800705a:	4b07      	ldr	r3, [pc, #28]	; (8007078 <_svfiprintf_r+0x1ec>)
 800705c:	a904      	add	r1, sp, #16
 800705e:	4640      	mov	r0, r8
 8007060:	f7fc fe86 	bl	8003d70 <_printf_i>
 8007064:	e7ea      	b.n	800703c <_svfiprintf_r+0x1b0>
 8007066:	bf00      	nop
 8007068:	0800738c 	.word	0x0800738c
 800706c:	08007392 	.word	0x08007392
 8007070:	08007396 	.word	0x08007396
 8007074:	08003819 	.word	0x08003819
 8007078:	08006dd9 	.word	0x08006dd9

0800707c <_sbrk_r>:
 800707c:	b538      	push	{r3, r4, r5, lr}
 800707e:	2300      	movs	r3, #0
 8007080:	4c05      	ldr	r4, [pc, #20]	; (8007098 <_sbrk_r+0x1c>)
 8007082:	4605      	mov	r5, r0
 8007084:	4608      	mov	r0, r1
 8007086:	6023      	str	r3, [r4, #0]
 8007088:	f7fa fee2 	bl	8001e50 <_sbrk>
 800708c:	1c43      	adds	r3, r0, #1
 800708e:	d102      	bne.n	8007096 <_sbrk_r+0x1a>
 8007090:	6823      	ldr	r3, [r4, #0]
 8007092:	b103      	cbz	r3, 8007096 <_sbrk_r+0x1a>
 8007094:	602b      	str	r3, [r5, #0]
 8007096:	bd38      	pop	{r3, r4, r5, pc}
 8007098:	20000284 	.word	0x20000284

0800709c <strncmp>:
 800709c:	b510      	push	{r4, lr}
 800709e:	b16a      	cbz	r2, 80070bc <strncmp+0x20>
 80070a0:	3901      	subs	r1, #1
 80070a2:	1884      	adds	r4, r0, r2
 80070a4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80070a8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d103      	bne.n	80070b8 <strncmp+0x1c>
 80070b0:	42a0      	cmp	r0, r4
 80070b2:	d001      	beq.n	80070b8 <strncmp+0x1c>
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d1f5      	bne.n	80070a4 <strncmp+0x8>
 80070b8:	1a98      	subs	r0, r3, r2
 80070ba:	bd10      	pop	{r4, pc}
 80070bc:	4610      	mov	r0, r2
 80070be:	e7fc      	b.n	80070ba <strncmp+0x1e>

080070c0 <__ascii_wctomb>:
 80070c0:	b149      	cbz	r1, 80070d6 <__ascii_wctomb+0x16>
 80070c2:	2aff      	cmp	r2, #255	; 0xff
 80070c4:	bf8b      	itete	hi
 80070c6:	238a      	movhi	r3, #138	; 0x8a
 80070c8:	700a      	strbls	r2, [r1, #0]
 80070ca:	6003      	strhi	r3, [r0, #0]
 80070cc:	2001      	movls	r0, #1
 80070ce:	bf88      	it	hi
 80070d0:	f04f 30ff 	movhi.w	r0, #4294967295
 80070d4:	4770      	bx	lr
 80070d6:	4608      	mov	r0, r1
 80070d8:	4770      	bx	lr

080070da <memmove>:
 80070da:	4288      	cmp	r0, r1
 80070dc:	b510      	push	{r4, lr}
 80070de:	eb01 0302 	add.w	r3, r1, r2
 80070e2:	d807      	bhi.n	80070f4 <memmove+0x1a>
 80070e4:	1e42      	subs	r2, r0, #1
 80070e6:	4299      	cmp	r1, r3
 80070e8:	d00a      	beq.n	8007100 <memmove+0x26>
 80070ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070ee:	f802 4f01 	strb.w	r4, [r2, #1]!
 80070f2:	e7f8      	b.n	80070e6 <memmove+0xc>
 80070f4:	4283      	cmp	r3, r0
 80070f6:	d9f5      	bls.n	80070e4 <memmove+0xa>
 80070f8:	1881      	adds	r1, r0, r2
 80070fa:	1ad2      	subs	r2, r2, r3
 80070fc:	42d3      	cmn	r3, r2
 80070fe:	d100      	bne.n	8007102 <memmove+0x28>
 8007100:	bd10      	pop	{r4, pc}
 8007102:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007106:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800710a:	e7f7      	b.n	80070fc <memmove+0x22>

0800710c <__malloc_lock>:
 800710c:	4770      	bx	lr

0800710e <__malloc_unlock>:
 800710e:	4770      	bx	lr

08007110 <_realloc_r>:
 8007110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007112:	4607      	mov	r7, r0
 8007114:	4614      	mov	r4, r2
 8007116:	460e      	mov	r6, r1
 8007118:	b921      	cbnz	r1, 8007124 <_realloc_r+0x14>
 800711a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800711e:	4611      	mov	r1, r2
 8007120:	f7ff be00 	b.w	8006d24 <_malloc_r>
 8007124:	b922      	cbnz	r2, 8007130 <_realloc_r+0x20>
 8007126:	f7ff fdb1 	bl	8006c8c <_free_r>
 800712a:	4625      	mov	r5, r4
 800712c:	4628      	mov	r0, r5
 800712e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007130:	f000 f814 	bl	800715c <_malloc_usable_size_r>
 8007134:	42a0      	cmp	r0, r4
 8007136:	d20f      	bcs.n	8007158 <_realloc_r+0x48>
 8007138:	4621      	mov	r1, r4
 800713a:	4638      	mov	r0, r7
 800713c:	f7ff fdf2 	bl	8006d24 <_malloc_r>
 8007140:	4605      	mov	r5, r0
 8007142:	2800      	cmp	r0, #0
 8007144:	d0f2      	beq.n	800712c <_realloc_r+0x1c>
 8007146:	4631      	mov	r1, r6
 8007148:	4622      	mov	r2, r4
 800714a:	f7ff f98d 	bl	8006468 <memcpy>
 800714e:	4631      	mov	r1, r6
 8007150:	4638      	mov	r0, r7
 8007152:	f7ff fd9b 	bl	8006c8c <_free_r>
 8007156:	e7e9      	b.n	800712c <_realloc_r+0x1c>
 8007158:	4635      	mov	r5, r6
 800715a:	e7e7      	b.n	800712c <_realloc_r+0x1c>

0800715c <_malloc_usable_size_r>:
 800715c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007160:	1f18      	subs	r0, r3, #4
 8007162:	2b00      	cmp	r3, #0
 8007164:	bfbc      	itt	lt
 8007166:	580b      	ldrlt	r3, [r1, r0]
 8007168:	18c0      	addlt	r0, r0, r3
 800716a:	4770      	bx	lr

0800716c <_init>:
 800716c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800716e:	bf00      	nop
 8007170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007172:	bc08      	pop	{r3}
 8007174:	469e      	mov	lr, r3
 8007176:	4770      	bx	lr

08007178 <_fini>:
 8007178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800717a:	bf00      	nop
 800717c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800717e:	bc08      	pop	{r3}
 8007180:	469e      	mov	lr, r3
 8007182:	4770      	bx	lr
